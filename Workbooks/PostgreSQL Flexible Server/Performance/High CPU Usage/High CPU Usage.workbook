{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "## High CPU Utilization\r\n\r\n<h6>*In this workbook we will try to identify the probable causes of high CPU utilization and possible fixes to mitigate the issue.*</h6>\r\n\r\n<h6>*High CPU utilization can be caused by several reasons which includes increased workload, slow running queries, increased number of connections on the server or suboptimal statistics in tables because autovacuum is not catching up with the workload. The table below highlights each step that needs to be followed using the workbook to understand the behavior on the server.*</h6>\r\n\r\nStep | Observations\r\n--- | ---\r\n**Select Parameters** | Step 0: Select servername, time interval of interest and server region.\r\n**Understand CPU usage** | Step 1: Check `CPU` usage on the server. Any spike in values compared to previous time intervals can be considered unusual which needs further investigation.\r\n**Understand the workload** | Step 2: Check `read` and `write workloads`. Read workload includes select queries, while write workload includes insert, update, delete queries. Compare the CPU spike seen in step1 with read and write workloads. Any spike in workload during the window of interest points to increased workload on server.\r\n**Transaction Trend [tps] ** | Step 3: Analyze transaction trends on the server.\r\n**Do you see long running transactions** | Step 4:  Analyze the `long running transactions` section to identify PIDs which have long running transactions. Follow mitigation steps suggested in the section and monitor CPU usage.\r\n**Identify time cosuming queries** | Step 5: Along with identifying long running transactions also check top 5 time consuming queries during window of interest from the `High time-consuming queries` section. Follow mitigation steps suggested in the section and monitor CPU usage.\r\n**Understand connectivity patterns** | Step 6: Understand connectivity patterns from `total connections` section. Follow mitigation steps suggested in the section and monitor CPU Usage.\r\n"
      },
      "name": "text - 37",
      "styleSettings": {
        "margin": "100",
        "padding": "100"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "##### Workbook Contents"
      },
      "name": "text - 38"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "bullets",
        "links": [
          {
            "id": "0f0da63a-e187-4b85-93d4-d6094e6afc80",
            "cellValue": "text - cpu",
            "linkTarget": "step",
            "linkLabel": "CPU Utilization",
            "style": "link"
          },
          {
            "id": "c73d4781-7b84-469c-984f-ae3b5a56e2c4",
            "cellValue": "Read Write Workload Details",
            "linkTarget": "step",
            "linkLabel": "Workload Details",
            "style": "link"
          },
          {
            "id": "bd46df02-1fc3-4dfc-9801-065eed31b6c7",
            "cellValue": "Transaction Trend and Count",
            "linkTarget": "step",
            "linkLabel": "Transaction Trends [tps]",
            "style": "link"
          },
          {
            "id": "cca531d7-aa39-46ce-9609-fbd792464542",
            "cellValue": "Long Running Transactions",
            "linkTarget": "step",
            "linkLabel": "Long Running Transactions",
            "style": "link"
          },
          {
            "id": "13197142-64a6-4000-88ba-f7e349b3b9d3",
            "cellValue": "High Time Consuming Queries",
            "linkTarget": "step",
            "linkLabel": "High Time Consuming Queries",
            "style": "link"
          },
          {
            "id": "c6178eee-47a5-438e-b7c8-f56a936abf67",
            "cellValue": "Total User Only Connections",
            "linkTarget": "step",
            "linkLabel": "Connections Details",
            "style": "link"
          }
        ]
      },
      "name": "links - 35"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Start by setting the following parameters for the incident server:\r\n"
      },
      "name": "text - 32"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscription}"
        ],
        "parameters": [
          {
            "id": "0563d711-3d5d-40ac-aa35-5f96b849aee5",
            "version": "KqlParameterItem/1.0",
            "name": "Subscription",
            "type": 6,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "includeAll": true,
              "showDefault": false
            },
            "value": null
          },
          {
            "id": "778f33f0-034d-4a5b-a7c7-9b990f81d7ea",
            "version": "KqlParameterItem/1.0",
            "name": "Resource",
            "type": 5,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false,
              "componentIdOnly": true
            }
          },
          {
            "id": "9ebd8e9a-5e9c-496a-bdb1-e41b9faaf9ad",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 2419200000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "label": "TimeRange (Local Time)"
          },
          {
            "id": "f8678c39-7dad-4aef-aae1-d67793e82c01",
            "version": "KqlParameterItem/1.0",
            "name": "MIN_TIME_WINDOW_SEC",
            "type": 1,
            "description": "Defines the minimum time a connection may exist before it is classified as long lived",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "3600"
                }
              }
            ]
          },
          {
            "id": "13ee21e4-ee50-48cd-880d-6ea3b62d96c3",
            "version": "KqlParameterItem/1.0",
            "name": "HIGH_CONNECTION_COUNT",
            "type": 1,
            "description": "Minimum # of connections before server is classified as having a high connection count ",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "150"
                }
              }
            ]
          },
          {
            "id": "e9948714-d7f2-45f2-bd63-0ba9a493962b",
            "version": "KqlParameterItem/1.0",
            "name": "LONG_RUNNING_QUERY_SEC_DURATION_THRESHOLD",
            "type": 1,
            "description": "Defines the minimum number of seconds a query can take before it is classified in this workbook as long running ",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "7200"
                }
              }
            ]
          },
          {
            "id": "e43a4f05-b912-4815-870d-e22141b050fc",
            "version": "KqlParameterItem/1.0",
            "name": "WINDOW_SIZE_FOR_QUERY_TIME_CAPTURE",
            "type": 1,
            "description": "Specifies aggregation window to capture max query time for high time consuming queries ",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "30m"
                }
              }
            ]
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "MIN_XACT_TIME_MS_THRESHOLD_FOR_LONG_XACTS",
            "type": 1,
            "description": "Defines the minimum time a connection may exist before it is classified as long lived",
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "7200000"
                }
              }
            ],
            "id": "e43b3ea3-5702-449e-8da6-fcba878649f9"
          },
          {
            "id": "8cbf68c1-e64a-4286-928b-f248a99a4989",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics"
                }
              }
            ]
          },
          {
            "id": "7f241474-2356-49f4-bbac-1d528f3210e5",
            "version": "KqlParameterItem/1.0",
            "name": "SessionsTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics"
                }
              }
            ]
          },
          {
            "id": "e1c1909b-bda2-4692-b400-b666366a23a6",
            "version": "KqlParameterItem/1.0",
            "name": "MetricsTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureMetrics"
                }
              }
            ]
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "TablestatsTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics"
                }
              }
            ],
            "id": "4e301c40-91f2-498d-8c7e-d8e476627646"
          },
          {
            "version": "KqlParameterItem/1.0",
            "name": "PGServerLogsTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics"
                }
              }
            ],
            "id": "c97c5981-2927-49e3-bb7f-28b91a02ecf3"
          },
          {
            "id": "e8b3a34f-b56a-44a5-9b23-07810aa47995",
            "version": "KqlParameterItem/1.0",
            "name": "MIN_SESSION_TIME_SEC_THRESHOLD_FOR_LONG_SESSIONS",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "1200"
                }
              }
            ]
          },
          {
            "id": "1215c1a2-2b3c-44d3-9818-864c8e792049",
            "version": "KqlParameterItem/1.0",
            "name": "AV_LOOK_BACK_DAYS",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "7d"
                }
              }
            ]
          },
          {
            "id": "3165c85f-3d3f-48d7-882e-1d8fa747655d",
            "version": "KqlParameterItem/1.0",
            "name": "AV_BLOAT_THRESHOLD",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "50"
                }
              }
            ]
          }
        ],
        "style": "above",
        "queryType": 1,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 0"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "477ec0d7-9343-498c-9124-6ab8e638c20c",
            "version": "KqlParameterItem/1.0",
            "name": "LessThanOneHourInterval",
            "type": 1,
            "query": "let interval = 1h;\r\nprint iff({TimeRange:end} - {TimeRange:start} < interval, \"Yes\", \"No\")",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "75222467-e8dd-49e2-acce-4dd4306b5d20",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreCheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/pg_qs.query_capture_mode?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":true,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..value\",\"columns\":[]}}]}",
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 12
          },
          {
            "id": "77b10db0-dfc9-451b-97dd-1e3fbc6ea695",
            "version": "KqlParameterItem/1.0",
            "name": "isQueryStoreEnabled",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "QueryStoreCheck",
                  "operator": "!=",
                  "rightValType": "static",
                  "rightVal": "none",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "56b02e54-1a1d-42f8-a28b-f15880f68523",
            "version": "KqlParameterItem/1.0",
            "name": "isQueryTimeHigh",
            "type": 1,
            "query": "let dt = {TimeRange:end};\r\nlet GlobalEndTime = iff(dt<now(), dt, now());\r\n\r\nlet GlobalStartTime= iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime(GlobalEndTime)-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start});\r\n\r\nlet Start_Time = todatetime(GlobalStartTime);\r\nlet End_Time = todatetime(GlobalEndTime);\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n| where State_s !='idle'\r\n| extend Connection_duration_sec = datetime_diff('second',todatetime(Collection_time_t),todatetime(Backend_start_t)), Query_duration_sec = datetime_diff('second',todatetime(Collection_time_t),todatetime(Query_start_t)), Transaction_duration_sec=datetime_diff('second',todatetime(Collection_time_t),todatetime(Xact_start_t))\r\n| summarize  Transaction_duration_sec=max(Transaction_duration_sec)\r\n| where Transaction_duration_sec > toint({LONG_RUNNING_QUERY_SEC_DURATION_THRESHOLD})\r\n| count\r\n| extend getquerytime = iff((Count) >= 1 , \"Yes\", \"No\")\r\n| project getquerytime",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "25b4ff8a-def1-4bf4-81b2-62f9b180ffcb",
            "version": "KqlParameterItem/1.0",
            "name": "IsServerPrimaryAPI",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..replicationRole\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "3313e0fe-1cc6-4cd9-bb5a-a2197f5ed2bf",
            "version": "KqlParameterItem/1.0",
            "name": "IsServerPrimaryCheck",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "IsServerPrimaryAPI",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Primary",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "5dab1bb7-fa88-4a62-b1b7-ee99a4a55d4c",
            "version": "KqlParameterItem/1.0",
            "name": "IsAVCatchingUp",
            "type": 1,
            "query": "\r\nlet dt = {TimeRange:end};\r\nlet GlobalEndTime = iff(dt<now(), dt, now());\r\n\r\nlet GlobalStartTime= iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime(GlobalEndTime)-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start});\r\n\r\nlet Start_Time = todatetime(GlobalEndTime)-{AV_LOOK_BACK_DAYS};\r\nlet End_Time = todatetime(GlobalEndTime);\r\nlet MAX_BLOAT_PCT=100;\r\nAzureDiagnostics\r\n|where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n|where Category ==\"PostgreSQLFlexTableStats\"\r\n| where DatabaseName_s !in (\"azure_sys\",\"azure_maintenance\")\r\n| where N_live_tup_d >100 and N_dead_tup_d >1000\r\n| summarize LiveTuplesCluster= sum(N_live_tup_d),DeadTuplesCluster=sum(N_dead_tup_d)  \r\n  by bin(TimeGenerated,5m),DatabaseName_s\r\n| summarize LiveTuplesCluster= max(LiveTuplesCluster),DeadTuplesCluster=max(DeadTuplesCluster)  \r\n  by bin(TimeGenerated,1d),DatabaseName_s\r\n| extend BloatRatio=toreal(DeadTuplesCluster)/toreal((DeadTuplesCluster+LiveTuplesCluster))*100\r\n| extend BloatRatio = iff( isnan(BloatRatio), 0.0, BloatRatio)\r\n|project TimeGenerated, DatabaseName_s, BloatRatio\r\n|summarize arg_max(TimeGenerated,latest_bloat_pct=(MAX_BLOAT_PCT-BloatRatio)),arg_min(TimeGenerated,last_bloat_pct=(MAX_BLOAT_PCT-BloatRatio)) by DatabaseName_s\r\n|extend  pct_bloat_change = toreal(((latest_bloat_pct-last_bloat_pct)/((latest_bloat_pct+last_bloat_pct)/2))*100)\r\n|extend pct_bloat_change = iff(isnan(pct_bloat_change),0.0,pct_bloat_change)\r\n|extend actual_latest_pct=MAX_BLOAT_PCT-latest_bloat_pct\r\n|where pct_bloat_change >{AV_BLOAT_THRESHOLD} or actual_latest_pct >{AV_BLOAT_THRESHOLD}\r\n|project DatabaseName_s\r\n",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "fec93f41-8dbe-4eb5-a7b8-d1cae4b20284",
            "version": "KqlParameterItem/1.0",
            "name": "_SevenDaysAgoTimestamp",
            "type": 1,
            "query": "let dt = {TimeRange:end}-7d;\r\nprint \r\nv=format_datetime(dt, 'MM/dd/yyyy hh:mm tt')",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0
          },
          {
            "id": "092a79be-1a20-481d-9a1e-90c468a0a362",
            "version": "KqlParameterItem/1.0",
            "name": "IsMetricsCollectorDatabaseActivityOn",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/metrics.collector_database_activity?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":true,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..value\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "86be5e3b-33b7-4355-a24a-243bdd914591",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIAllLogs",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.categoryGroup=='allLogs')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "be4bdada-99f5-43bc-b32e-dfc0475ff661",
            "version": "KqlParameterItem/1.0",
            "name": "AureDiagAPIQueryStoreRuntime",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.category=='PostgreSQLFlexQueryStoreRuntime')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "f153e854-2870-4873-824f-d794a2d34410",
            "version": "KqlParameterItem/1.0",
            "name": "IsQueryStoreRuntimeSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIAllLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AureDiagAPIQueryStoreRuntime",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "b0d159a5-ca5a-48f3-8a86-291d80a087cc",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIPostgreSQLFlexSessions",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.category=='PostgreSQLFlexSessions')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "03b5d513-44ea-4d5a-99e5-8652296d8b60",
            "version": "KqlParameterItem/1.0",
            "name": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIAllLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIPostgreSQLFlexSessions",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "4e1813b0-d573-4b79-ae58-c74618093e0a",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIMetrics",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..metrics[?(@.category=='AllMetrics')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "228ace36-140b-45dc-8a08-278b4909d980",
            "version": "KqlParameterItem/1.0",
            "name": "IsAllMetricsSentToLogAnalytics",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIMetrics",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "c45a71df-13b4-468a-90bf-7347fa7027fb",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIPostgreSQLLogs",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.category=='PostgreSQLLogs')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "aaa581c6-a9e0-4609-ab48-f4e71f079589",
            "version": "KqlParameterItem/1.0",
            "name": "IsPostgreSQLLogsSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIAllLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIPostgreSQLLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "72aca8c3-e408-428e-8daf-a9d17627c317",
            "version": "KqlParameterItem/1.0",
            "name": "LogMinDuraitonStatementAPI",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/log_min_duration_statement?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..value\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "54672123-bb2b-4672-b834-23e820481295",
            "version": "KqlParameterItem/1.0",
            "name": "IsLogMinDurationStatementEnabled",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "LogMinDuraitonStatementAPI",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "-1",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              }
            ]
          },
          {
            "id": "a8810454-9e0e-4a05-8c89-2c5acaec558f",
            "version": "KqlParameterItem/1.0",
            "name": "IsLogLinePrefixAPI",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/log_line_prefix?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":true,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..value\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "d60cefcd-06c7-4198-8c94-6920e4a994fd",
            "version": "KqlParameterItem/1.0",
            "name": "IsLogLinePrefixSame",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "IsLogLinePrefixAPI",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "%t-%c user=%u,db=%d,app=%a,client=%h",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "param"
                }
              }
            ]
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "parameters - 18"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "bullets",
        "links": [
          {
            "id": "ae6d01c9-7fdf-48d9-ab30-94b7ecc007d3",
            "cellValue": "text - cpu",
            "linkTarget": "step",
            "linkLabel": "CPU Utilization",
            "style": "link"
          },
          {
            "id": "5264d76c-f2a6-4902-9303-fb3a450efbd2",
            "cellValue": "Read Write Workload Details",
            "linkTarget": "step",
            "linkLabel": "Workload Details",
            "style": "link"
          },
          {
            "id": "ab8e7506-377a-4354-9db5-89d7a6cc233a",
            "cellValue": "Transaction Trend and Count",
            "linkTarget": "step",
            "linkLabel": "Transaction Trends [tps]",
            "style": "link"
          },
          {
            "id": "cd5b77f7-162b-4c65-bf75-1708d5efc5d2",
            "cellValue": "Long Running Transactions",
            "linkTarget": "step",
            "linkLabel": "Long Running Transactions",
            "style": "link"
          },
          {
            "id": "797bdd01-7f51-4377-b865-7d8792777e4c",
            "cellValue": "QueriesFromPGLogs",
            "linkTarget": "step",
            "linkLabel": "Top Queries by Duraiton from PostgreSQL Logs",
            "style": "link"
          },
          {
            "id": "06e586ea-40a0-44c4-ab7f-99f8475de03e",
            "cellValue": "Total User Only Connections",
            "linkTarget": "step",
            "linkLabel": "Connections Details",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "links - 35 - Copy"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "### WARNING: The autovacuum process is not able to keep up with the workload for certain databases on the server.\r\n\r\nBetween the time period **{_SevenDaysAgoTimestamp}** and **{TimeRange:end}** the bloat ratio for **{IsAVCatchingUp}**  databases seems to have increased more than {AV_BLOAT_THRESHOLD}% or the bloat ratio for these databases at current time period - {TimeRange:end} is more than {AV_BLOAT_THRESHOLD}%.\r\n\r\nMonitoring statistics and dead tuples in the tables is important. Stale statistics and high number of dead tuples increase query times which contributes to higher CPU consumption.",
              "style": "warning"
            },
            "name": "text - 0"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "list",
              "links": [
                {
                  "id": "57ba7895-7e6a-40fa-ae2f-597495d440f7",
                  "cellValue": "https://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/b11727d3-cf5a-4917-ac31-6f06460ff9b2/resourceGroups/prod-internal-perf-workbooks/providers/microsoft.insights/workbooks/be5accaa-b819-48ca-8529-a5fee6794238/workbook",
                  "linkTarget": "WorkbookTemplate",
                  "linkLabel": "AutoVacuum Monitoring Workbook",
                  "preText": "It is recommended to monitor autovacuum metrics on the server by using the",
                  "postText": ".",
                  "style": "link",
                  "workbookContext": {
                    "componentIdSource": "workbook",
                    "resourceIdsSource": "workbook",
                    "templateIdSource": "static",
                    "templateId": "/subscriptions/b11727d3-cf5a-4917-ac31-6f06460ff9b2/resourceGroups/prod-internal-perf-workbooks/providers/microsoft.insights/workbooks/be5accaa-b819-48ca-8529-a5fee6794238",
                    "typeSource": "workbook",
                    "gallerySource": "workbook",
                    "locationSource": "default",
                    "passSpecificParams": true,
                    "templateParameters": [
                      {
                        "name": "Cluster",
                        "source": "parameter",
                        "value": "Cluster"
                      },
                      {
                        "name": "PgServer",
                        "source": "parameter",
                        "value": "PgServer"
                      },
                      {
                        "name": "TimeRange",
                        "source": "parameter",
                        "value": "TimeRange"
                      }
                    ]
                  }
                }
              ]
            },
            "name": "links - 45"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "IsAVCatchingUp",
        "comparison": "isNotEqualTo",
        "value": ""
      },
      "name": "group - 85"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "### Query Store is currently disabled\r\nThis workbook depends on Query Store data. You need to enable it by setting the dynamic server parameter `pg_qs.query_capture_mode` to either All or TOP, and configuring the Diagnostic Settings destination to log analytics. Please refer to the following guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "isQueryStoreEnabled",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "QSError1"
          },
          {
            "type": 1,
            "content": {
              "json": "### The Query Store data is not being transmitted to the log analytics workspace\r\nThe Query Store data is not being sent to the log analytics workspace, which is necessary to use this workbook. To configure the logging settings for Query Store categories(`PostgreSQL Query Store Runtime` & `PostgreSQL Query Store Wait Statistics`) and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
              "style": "error"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsQueryStoreRuntimeSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "No"
              }
            ],
            "name": "QSError2"
          },
          {
            "type": 1,
            "content": {
              "json": "### The PostgreSQL server logs data is not being transmitted to the log analytics workspace\r\nThe PostgreSQL server logs data is not being sent to the log analytics workspace, which is necessary to use this workbook. To configure the logging settings for category `PostgreSQL Server Logs` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "IsPostgreSQLLogsSentToLogAnalytics",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "PGLogsError"
          },
          {
            "type": 1,
            "content": {
              "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace\r\nThe PostgreSQL Sessions logs data is not being sent to the log analytics workspace, which is necessary to use this workbook. To configure the logging settings for category `PostgreSQL Sessions` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "PGSessionError"
          },
          {
            "type": 1,
            "content": {
              "json": "### The PostgreSQL metrics data is not being transmitted to the log analytics workspace\r\nThe PostgreSQL metrics data is not being sent to the log analytics workspace, which is necessary to use this workbook. To configure the logging settings for category `AllMetrics` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "IsAllMetricsSentToLogAnalytics",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "PGMetricsError - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "### Enhanced Metrics are currently disabled.\r\nThis workbook requires the use of enhanced metrics. To activate these metrics, simply enable the dynamic server parameter `metrics.collector_database_activity`.",
              "style": "error"
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isNotEqualTo",
              "value": "ON"
            },
            "name": "text - 57 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "### Query tracking through `log_min_duration_statement` is currently disabled\r\nTo enable query tracking, you can set an appropriate threshold for the `log_min_duration_statement` parameter through the Azure portal. This dynamic parameter determines the minimum duration of a query before it's logged in the PostgreSQL server logs. \r\n",
              "style": "error"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "IsLogMinDurationStatementEnabled",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "No"
              }
            ],
            "name": "text - 2"
          }
        ],
        "exportParameters": true
      },
      "name": "Errors"
    },
    {
      "type": 1,
      "content": {
        "json": "\r\n**Long running transactions found (Transactions > {LONG_RUNNING_QUERY_SEC_DURATION_THRESHOLD} Seconds)**\r\n\r\n",
        "style": "warning"
      },
      "conditionalVisibility": {
        "parameterName": "isQueryTimeHigh",
        "comparison": "isEqualTo",
        "value": "Yes"
      },
      "name": "text - 39 - Copy - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "### CPU Utilization"
      },
      "name": "text - cpu"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "x",
          "comparison": "isEqualTo",
          "value": "y"
        }
      ],
      "name": "text - 59"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbookda363094-1a87-4922-a088-e257cf971b6c",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 2419200000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Saturation-cpu_percent",
            "aggregation": 3,
            "splitBy": null
          }
        ],
        "title": "Maximum CPU Usage",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "name": "metric - 63"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Workload Details",
        "expandable": true,
        "expanded": true,
        "loadType": "explicit",
        "loadButtonText": "Show Read Write Workload Details",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "### The Enhanced Metrics are disabled on server. To obtain additional information, please refer to the error message located at the top of the workbook.\r\n",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isEqualTo",
              "value": "OFF"
            },
            "name": "text - 59"
          },
          {
            "type": 1,
            "content": {
              "json": "## Read workload details\r\n\r\n**Tup_fetched** and **Tup_returned** are two metrics that measure the number of rows read from a table by a PostgreSQL read workload.\r\n\r\nTup_fetched indicates the total number of live rows that have been fetched from a table using sequential scan and index entries returned by index scans in database, regardless of whether they are already in the cache or need to be read from disk. This metric provides insights into the overall data read using sequential scans.\r\n\r\nOn the other hand, tup_returned measures the number of live rows that are fetched by index scans in this database. This metric is incremented only when a row is actually comes form index scan, so it can provide insight into the efficiency of the query execution.\r\n\r\nBy monitoring these two metrics, administrators can gain a better understanding of the performance of their PostgreSQL read workloads.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isEqualTo",
              "value": "ON"
            },
            "name": "text - 62"
          },
          {
            "type": 10,
            "content": {
              "chartId": "workbook4dc9d840-2afc-4e9d-b0e6-bba4664c2631",
              "version": "MetricsItem/2.0",
              "size": 0,
              "chartType": 2,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "metricScope": 0,
              "resourceParameter": "Resource",
              "resourceIds": [
                "{Resource}"
              ],
              "timeContextFromParameter": "TimeRange",
              "timeContext": {
                "durationMs": 2419200000
              },
              "metrics": [
                {
                  "namespace": "microsoft.dbforpostgresql/flexibleservers",
                  "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
                  "aggregation": 1,
                  "splitBy": null
                },
                {
                  "namespace": "microsoft.dbforpostgresql/flexibleservers",
                  "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
                  "aggregation": 1
                }
              ],
              "title": "Read workload details",
              "showCreateAlertRule": true,
              "filters": [
                {
                  "id": "1",
                  "key": "DatabaseName",
                  "operator": 1,
                  "values": [
                    "azure_maintenance",
                    "azure_sys"
                  ]
                }
              ],
              "timeBrushParameterName": "TimeRange",
              "timeBrushExportOnlyWhenBrushed": true,
              "gridSettings": {
                "rowLimit": 10000
              }
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isEqualTo",
              "value": "ON"
            },
            "name": "metric - 64"
          },
          {
            "type": 1,
            "content": {
              "json": "**The read workload metric calculates the total number of tuples fetched and returned, but it does not include databases like `azure_sys` and `azure_maintenance`.**",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isEqualTo",
              "value": "ON"
            },
            "name": "text - 65"
          },
          {
            "type": 10,
            "content": {
              "chartId": "workbook7a7c3cb2-9d2d-45e7-a9bf-cb0db0f38dc9",
              "version": "MetricsItem/2.0",
              "size": 1,
              "chartType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "metricScope": 0,
              "resourceParameter": "Resource",
              "resourceIds": [
                "{Resource}"
              ],
              "timeContextFromParameter": "TimeRange",
              "timeContext": {
                "durationMs": 2419200000
              },
              "metrics": [
                {
                  "namespace": "microsoft.dbforpostgresql/flexibleservers",
                  "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
                  "aggregation": 1,
                  "splitBy": "DatabaseName",
                  "splitBySortOrder": -1,
                  "splitByLimit": 50
                },
                {
                  "namespace": "microsoft.dbforpostgresql/flexibleservers",
                  "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
                  "aggregation": 1,
                  "splitBy": "DatabaseName",
                  "splitBySortOrder": -1,
                  "splitByLimit": 50
                }
              ],
              "gridFormatType": 2,
              "filters": [
                {
                  "id": "1",
                  "key": "DatabaseName",
                  "operator": 1,
                  "values": [
                    "azure_maintenance",
                    "azure_sys"
                  ]
                }
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Subscription",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Name",
                    "formatter": 5,
                    "formatOptions": {
                      "linkTarget": "Resource"
                    }
                  },
                  {
                    "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched Timeline",
                    "formatter": 21,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned Timeline",
                    "formatter": 21,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": ".*\\/Tuples Returned (Preview)$",
                    "formatter": 1
                  },
                  {
                    "columnMatch": ".*\\/Tuples Fetched (Preview)$",
                    "formatter": 1
                  }
                ],
                "rowLimit": 10000,
                "labelSettings": [
                  {
                    "columnId": "Segment",
                    "label": "Database"
                  },
                  {
                    "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
                    "label": "Tuples Fetched (Sum)"
                  },
                  {
                    "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched Timeline",
                    "label": "Tuples Fetched (Sum) [Timeline]"
                  },
                  {
                    "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
                    "label": "Tuples Returned (Sum)"
                  },
                  {
                    "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned Timeline",
                    "label": "Tuples Returned (Sum) [Timeline]"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isEqualTo",
              "value": "ON"
            },
            "name": "metric - 66"
          },
          {
            "type": 1,
            "content": {
              "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "LessThanOneHourInterval",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "x",
                "comparison": "isEqualTo",
                "value": "y"
              }
            ],
            "name": "text - 67"
          },
          {
            "type": 1,
            "content": {
              "json": "## Write workload details \r\nThe number of tuples that have been inserted, updated, or deleted are critical for understanding the overall performance of the database and for identifying potential inefficiencies.\r\n\r\n**Tuples inserted** represents the number of rows that have been inserted into the database. This metric is particularly useful for monitoring the growth of the database and for assessing the effectiveness of bulk insert operations.\r\n\r\n**Tuples updated** measures the number of rows that have been updated in the database. This metric can help identify queries that are executing inefficiently or that are causing contention within the database.\r\n\r\n**Tuples deleted** represents the number of rows that have been deleted from the database. This metric can help identify queries that are causing excessive data churn or that are deleting more data than is necessary.\r\n\r\nBy monitoring these metrics, administrators can gain insights into the performance of their PostgreSQL write workloads and make data-driven decisions to optimize the database.\r\n\r\n",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isEqualTo",
              "value": "ON"
            },
            "name": "text - 68"
          },
          {
            "type": 10,
            "content": {
              "chartId": "workbook4f1a52ad-86d1-4a5a-83e7-7caef0b1658b",
              "version": "MetricsItem/2.0",
              "size": 0,
              "chartType": 2,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "metricScope": 0,
              "resourceParameter": "Resource",
              "resourceIds": [
                "{Resource}"
              ],
              "timeContextFromParameter": "TimeRange",
              "timeContext": {
                "durationMs": 2419200000
              },
              "metrics": [
                {
                  "namespace": "microsoft.dbforpostgresql/flexibleservers",
                  "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
                  "aggregation": 1,
                  "splitBy": null
                },
                {
                  "namespace": "microsoft.dbforpostgresql/flexibleservers",
                  "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
                  "aggregation": 1
                },
                {
                  "namespace": "microsoft.dbforpostgresql/flexibleservers",
                  "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
                  "aggregation": 1
                }
              ],
              "title": "Write Workload Metrics",
              "showCreateAlertRule": true,
              "filters": [
                {
                  "id": "1",
                  "key": "DatabaseName",
                  "operator": 1,
                  "values": [
                    "azure_maintenance",
                    "azure_sys"
                  ]
                }
              ],
              "timeBrushParameterName": "TimeRange",
              "timeBrushExportOnlyWhenBrushed": true,
              "gridSettings": {
                "rowLimit": 10000
              }
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isEqualTo",
              "value": "ON"
            },
            "name": "metric - 69"
          },
          {
            "type": 1,
            "content": {
              "json": "**The write workload metric calculates the total number of inserted, updated, and deleted tuples, but it does not include databases like `azure_sys` and `azure_maintenance`.**\r\n\r\n",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isEqualTo",
              "value": "ON"
            },
            "name": "text - 70"
          },
          {
            "type": 10,
            "content": {
              "chartId": "workbook840cc26a-4a5b-4641-9a39-c0186fc4b983",
              "version": "MetricsItem/2.0",
              "size": 1,
              "chartType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "metricScope": 0,
              "resourceParameter": "Resource",
              "resourceIds": [
                "{Resource}"
              ],
              "timeContextFromParameter": "TimeRange",
              "timeContext": {
                "durationMs": 2419200000
              },
              "metrics": [
                {
                  "namespace": "microsoft.dbforpostgresql/flexibleservers",
                  "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
                  "aggregation": 1,
                  "splitBy": "DatabaseName",
                  "splitBySortOrder": -1,
                  "splitByLimit": 50
                },
                {
                  "namespace": "microsoft.dbforpostgresql/flexibleservers",
                  "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
                  "aggregation": 1,
                  "splitBy": "DatabaseName",
                  "splitBySortOrder": -1,
                  "splitByLimit": 50
                },
                {
                  "namespace": "microsoft.dbforpostgresql/flexibleservers",
                  "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
                  "aggregation": 1,
                  "splitBy": "DatabaseName",
                  "splitBySortOrder": -1,
                  "splitByLimit": 50
                }
              ],
              "title": "Tuples Inserted, Updated & Deleted by Database",
              "gridFormatType": 2,
              "filters": [
                {
                  "id": "1",
                  "key": "DatabaseName",
                  "operator": 1,
                  "values": [
                    "azure_maintenance",
                    "azure_sys"
                  ]
                }
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Subscription",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Name",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted Timeline",
                    "formatter": 21,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated Timeline",
                    "formatter": 21,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 17,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted Timeline",
                    "formatter": 21,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  }
                ],
                "rowLimit": 10000,
                "labelSettings": [
                  {
                    "columnId": "Segment",
                    "label": "Database"
                  },
                  {
                    "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
                    "label": "Tuples Inserted (Sum)"
                  },
                  {
                    "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted Timeline",
                    "label": "Tuples Inserted  (Sum) [Timeline]"
                  },
                  {
                    "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
                    "label": "Tuples Updated  (Sum)"
                  },
                  {
                    "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated Timeline",
                    "label": "Tuples Updated  (Sum) [Timeline]"
                  },
                  {
                    "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
                    "label": "Tuples Deleted  (Sum)"
                  },
                  {
                    "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted Timeline",
                    "label": "Tuples Deleted  (Sum) [Timeline]"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "IsMetricsCollectorDatabaseActivityOn",
              "comparison": "isEqualTo",
              "value": "ON"
            },
            "name": "metric - 71"
          }
        ],
        "exportParameters": true
      },
      "name": "Read Write Workload Details"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Transaction Trends and Counts",
        "expandable": true,
        "expanded": true,
        "loadType": "explicit",
        "loadButtonText": "Show Transaction Trend and Count Details",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "cb78e5e9-2ef1-4f4c-832f-6ddc98ae5c6f",
                  "cellValue": "connection-tab-2",
                  "linkTarget": "parameter",
                  "linkLabel": "TransactionTrend ",
                  "subTarget": "TT",
                  "style": "link"
                },
                {
                  "id": "ce889247-43cd-4b4b-affb-b0753d5173ee",
                  "cellValue": "connection-tab-2",
                  "linkTarget": "parameter",
                  "linkLabel": "TransactionsPerSecond",
                  "subTarget": "TPS",
                  "style": "link"
                }
              ]
            },
            "name": "links - 21"
          },
          {
            "type": 1,
            "content": {
              "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "LessThanOneHourInterval",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "x",
                "comparison": "isEqualTo",
                "value": "y"
              }
            ],
            "name": "text - 59"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "### The server has disabled PostgreSQL metrics. For further information, please refer to the error message in the workbook.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "IsAllMetricsSentToLogAnalytics",
                    "comparison": "isEqualTo",
                    "value": "No"
                  },
                  "name": "text - 5"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let dt = {TimeRange:end};\r\nlet GlobalEndTime = iff(dt<now(), dt, now());\r\n\r\nlet GlobalStartTime= iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime(GlobalEndTime)-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start});\r\n\r\nlet Start_Time = todatetime(GlobalStartTime);\r\nlet End_Time = todatetime(GlobalEndTime);\r\n\r\nlet graph_grain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\n{MetricsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where MetricName == 'xact_total'\r\n| distinct Total,TimeGenerated\r\n//| summarize tps = sum(tolong(Total))/60 by bin(TimeGenerated,1m)\r\n| summarize total_xact = sum(tolong(Total)) by bin(TimeGenerated,1m)\r\n| extend tps = total_xact /60\r\n| make-series xact_per_second = max(tps) default = 0 on TimeGenerated from Start_Time to End_Time step graph_grain \r\n| render timechart",
                    "size": 0,
                    "aggregation": 2,
                    "title": "transaction_per_second",
                    "timeBrushParameterName": "TimeRange",
                    "timeBrushExportOnlyWhenBrushed": true,
                    "queryType": 0,
                    "resourceType": "microsoft.dbforpostgresql/flexibleservers",
                    "crossComponentResources": [
                      "{Resource}"
                    ],
                    "visualization": "timechart",
                    "chartSettings": {
                      "yAxis": [
                        "xact_per_second"
                      ]
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "IsAllMetricsSentToLogAnalytics",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "query - 1"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "### High Number Of Transactions Per Second ##\r\n\r\nIf you observe high TPS on the server consider:\r\n\r\n* Query Tuning : Consider tuning the queries which includes indexing, rewriting queries efficiently\r\n\r\n* Tune Parameters : consider server parameters like `work_mem`\r\n\r\n* Consider using connection pooling like use of pg bouncer.\r\n\r\n* Consider to scale to higher SKU.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "IsAllMetricsSentToLogAnalytics",
                    "comparison": "isEqualTo",
                    "value": "Yes"
                  },
                  "name": "text - 82"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "connection-tab-2",
              "comparison": "isEqualTo",
              "value": "TPS"
            },
            "name": "TransactionsPer Second"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "### The server has disabled enhanced metrics. For further information, please refer to the error message in the workbook.",
                    "style": "info"
                  },
                  "conditionalVisibility": {
                    "parameterName": "IsMetricsCollectorDatabaseActivityOn",
                    "comparison": "isEqualTo",
                    "value": "OFF"
                  },
                  "name": "text - 4"
                },
                {
                  "type": 10,
                  "content": {
                    "chartId": "workbookb2527b03-3e5b-4b92-9042-92b7c0628157",
                    "version": "MetricsItem/2.0",
                    "size": 0,
                    "chartType": 2,
                    "resourceType": "microsoft.dbforpostgresql/flexibleservers",
                    "metricScope": 0,
                    "resourceParameter": "Resource",
                    "resourceIds": [
                      "{Resource}"
                    ],
                    "timeContextFromParameter": "TimeRange",
                    "timeContext": {
                      "durationMs": 0
                    },
                    "metrics": [
                      {
                        "namespace": "microsoft.dbforpostgresql/flexibleservers",
                        "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-xact_commit",
                        "aggregation": 1,
                        "splitBy": null
                      },
                      {
                        "namespace": "microsoft.dbforpostgresql/flexibleservers",
                        "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-xact_rollback",
                        "aggregation": 1
                      }
                    ],
                    "title": "The trend of Transactions committed (xact_commit) vs Transactions rolled back (xact_rollback).",
                    "filters": [
                      {
                        "id": "1",
                        "key": "DatabaseName",
                        "operator": 1,
                        "values": [
                          "azure_maintenance",
                          "azure_sys"
                        ]
                      }
                    ],
                    "timeBrushParameterName": "TimeRange",
                    "timeBrushExportOnlyWhenBrushed": true,
                    "gridSettings": {
                      "rowLimit": 10000
                    }
                  },
                  "conditionalVisibility": {
                    "parameterName": "IsMetricsCollectorDatabaseActivityOn",
                    "comparison": "isEqualTo",
                    "value": "ON"
                  },
                  "name": "metric - 1"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "connection-tab-2",
              "comparison": "isEqualTo",
              "value": "TT"
            },
            "name": "Transaction Trend "
          }
        ],
        "exportParameters": true
      },
      "name": "Transaction Trend and Count"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "b01ad3ec-d7f4-4f48-877f-97b8e5df9dc3",
            "version": "KqlParameterItem/1.0",
            "name": "GlobalEndTime",
            "type": 1,
            "query": "// GlobalEndTime will always equal TimeRange:end\r\n// In the case which selected interval is less than an hour, \r\n// we set GlobalStartTime to be an hour before GlobalEndTime\r\n// in order to avoid showing data \"in the future\".\r\n//print iff(true, totimespan({TimeRange:end}), totimespan({TimeRange:end}))\r\n\r\nlet dt = {TimeRange:end};\r\nprint iff(dt<now(), dt, now())\r\n\r\n",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "96e3b87c-aab0-4016-bffd-f08e63a3010b",
            "version": "KqlParameterItem/1.0",
            "name": "GlobalStartTime",
            "type": 1,
            "query": "// GlobalEndTime will always equal TimeRange:end\r\n// In the case which selected interval is less than an hour, \r\n// we set GlobalStartTime to be an hour before GlobalEndTime\r\n// in order to avoid showing data \"in the future\".\r\n//print iff(true, totimespan({TimeRange:end}), totimespan({TimeRange:end}))\r\nprint iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime('{GlobalEndTime}')-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start})",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "0aac6a30-1f93-4b3c-9947-52f85e7bcff4",
            "version": "KqlParameterItem/1.0",
            "name": "LessThanOneHourInterval",
            "type": 1,
            "query": "let interval = 1h;\r\nprint iff({TimeRange:end} - {TimeRange:start} < interval, \"Yes\", \"No\")",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "755357db-831b-46e1-844c-c51398c70b76",
            "version": "KqlParameterItem/1.0",
            "name": "isQueryTimeHigh",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n| where State_s !='idle'\r\n| extend Connection_duration_sec = datetime_diff('second',todatetime(Collection_time_t),todatetime(Backend_start_t)), Query_duration_sec = datetime_diff('second',todatetime(Collection_time_t),todatetime(Query_start_t)), Transaction_duration_sec=datetime_diff('second',todatetime(Collection_time_t),todatetime(Xact_start_t))\r\n| summarize  Transaction_duration_sec=max(Transaction_duration_sec)\r\n| where Transaction_duration_sec > toint({LONG_RUNNING_QUERY_SEC_DURATION_THRESHOLD})\r\n| count\r\n| extend getquerytime = iff((Count) >= 1 , \"Yes\", \"No\")\r\n| project getquerytime",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "125f3e47-3f38-492e-bf74-d9686a928b04",
            "version": "KqlParameterItem/1.0",
            "name": "ChartGrain",
            "type": 1,
            "query": "let trange=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nprint case(\r\n    trange<1h, strcat(format_timespan(trange,'m'),' minute(s)'),\r\n    trange>=1h and trange<1d, strcat(format_timespan(trange,'H'),' hour(s)') ,\r\n    strcat(format_timespan(trange,'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "0daf8f52-1d24-456b-9d44-9ef438b843d8",
            "version": "KqlParameterItem/1.0",
            "name": "MetricsGrain",
            "type": 1,
            "query": "print case(\r\n    {TimeRange:grain}<1h, strcat(format_timespan({TimeRange:grain},'m'),' minute(s)'),\r\n    {TimeRange:grain}>=1h and {TimeRange:grain}<1d, strcat(format_timespan({TimeRange:grain},'H'),' hour(s)') ,\r\n    strcat(format_timespan({TimeRange:grain},'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "3c99b826-ed5f-47fb-91db-8ddbbe88e90c",
            "version": "KqlParameterItem/1.0",
            "name": "ChartGrainMin5",
            "type": 1,
            "query": "let trange=iff({TimeRange:grain}<5m,5m, {TimeRange:grain});\r\nprint case(\r\n    trange<1h, strcat(format_timespan(trange,'m'),' minute(s)'),\r\n    trange>=1h and trange<1d, strcat(format_timespan(trange,'H'),' hour(s)') ,\r\n    strcat(format_timespan(trange,'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "cb23b5a0-28ad-4513-841f-b00e47f28b11",
            "version": "KqlParameterItem/1.0",
            "name": "IsConnectionDataExists",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10\r\n| where isnotempty(Datid_d) and Database_name_s !in('template1','template0', 'azure_maintenance','azure_sys')\r\n| where State_s !=\"\"\r\n| limit 10\r\n| count\r\n| extend conndata = iff((Count) >= 1 , \"Yes\", \"No\")\r\n| project conndata",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "1c4ad1d0-e09b-447d-8ee2-1ec5a73960cb",
            "version": "KqlParameterItem/1.0",
            "name": "IsPostgreSQLServerLogsDataExists",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{PGServerLogsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category == \"PostgreSQLLogs\"\r\n| where Message contains \"disconnection\"\r\n| extend user=trim(@\" \",extract('user=(.+)database',1,Message))\r\n| where user !in ('azuresu','replication')\r\n|limit 5\r\n| count\r\n| extend logsdata = iff((Count) >= 1 , \"Yes\", \"No\")\r\n| project logsdata",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "7a94771a-69d8-46e4-addf-d827c156b109",
            "version": "KqlParameterItem/1.0",
            "name": "IsLogMinDurationDataExists",
            "type": 1,
            "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{PGServerLogsTable}\r\n| where Category == \"PostgreSQLLogs\"\r\n| where TimeGenerated >= TimeStart and TimeGenerated <= TimeEnd\r\n| where Message contains \"duration:\"\r\n| extend pregmatchall=extract_all(@'duration:(.+)ms.+statement:(.+)', Message)\r\n| extend duration_ms=toreal(pregmatchall[0][0])\r\n| extend statement=trim(@' ',tostring(pregmatchall[0][1]))\r\n| distinct statement,duration_ms,TimeGenerated\r\n| where statement!=\"\"\r\n| order by duration_ms desc\r\n|limit 5\r\n| summarize count(), WindowStart=min(TimeGenerated), WindowEnd=max(TimeGenerated), meanExecTime=avg(duration_ms), minExecTime=min(duration_ms),maxExecTime=max(duration_ms) by statement\r\n| count\r\n| extend logsdata = iff((Count) >= 1 , \"Yes\", \"No\")\r\n| project logsdata",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "parameters - 18 - Copy"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Long Running Transactions",
        "expandable": true,
        "expanded": true,
        "loadType": "explicit",
        "loadButtonText": "Show Long Running Transactions",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Resource}"
              ],
              "parameters": [
                {
                  "id": "4ca62ad2-ee86-498b-924c-86b92ba5a231",
                  "version": "KqlParameterItem/1.0",
                  "name": "existsLongRunningTransactionsData",
                  "type": 1,
                  "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10 and State_s !='idle' and Backend_type_s !='autovacuum worker'\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n|count\r\n|extend hasdata =iff(Count>0,'Yes','No')\r\n|project hasdata",
                  "crossComponentResources": [
                    "{Resource}"
                  ],
                  "isHiddenWhenLocked": true,
                  "queryType": 0,
                  "resourceType": "microsoft.dbforpostgresql/flexibleservers"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers"
            },
            "conditionalVisibility": {
              "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "parameters - 81"
          },
          {
            "type": 1,
            "content": {
              "json": "### No Long Running Transactions found in given Time Range",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "existsLongRunningTransactionsData",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "text - 82"
          },
          {
            "type": 1,
            "content": {
              "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace. Refer to error section at the top for more details.",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "text - 82 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace. Refer to error section at the top for more details.",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "No"
              }
            ],
            "name": "text - 82 - Copy - Copy"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
                  "version": "KqlParameterItem/1.0",
                  "name": "TopTransactions",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n { \"value\":\"10\", \"label\":\"10\",\"selected\":true },\r\n  { \"value\":\"20\", \"label\":\"20\" },\r\n    { \"value\":\"30\", \"label\":\"30\" },\r\n     { \"value\":\"40\", \"label\":\"40\" },\r\n  { \"value\":\"50\", \"label\":\"50\" }\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "label": "Number of Top PIDs"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "parameters - 40"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10 and State_s !='idle' and Backend_type_s !='autovacuum worker'\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n|  distinct TimeGenerated,Pid_d,Backend_start_t,Backend_type_s,State_s,Collection_time_t,Query_start_t,Xact_start_t\r\n| extend Connection_duration_sec = datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Backend_start_t)), Query_duration_ms = datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Query_start_t)),  Transaction_duration_ms=datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Xact_start_t))\r\n   | summarize Connection_duration_sec=max(Connection_duration_sec), Transaction_duration_ms=max(Transaction_duration_ms),  Query_duration_ms=max(Query_duration_ms),arg_max(TimeGenerated,lastState=State_s) by Pid_d,Backend_start_t, Backend_type_s\r\n   //| where Transaction_duration_ms> {MIN_SESSION_TIME_SEC_THRESHOLD_FOR_LONG_SESSIONS}\r\n  | order by Transaction_duration_ms desc, Pid_d asc\r\n  | limit {TopTransactions}",
              "size": 1,
              "aggregation": 2,
              "title": "Top {TopTransactions} PIDs by transaction duration. Blue - connection duration; Yellow - query duration; Green - transaction duration. The state shown in the tile is the last state from telemetry snapshot, historically the sate could have changed multiple times",
              "noDataMessage": "No PIDs data was found for the selected time range. Select a wider time range",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "visualization": "tiles",
              "gridSettings": {
                "sortBy": [
                  {
                    "itemKey": "Backend_type_s",
                    "sortOrder": 1
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "Backend_type_s",
                  "sortOrder": 1
                }
              ],
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "Pid_d",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false
                    }
                  }
                },
                "subtitleContent": {
                  "columnMatch": "lastState",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "Connection_duration_sec",
                  "formatter": 3,
                  "formatOptions": {
                    "palette": "blue"
                  },
                  "numberFormat": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false,
                      "maximumFractionDigits": 2
                    }
                  },
                  "tooltipFormat": {
                    "tooltip": "{1}"
                  }
                },
                "rightContent": {
                  "columnMatch": "Transaction_duration_ms",
                  "formatter": 3,
                  "formatOptions": {
                    "palette": "green"
                  },
                  "numberFormat": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    },
                    "emptyValCustomText": "Transaction Duration"
                  },
                  "tooltipFormat": {
                    "tooltip": "Transaction Duration"
                  }
                },
                "secondaryContent": {
                  "columnMatch": "Backend_type_s",
                  "formatter": 1
                },
                "showBorder": true,
                "sortCriteriaField": "Transaction_duration_ms",
                "sortOrderField": 2,
                "size": "auto"
              },
              "graphSettings": {
                "type": 0,
                "topContent": {
                  "columnMatch": "Session_duration",
                  "formatter": 1
                },
                "centerContent": {
                  "columnMatch": "Pid",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "chartSettings": {
                "showLegend": true,
                "xSettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                },
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 24,
                    "options": {
                      "style": "decimal",
                      "useGrouping": false
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - Long Running Transactions "
          },
          {
            "type": 1,
            "content": {
              "json": "## Stats on long running transactions\r\n\r\n**Note: In the workbook we consider any transaction which is running for more than {LONG_RUNNING_QUERY_SEC_DURATION_THRESHOLD} seconds as a long running transaction.** \r\n\r\nConsideration\r\n\r\n* Connection Duration **(blue)** - Duration of session or connection (collection_time-backend_start). You will notice higher value in case if you are using conneciton pool.\r\n\r\n* Transaction Duration **(green)** - Duration of transaction (collection_time-xact_start)\r\n\r\nLong running transactions is based out of pg_stat_activity view in postgresql. If you want to know more about these columns, please visit https://www.postgresql.org/docs/current/monitoring-stats.html#MONITORING-PG-STAT-ACTIVITY-VIEW\r\n\r\n",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "text - 30"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Resource}"
              ],
              "parameters": [
                {
                  "id": "e4b37b70-1891-4de7-b916-349a7ad5ae25",
                  "version": "KqlParameterItem/1.0",
                  "name": "SessionPid",
                  "label": "Show Snapshot of PID",
                  "type": 2,
                  "isRequired": true,
                  "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10 and State_s !='idle' and Backend_type_s !='autovacuum worker'\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n| extend Connection_duration_sec = datetime_diff('second',todatetime(Collection_time_t),todatetime(Backend_start_t)), Query_duration_ms = datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Query_start_t)),  Transaction_duration_ms=datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Xact_start_t))\r\n| summarize  Connection_duration_sec=max(Connection_duration_sec), Query_duration_ms=max(Query_duration_ms),Transaction_duration_ms=max(Transaction_duration_ms)  by Pid_d,Backend_start_t\r\n| order by Transaction_duration_ms desc, Pid_d asc\r\n| limit {TopTransactions}\r\n| extend uniquePidkeys=strcat(toint(Pid_d),'-',Backend_start_t)\r\n| project uniquePidkeys,Pid_d\r\n| serialize Rank = row_number()\r\n| project value = uniquePidkeys, label = strcat('🌐 ', toint(Pid_d)), selected = iff(Rank == 1, true, false)",
                  "crossComponentResources": [
                    "{Resource}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.dbforpostgresql/flexibleservers",
                  "value": "4568-2023-02-16T14:53:36.8972660Z"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "parameters - 41"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n|  distinct TimeGenerated,Pid_d,Backend_start_t,Backend_type_s,State_s,Collection_time_t,Query_start_t,Xact_start_t,State_change_t,Datid_d,Database_name_s,Usesysid_d,Client_addr_s\r\n| extend uniquePidkeys=strcat(toint(Pid_d),'-',Backend_start_t)\r\n| where uniquePidkeys =='{SessionPid}'\r\n| extend Transaction_Duration=iff(todatetime(Collection_time_t)-todatetime(Xact_start_t)<time(00:00:00.00),0, datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Xact_start_t)))\r\n| extend StateLastChanged_ms=iff(todatetime(Collection_time_t)-todatetime(State_change_t)<time(00:00:00.00),0, datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(State_change_t)))\r\n| extend Xact_duration_ms=iff(todatetime(Collection_time_t)-todatetime(Xact_start_t)<time(00:00:00.00), datetime_diff('millisecond',todatetime(Xact_start_t),todatetime(Collection_time_t)), datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Xact_start_t)))\r\n| extend Query_duration_ms=iff(todatetime(Collection_time_t)-todatetime(Query_start_t)<time(00:00:00.00),datetime_diff('millisecond',todatetime(Xact_start_t),todatetime(Collection_time_t)), datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Query_start_t)))\r\n| extend dummy_row=1\r\n| summarize max(Transaction_Duration), max(Query_duration_ms), max(Xact_duration_ms),sum(dummy_row)  by Pid_d,Backend_start_t, Datid_d, Database_name_s, Usesysid_d, Client_addr_s, Backend_type_s\r\n| project Pid_d,Backend_type_s, Datid_d, Database_name_s, Usesysid_d, Client_addr_s,Backend_start_t,TotalTransactionDuration=max_Transaction_Duration, LongestTransactionDuration=max_Xact_duration_ms,LongestQueryDuration=max_Query_duration_ms, SampledDatapointsCounter=sum_dummy_row",
              "size": 4,
              "title": "Summary as Of Time - {GlobalEndTime} UTC",
              "noDataMessage": "No PIDs data was found for the selected time range. Select a wider time range",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Backend_start",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "TotalConnectionDuration",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "LongestTransactionDuration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "LongestQueryDuration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  }
                ]
              },
              "sortBy": [],
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "Pid",
                  "formatter": 1
                },
                "subtitleContent": {
                  "columnMatch": "Backend_start",
                  "formatter": 6,
                  "dateFormat": {
                    "showUtcTime": null,
                    "formatName": "fullDateTimePattern"
                  }
                },
                "leftContent": {
                  "columnMatch": "Database_name",
                  "formatter": 1
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0,
                "topContent": {
                  "columnMatch": "Backend_start",
                  "formatter": 1
                },
                "centerContent": {
                  "columnMatch": "Pid",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 44"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n| distinct TimeGenerated, Pid_d, Backend_start_t,State_s\r\n    | extend uniquePidkeys=strcat(toint(Pid_d),'-',Backend_start_t)\r\n    | where uniquePidkeys =='{SessionPid}'\r\n| extend workingState=iff(State_s in ('active','idle','idle in transaction','idle in transaction (aborted)'),State_s,'Other')\r\n| summarize count() by State=workingState",
              "size": 4,
              "title": "Overall State of the PID for the period. Data is sampled each 5 minutes",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "visualization": "piechart",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Backend_start",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "TotalConnectionDuration",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "LongestTransactionDuration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "LongestQueryDuration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  }
                ]
              },
              "sortBy": [],
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "Pid",
                  "formatter": 1
                },
                "subtitleContent": {
                  "columnMatch": "Backend_start",
                  "formatter": 6,
                  "dateFormat": {
                    "showUtcTime": null,
                    "formatName": "fullDateTimePattern"
                  }
                },
                "leftContent": {
                  "columnMatch": "Database_name",
                  "formatter": 1
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0,
                "topContent": {
                  "columnMatch": "Backend_start",
                  "formatter": 1
                },
                "centerContent": {
                  "columnMatch": "Pid",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "chartSettings": {
                "showLegend": true
              }
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 44 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n| distinct TimeGenerated, Pid_d, Backend_start_t,State_s,Wait_event_type_s,Wait_event_s\r\n    | extend uniquePidkeys=strcat(toint(Pid_d),'-',Backend_start_t)\r\n    | where uniquePidkeys =='{SessionPid}'\r\n|  summarize count() by Wait_event_type_s,Wait_event_s\r\n|project iff(isempty(Wait_event_type_s),'No Waits',strcat(Wait_event_type_s,':',Wait_event_s)),count_",
              "size": 4,
              "title": "Overall wait events of the PID for the period. Data is sampled each 5 minutes",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "visualization": "piechart",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Backend_start",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "TotalConnectionDuration",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "LongestTransactionDuration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "LongestQueryDuration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  }
                ]
              },
              "sortBy": [],
              "tileSettings": {
                "titleContent": {
                  "columnMatch": "Pid",
                  "formatter": 1
                },
                "subtitleContent": {
                  "columnMatch": "Backend_start",
                  "formatter": 6,
                  "dateFormat": {
                    "showUtcTime": null,
                    "formatName": "fullDateTimePattern"
                  }
                },
                "leftContent": {
                  "columnMatch": "Database_name",
                  "formatter": 1
                },
                "showBorder": false
              },
              "graphSettings": {
                "type": 0,
                "topContent": {
                  "columnMatch": "Backend_start",
                  "formatter": 1
                },
                "centerContent": {
                  "columnMatch": "Pid",
                  "formatter": 1,
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "chartSettings": {
                "showLegend": true
              }
            },
            "customWidth": "50",
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 44 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": " \r\nlet Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n| distinct TimeGenerated,Pid_d, Collection_time_t, Application_name_s , State_s, Wait_event_type_s , Wait_event_s , Backend_xid_d , Backend_xmin_d,Backend_start_t,State_change_t,Xact_start_t,Query_start_t\r\n    | extend uniquePidkeys=strcat(toint(Pid_d),'-',Backend_start_t)\r\n    | where uniquePidkeys =='{SessionPid}'\r\n| extend Connection_Duration=iff(todatetime(Collection_time_t)-todatetime(Backend_start_t)<time(00:00:00.00),datetime_diff('second',todatetime(Backend_start_t),todatetime(Collection_time_t)), datetime_diff('second',todatetime(Collection_time_t),todatetime(Backend_start_t)))\r\n| extend StateLastChanged_ms=iff(todatetime(Collection_time_t)-todatetime(State_change_t)<time(00:00:00.00),datetime_diff('millisecond',todatetime(State_change_t),todatetime(Collection_time_t)), datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(State_change_t)))\r\n| extend Xact_duration_ms=iff(todatetime(Collection_time_t)-todatetime(Xact_start_t)<time(00:00:00.00),datetime_diff('millisecond',todatetime(Xact_start_t),todatetime(Collection_time_t)), datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Xact_start_t)))\r\n| extend Query_duration_ms=iff(todatetime(Collection_time_t)-todatetime(Query_start_t)<time(00:00:00.00),datetime_diff('millisecond',todatetime(Query_start_t),todatetime(Collection_time_t)), datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Query_start_t)))\r\n| order by Connection_Duration asc \r\n| serialize \r\n| extend rn=row_number()\r\n| extend prev_Application=(prev(Application_name_s,1))\r\n| extend prev_State=(prev(State_s,1))\r\n| extend prev_Waitevtype=(prev(Wait_event_type_s,1))\r\n| extend prev_Waitev=(prev(Wait_event_s,1))\r\n| extend prev_xid=(prev(Backend_xid_d,1))\r\n| extend prev_xmin=(prev(Backend_xmin_d,1))\r\n| extend isApp_change=iff( rn>1 and Application_name_s != prev_Application,1,0)\r\n| extend isState_change=iff( rn>1 and State_s != prev_State,1,0)\r\n| extend isWaitevtype_change=iff( rn>1 and Wait_event_type_s != prev_Waitevtype,1,0)\r\n| extend isWaitev_change=iff( rn>1 and Wait_event_s != prev_Waitev,1,0)\r\n| extend isxid_change=iff( rn>1 and Backend_xid_d != prev_xid,1,0)\r\n| extend isxmin_change=iff( rn>1 and Backend_xmin_d != prev_xmin,1,0)\r\n| extend breakPoint=iff (isApp_change>0 or isState_change>0 or isWaitevtype_change>0 or isWaitev_change>0 or isxid_change>0 or isxmin_change>0, 0, rn)\r\n| project Collection_time_t,Pid_d,Application_name_s,Connection_Duration, State_s, prev_State, Wait_event_s, prev_Waitev, Wait_event_type_s, prev_Waitevtype, rn, breakPoint,Backend_xid_d , Backend_xmin_d,Xact_duration_ms,StateLastChanged_ms\r\n| scan with_match_id=change_id declare (TheRank: long) with \r\n(\r\n    step buildRank: true => TheRank = iff(isnull(buildRank.TheRank), rn, buildRank.TheRank);\r\n    step endRank output=none: breakPoint==0;\r\n)\r\n| summarize min(Connection_Duration),max(Connection_Duration),min(Collection_time_t),max(Collection_time_t), SampledCounter=count(), max(Xact_duration_ms), avg(Xact_duration_ms), max(StateLastChanged_ms)  by change_id, Application_name_s, State_s,Wait_event_s,Wait_event_type_s,Pid_d, Backend_xid_d , Backend_xmin_d\r\n| extend WaitEvent=iff(isempty(Wait_event_type_s),'No Waits',strcat(Wait_event_type_s,':',Wait_event_s))\r\n| project  Pid_d, FromTime=min_Collection_time_t, ToTime=max_Collection_time_t, \r\nFromConnectionStart=min_Connection_Duration,//, EndFromConnectionStart=max_Connection_Duration, \r\nApplication_name_s, State_s,WaitEvent,Backend_xid_d, Backend_xmin_d,MaxTransactionTime=max_Xact_duration_ms,AvgTransactionTime=iff(isnan(avg_Xact_duration_ms ),'',tostring(toint(avg_Xact_duration_ms))),//MaxLastStateChanged=max_StateLastChanged_ms\r\n SampledCounter",
              "size": 0,
              "title": "Full history of the PID for the selected TimeRange",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "FromTime",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "ToTime",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "FromConnectionStart",
                    "formatter": 19,
                    "formatOptions": {
                      "palette": "blue",
                      "timelineSettings": {
                        "timelineStartColumn": "FromConnectionStart"
                      }
                    },
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "MaxTransactionTime",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "AvgTransactionTime",
                    "formatter": 1,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "FromConnectionDuration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "ToConnectionDuration",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 24,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "Backend_start",
                    "formatter": 6
                  }
                ],
                "rowLimit": 10000
              },
              "sortBy": []
            },
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 44 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "**Recommendations**\r\n\r\n* As a long term approach consider tuning queries identified from the above PIDs using explain analyze.\r\nMore information on EXPLAIN command can be found here https://www.postgresql.org/docs/14/sql-explain.html\r\n\r\n\r\n* As a short term option you can terminate or cancel the sessions by executing below commands:\r\n\r\nFrom the PIDs retrieved above execute the below query on the server to terminate the session:\r\n\r\n\tSELECT pg_terminate_backend(<pid>);\r\n\r\nYou could also cancel the running queries by executing the below query:\r\n\r\n\tSelect pg_cancel_backend(<pid>); \r\n\r\n* Sessions that run for a prolonged period of time can use up a significant amount of memory. Therefore, it is recommended to configure the server parameters such as `statement_timeout` (in PG14, `idle_session_timeout`) or `idle_in_transaction_session_timeout` to terminate such long running sessions. This will prevent unnecessary consumption of system resources and help maintain server performance.",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "existsLongRunningTransactionsData",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "text - 22"
          }
        ],
        "exportParameters": true
      },
      "name": "Long Running Transactions"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "High Time Consuming Queries",
        "expandable": true,
        "expanded": true,
        "loadType": "explicit",
        "loadButtonText": "Show  High Time Consuming Queries Details",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Resource}"
              ],
              "parameters": [
                {
                  "id": "ee40db88-5b2a-4f5b-8156-1136c175b875",
                  "version": "KqlParameterItem/1.0",
                  "name": "HighCPUQueries",
                  "type": 1,
                  "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10 // exclude azure super user \r\n //| summarize max(Mean_time_d) by Queryid_d\r\n| count\r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
                  "crossComponentResources": [
                    "{Resource}"
                  ],
                  "isHiddenWhenLocked": true,
                  "queryType": 0,
                  "resourceType": "microsoft.dbforpostgresql/flexibleservers"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers"
            },
            "conditionalVisibility": {
              "parameterName": "isQueryStoreEnabled",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "parameters - 71"
          },
          {
            "type": 1,
            "content": {
              "json": "### Query Store is disabled. Please refer the error section at the top for more information",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "isQueryStoreEnabled",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "text - 20 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "### Query Store has no data in the selected Time Range.",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "text - 20"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
                  "version": "KqlParameterItem/1.0",
                  "name": "TopTimeConsumingQueries",
                  "label": "Max Count",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "parameters - 49"
          },
          {
            "type": 1,
            "content": {
              "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
              "style": "warning"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "LessThanOneHourInterval",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "text - 59"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "cb78e5e9-2ef1-4f4c-832f-6ddc98ae5c6f",
                  "cellValue": "connection-tab-3",
                  "linkTarget": "parameter",
                  "linkLabel": "TopSlowQueriesByMeanTime",
                  "subTarget": "TT",
                  "style": "link"
                },
                {
                  "id": "ce889247-43cd-4b4b-affb-b0753d5173ee",
                  "cellValue": "connection-tab-3",
                  "linkTarget": "parameter",
                  "linkLabel": "TopQueriesByCalls ",
                  "subTarget": "TPS",
                  "style": "link"
                }
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "links - 21"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_time_d) by Queryid_d\r\n| top {TopTimeConsumingQueries} by max_Mean_time_d desc\r\n| project Queryid_d;\r\n{QueryStoreTable} \r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10 // exclude azure super user \r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd             \r\n | where Queryid_d in (TopQueryIDs)\r\n |distinct End_time_t,Mean_time_d,Queryid_d\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), 1m)\r\n//| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), graphgrain)\r\n| make-series maxiotime=max(Mean_time_d) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid_d=strcat('QueryId ',tolong(Queryid_d))\r\n",
              "size": 0,
              "aggregation": 2,
              "title": "Top {TopTimeConsumingQueries} slow queries from Query Store. Data is plotted at a granularity of {ChartGrain}",
              "noDataMessage": "No data found during the window selected",
              "noDataMessageStyle": 4,
              "timeBrushParameterName": "TimeRange",
              "timeBrushExportOnlyWhenBrushed": true,
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "visualization": "areachart",
              "chartSettings": {
                "showLegend": true,
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 23,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TT"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 18 - Copy - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "**Shown above are the top {TopTimeConsumingQueries} memory consuming queries by mean time for the selected timerange. ** \r\n\r\nThese queries have the largest Mean_time_d in the selected timerange\r\n\r\n*Non performant queries or queries that take time to complete might be the ones which consume CPU. Details on these QueryIds are shown below.*",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TT"
              },
              {
                "parameterName": "HighTimeQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "text - 25"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Calls_d) by Queryid_d\r\n| top {TopTimeConsumingQueries} by max_Calls_d desc\r\n| project Queryid_d;\r\n{QueryStoreTable} \r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10 // exclude azure super user \r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd             \r\n | where Queryid_d in (TopQueryIDs)\r\n |distinct End_time_t,Calls_d,Queryid_d\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), graphgrain)\r\n//| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), graphgrain)\r\n| make-series maxiotime=sum(Calls_d) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid_d=strcat('QueryId ',tolong(Queryid_d))\r\n",
              "size": 0,
              "title": "Top {TopTimeConsumingQueries} Queries by Calls. Data is plotted at a granularity of {ChartGrain}",
              "noDataMessage": "No data found during the window selected",
              "noDataMessageStyle": 4,
              "timeContextFromParameter": "TimeRange",
              "timeBrushParameterName": "TimeRange",
              "timeBrushExportOnlyWhenBrushed": true,
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "visualization": "areachart",
              "chartSettings": {
                "showLegend": true
              }
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TPS"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 19"
          },
          {
            "type": 1,
            "content": {
              "json": "**Shown above are the top {TopTimeConsumingQueries} memory consuming queries by number of calls for the selected timerange. ** \r\n\r\nThese queries have the largest calls in the selected timerange\r\n\r\n*Non performant queries or queries that take time to complete might be the ones which consume CPU. Details on these QueryIds are shown below.*",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighTimeQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TPS"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "text - 25 - Copy"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Resource}"
              ],
              "parameters": [
                {
                  "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueryIdsByTime",
                  "label": "QueryId Snapshot",
                  "type": 2,
                  "isRequired": true,
                  "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_time_d) by Queryid_d\r\n| top {TopTimeConsumingQueries} by max_Mean_time_d desc\r\n| project Queryid_d\r\n| serialize Rank = row_number()\r\n| project value = Queryid_d, label = Queryid_d, selected = iff(Rank == 1, true, false)",
                  "crossComponentResources": [
                    "{Resource}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.dbforpostgresql/flexibleservers"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TT"
              },
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "parameters - 40"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Resource}"
              ],
              "parameters": [
                {
                  "id": "a6fd4d67-8fe0-4d80-a680-a7aadf93d2ed",
                  "version": "KqlParameterItem/1.0",
                  "name": "QueryIdsbyCalls",
                  "label": "QueryId Snapshot",
                  "type": 2,
                  "isRequired": true,
                  "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Calls_d) by Queryid_d \r\n    | top {TopTimeConsumingQueries} by max_Calls_d desc\r\n| project Queryid_d\r\n| serialize Rank = row_number()\r\n| project value = Queryid_d, label = Queryid_d, selected = iff(Rank == 1, true, false)",
                  "crossComponentResources": [
                    "{Resource}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.dbforpostgresql/flexibleservers"
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TPS"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "parameters - 40 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| where Queryid_d == {QueryIdsByTime}\r\n| distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s \r\n| summarize AvgExecutionTime=avg(Mean_time_d),MaxExecutionTime=max(Max_time_d), MinExecutionTime=min(Min_time_d), TotalCalls=sum(Calls_d) by Queryid_d,Query_type_s\r\n\r\n",
              "size": 4,
              "title": "QueryID {QueryIdsByTime} summary in selected TimeRange",
              "noDataMessage": "No data available during the period selected",
              "noDataMessageStyle": 4,
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Queryid",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "Query_type",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "AvgExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "MaxExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "MinExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "Calls",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "green"
                    }
                  }
                ]
              },
              "sortBy": []
            },
            "conditionalVisibilities": [
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TT"
              },
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 33"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| where Queryid_d == {QueryIdsbyCalls}\r\n| distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s\r\n| summarize AvgExecutionTime=avg(Mean_time_d),MaxExecutionTime=max(Max_time_d), MinExecutionTime=min(Min_time_d), TotalCalls=sum(Calls_d) by Queryid_d,Query_type_s\r\n",
              "size": 4,
              "title": "QueryID {QueryIdsbyCalls} summary in selected TimeRange",
              "noDataMessage": "No data available during the period selected",
              "noDataMessageStyle": 4,
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Queryid",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "Query_type",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "AvgExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "MaxExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "MinExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "Calls",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "green"
                    }
                  }
                ]
              },
              "sortBy": []
            },
            "conditionalVisibilities": [
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TPS"
              },
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 33 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n    | where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n    | where Userid_d != 10 // exclude azure super user \r\n    | where Queryid_d == {QueryIdsByTime}\r\n    | distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Rows_d,Total_time_d,Start_time_t,End_time_t,Plan_id_d,Dbid_d,Userid_d \r\n     | summarize WindowStart=min(Start_time_t), WindowEnd=max(End_time_t),MeanRows=sum(Rows_d)/sum(Calls_d),MeanExecutionTime=avg(Mean_time_d),MinExecutionTime=min(Min_time_d),MaxExecutionTime=max(Max_time_d),TotalCalls=sum(Calls_d),TotalExecutionTime=sum(Total_time_d),TotalRows=sum(Rows_d) by bin(todatetime(End_time_t), graphgrain),Queryid_d,Plan_id_d,Dbid_d,Userid_d    \r\n |order by WindowStart asc\r\n\r\n\r\n",
              "size": 1,
              "title": "QueryID {QueryIdsByTime} runtime statistics split by time buckets of {ChartGrain} each",
              "noDataMessage": "No data available during the period selected",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "End_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Queryid",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "Dbid",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "WindowStart",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "WindowEnd",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "MeanRows",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": "MeanExecutionTime",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    },
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "Calls",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": "MinExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "MaxExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "TotalExecutionTime",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    },
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "Start_time",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "Total_time",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    },
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "Mean_time",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": "Query_type",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "PreciseTimeStamp",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "Min_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Max_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Stddev_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Shared_blks_hit",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Shared_blks_read",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Shared_blks_dirtied",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Shared_blks_written",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Local_blks_hit",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Local_blks_read",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Local_blks_dirtied",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Local_blks_written",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Temp_blks_read",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Temp_blks_written",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Blk_read_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Blk_write_time",
                    "formatter": 5
                  }
                ],
                "rowLimit": 500
              },
              "sortBy": []
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TT"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 33 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n    | where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n    | where Userid_d != 10 // exclude azure super user \r\n    | where Queryid_d == {QueryIdsbyCalls}\r\n    | distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Rows_d,Total_time_d,Start_time_t,End_time_t,Plan_id_d,Dbid_d,Userid_d\r\n     | summarize WindowStart=min(Start_time_t), WindowEnd=max(End_time_t),MeanRows=sum(Rows_d)/sum(Calls_d),MeanExecutionTime=avg(Mean_time_d),MinExecutionTime=min(Min_time_d),MaxExecutionTime=max(Max_time_d),TotalCalls=sum(Calls_d),TotalExecutionTime=sum(Total_time_d),TotalRows=sum(Rows_d) by bin(todatetime(End_time_t), graphgrain),Queryid_d,Plan_id_d,Dbid_d,Userid_d    \r\n |order by WindowStart asc\r\n\r\n\r\n",
              "size": 0,
              "title": "QueryID {QueryIdsbyCalls} runtime statistics split by time buckets of {ChartGrain} each",
              "noDataMessage": "No data available during the period selected",
              "noDataMessageStyle": 4,
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "End_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Queryid",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "Dbid",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "Userid",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "WindowStart",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "WindowEnd",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "Rows",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": "MeanExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "MinExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "MaxExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "Calls",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": "TotalExecutionTime",
                    "formatter": 0,
                    "numberFormat": {
                      "unit": 23,
                      "options": {
                        "style": "decimal"
                      }
                    }
                  },
                  {
                    "columnMatch": "Start_time",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "Query_type",
                    "formatter": 1
                  },
                  {
                    "columnMatch": "Total_time",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": "Mean_time",
                    "formatter": 8,
                    "formatOptions": {
                      "palette": "blue"
                    }
                  },
                  {
                    "columnMatch": "PreciseTimeStamp",
                    "formatter": 6
                  },
                  {
                    "columnMatch": "Min_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Max_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Stddev_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Shared_blks_hit",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Shared_blks_read",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Shared_blks_dirtied",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Shared_blks_written",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Local_blks_hit",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Local_blks_read",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Local_blks_dirtied",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Local_blks_written",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Temp_blks_read",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Temp_blks_written",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Blk_read_time",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "Blk_write_time",
                    "formatter": 5
                  }
                ],
                "rowLimit": 5000,
                "labelSettings": [
                  {
                    "columnId": "End_time_t",
                    "label": "End Time"
                  },
                  {
                    "columnId": "Queryid_d",
                    "label": "Query Id"
                  },
                  {
                    "columnId": "Plan_id_d",
                    "label": "Plan Id"
                  },
                  {
                    "columnId": "Dbid_d",
                    "label": "Db Id"
                  },
                  {
                    "columnId": "Userid_d",
                    "label": "User Id"
                  }
                ]
              },
              "sortBy": []
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TPS"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 33 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "**How can you retrieve the Query Text for a specific Query ID?**\r\n\r\nTo retrieve the Query Text for a specific Query ID, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the Query ID.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the query text for a given Query ID, use the following SQL:**",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "text - 25 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\nAzureDiagnostics\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_time_d) by Queryid_d\r\n| top {TopTimeConsumingQueries} by max_Mean_time_d desc\r\n    | extend GetQueryText = strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",tolong(Queryid_d),\";\")\r\n    | project GetQueryText",
              "size": 1,
              "title": "Get query_text from QueryId",
              "noDataMessage": "No data available during the period selected",
              "noDataMessageStyle": 4,
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "sortBy": []
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TT"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 33 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\nAzureDiagnostics\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Calls_d) by Queryid_d\r\n| top {TopTimeConsumingQueries} by max_Calls_d desc\r\n    | extend GetQueryText = strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",tolong(Queryid_d),\";\")\r\n    | project GetQueryText",
              "size": 1,
              "title": "Get query_text from QueryId",
              "noDataMessage": "No data available during the period selected",
              "noDataMessageStyle": 4,
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ],
              "sortBy": []
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "connection-tab-3",
                "comparison": "isEqualTo",
                "value": "TPS"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 33 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "**General Query Recommendations To Tune High Time Consuming Queries**\r\n\r\n1) Tune queries identified above using explain analyze. More information on EXPLAIN command [can be found here](https://www.postgresql.org/docs/current/sql-explain.html). \r\n\r\n2) High bloat on the tables can also lead to considerable IO & CPU usage.As a one off case consider carrying manual vacuum analyze of the tables used in the slow running queries using the below command on the database\r\n\r\nVacuum (analyze,verbose) <Table Name> \r\n\r\n3) Indexes & Joins : Consider creating indexes and reduce the joins in the query if applicable.\r\n\r\n4) Consider tuning server parameters like `work_mem`, `max_parallel_workers_per_gather`. Please make the changes with caution and testing as setting a very high value of both parameters could lead to out of memory issues.\r\n\r\n5)Table design needs to considered\r\n\t* Large tables can be partitioned\r\n\t* Remove unneccesary contraints\r\n\t* Have indexes on foreign keys in child tables\r\n\t* If possible consider to denormalize the tables.\r\n\t* Disable triggers during large dataloads as triggers on tables affect especially during writes\r\n\t  on the server",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "isQueryStoreEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "HighCPUQueries",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "text - 24"
          },
          {
            "type": 1,
            "content": {
              "json": "### The Query Store's capabilities are not functioning on the replica server.\r\n#### After analysis, we have determined that this server is a replica server, which means that the query store functionality is not available. However, there are alternative methods you can use to monitor long-running sessions on the replica server.\r\n- ##### To help pinpoint possible performance issues, a recommended solution is to adjust the `log_min_duration_statement` parameter to the desired threshold and properly configure `log_line_prefix` to include the relevant details such as **%t-%c user=%u,db=%d,app=%a,client=%h**. This will enable the logging of slow queries in the PostgreSQL logs. By doing so, you can easily access the top queries and review the slow queries that may require optimization.\r\n- ##### Another option is to configure `pg_stat_statements`, which allows you to view information about your query performance on the replica server. However, Please keep in mind that you need to execute the `CREATE EXTENSION pg_stat_statements` command on the primary server database. For more informaiton, please visit [PostgreSQL Documentation](https://www.postgresql.org/docs/current/pgstatstatements.html).\r\n- ##### You can also monitor the ongoing workload on the replica server by using the `pg_stat_activity` catalog view.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "IsServerPrimaryCheck",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "text - 19"
          }
        ],
        "exportParameters": true
      },
      "name": "High Time Consuming Queries"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Top Queries by Duraiton from PostgreSQL Logs",
        "expandable": true,
        "expanded": true,
        "loadType": "explicit",
        "loadButtonText": "Show Top Queries by Duraiton from PostgreSQL Logs",
        "items": [
          {
            "type": 1,
            "content": {
              "json": ""
            },
            "name": "text - 3"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "01b074e9-75d8-473e-8013-865e55834d67",
                  "version": "KqlParameterItem/1.0",
                  "name": "MaxCount",
                  "label": " Max Count",
                  "type": 2,
                  "isRequired": true,
                  "typeSettings": {
                    "additionalResourceOptions": [],
                    "showDefault": false
                  },
                  "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" },\r\n\t{ \"value\":\"30\", \"label\":\"30\" },\r\n\t{ \"value\":\"40\", \"label\":\"40\" },\r\n\t{ \"value\":\"50\", \"label\":\"50\" }\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "pills",
              "queryType": 8
            },
            "conditionalVisibilities": [
              {
                "parameterName": "IsLogMinDurationStatementEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "IsLogMinDurationDataExists",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "parameters - 5"
          },
          {
            "type": 1,
            "content": {
              "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace. Refer to error section at the top for more details.",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "IsPostgreSQLLogsSentToLogAnalytics",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "text - 2 - Copy - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "### The `log_min_duration_statement` parameter has not tracked any queries within the selected time range or PostgreSQL server logs is not being transmitted to the log analytics workspace.\r\n\r\nIf `log_min_duration_statement` is inactive, queries that take less time to execute than the threshold will not be logged in the Postgres logs. To ensure that all queries are logged, set an appropriate threshold for `log_min_duration_statement` through the Azure portal.\r\n\r\n",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "IsLogMinDurationDataExists",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "IsLogLinePrefixSame",
                "comparison": "isEqualTo",
                "value": "No"
              }
            ],
            "name": "text - 2 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "### The `log_min_duration_statement` parameter has not tracked any queries within the selected time range or PostgreSQL server logs is not being transmitted to the log analytics workspace.\r\n\r\nIf `log_min_duration_statement` is inactive, queries that take less time to execute than the threshold will not be logged in the Postgres logs. To ensure that all queries are logged, set an appropriate threshold for `log_min_duration_statement` through the Azure portal.\r\n\r\n",
              "style": "info"
            },
            "conditionalVisibilities": [
              {
                "parameterName": "IsLogMinDurationStatementFilterDataExists",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "IsLogLinePrefixSame",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "text - 2 - Copy - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "### The `log_line_prefix` parameter is not set as per our instructions.\r\n\r\nOur instructions require the `log_line_prefix` parameter to be properly configured. If this parameter is not set correctly, we may encounter difficulties in filtering system queries and organizing queries by client, application, user, and database.\r\n\r\nPlease set the **log_line_prefix=%t-%c user=%u,db=%d,app=%a,client=%h** using Azure portal.\r\n\r\n",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "IsLogLinePrefixSame",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "text - 2 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{PGServerLogsTable}\r\n| where Category == \"PostgreSQLLogs\"\r\n| where TimeGenerated >= TimeStart and TimeGenerated <= TimeEnd\r\n| where Message contains \"duration:\"\r\n| extend pregmatchall=extract_all(@'duration:(.+)ms.+statement:(.+)', Message)\r\n| extend duration_ms=toreal(pregmatchall[0][0])\r\n| extend statement=trim(@' ',tostring(pregmatchall[0][1]))\r\n| distinct statement,duration_ms,TimeGenerated\r\n| where statement!=\"\"\r\n| order by duration_ms desc\r\n| summarize count(), WindowStart=min(TimeGenerated), WindowEnd=max(TimeGenerated), meanExecTime=avg(duration_ms), minExecTime=min(duration_ms),maxExecTime=max(duration_ms) by statement\r\n| order by meanExecTime desc\r\n| limit {MaxCount}",
              "size": 0,
              "title": "Top {MaxCount} Quries by Duration",
              "queryType": 0,
              "resourceType": "microsoft.dbforpostgresql/flexibleservers",
              "crossComponentResources": [
                "{Resource}"
              ]
            },
            "conditionalVisibilities": [
              {
                "parameterName": "IsServerPrimaryCheck",
                "comparison": "isEqualTo",
                "value": "No"
              },
              {
                "parameterName": "IsLogMinDurationStatementEnabled",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsLogMinDurationDataExists",
                "comparison": "isEqualTo",
                "value": "Yes"
              },
              {
                "parameterName": "IsPostgreSQLLogsSentToLogAnalytics",
                "comparison": "isEqualTo",
                "value": "Yes"
              }
            ],
            "name": "query - 4"
          }
        ],
        "exportParameters": true
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "QueriesFromPGLogs",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Total User Only Connections",
        "expandable": true,
        "expanded": true,
        "loadType": "explicit",
        "loadButtonText": "Show Total User Only Connections Details",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "ce889247-43cd-4b4b-affb-b0753d5173ee",
                  "cellValue": "connection-tab",
                  "linkTarget": "parameter",
                  "linkLabel": "ConnectionByState",
                  "subTarget": "connectionstate",
                  "style": "link"
                },
                {
                  "id": "cb78e5e9-2ef1-4f4c-832f-6ddc98ae5c6f",
                  "cellValue": "connection-tab",
                  "linkTarget": "parameter",
                  "linkLabel": "ConnectionsByDuration",
                  "subTarget": "connectionsduration",
                  "style": "link"
                }
              ]
            },
            "name": "links - 21"
          },
          {
            "type": 1,
            "content": {
              "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
              "style": "warning"
            },
            "conditionalVisibility": {
              "parameterName": "LessThanOneHourInterval",
              "comparison": "isEqualTo",
              "value": "Yes"
            },
            "name": "text - 59"
          },
          {
            "type": 1,
            "content": {
              "json": "### There is no connecitons data found in given Time Range",
              "style": "info"
            },
            "conditionalVisibility": {
              "parameterName": "IsConnectionDataExists",
              "comparison": "isEqualTo",
              "value": "No"
            },
            "name": "text - 5"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace. Refer to error section at the top for more details.",
                    "style": "info"
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                      "comparison": "isEqualTo",
                      "value": "No"
                    },
                    {
                      "parameterName": "IsServerPrimaryCheck",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    }
                  ],
                  "name": "text - 4"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace. Refer to error section at the top for more details.",
                    "style": "info"
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                      "comparison": "isEqualTo",
                      "value": "No"
                    },
                    {
                      "parameterName": "IsServerPrimaryCheck",
                      "comparison": "isEqualTo",
                      "value": "No"
                    }
                  ],
                  "name": "text - 4 - Copy"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "This chart shows the count of short connections (less than 1 second), normal connections (between 1 second and 20 minutes), and long connections (greater than 20 minutes), which were calculated using disconnection messages extracted from PostgreSQL logs.",
                    "style": "info"
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "IsPostgreSQLServerLogsDataExists",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    },
                    {
                      "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    }
                  ],
                  "name": "text - 1"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "### During the specified time range, no messages were identified in the PostgreSQL logs.\r\n\r\n",
                    "style": "info"
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "IsPostgreSQLServerLogsDataExists",
                      "comparison": "isEqualTo",
                      "value": "No"
                    },
                    {
                      "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    }
                  ],
                  "name": "text - 2"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{PGServerLogsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category == \"PostgreSQLLogs\"\r\n| where Message contains \"disconnection\"\r\n| distinct TimeGenerated,timestamp_s,Message\r\n| extend DisconnectTime=todatetime(timestamp_s)\r\n| extend allmatches=extract_all(@'session.time:(.+)user=(.+)database=(.+)host=(.+).port', Message)\r\n| extend duration=totime(allmatches[0][0])\r\n| extend user=trim(@\" \",tostring(allmatches[0][1]) )\r\n| extend database=tostring(allmatches[0][2])\r\n| extend IP=tostring(allmatches[0][3])\r\n| where  user !in ('azuresu','replication')\r\n| extend ts = totimespan(duration)\r\n| extend DurationInSeconds = ts / 1s\r\n| extend ConnType=iff(    DurationInSeconds <= 60, 'Short-Lived Connection' ,     iff(DurationInSeconds > 60 and DurationInSeconds < 1200, 'Normal-Lived Connection','Long-Lived Connection'))\r\n| make-series Connections=count() default=0 on DisconnectTime from Start_Time to End_Time step {TimeRange:grain} by ConnType\r\n",
                    "size": 0,
                    "title": "Connections summary by duration",
                    "queryType": 0,
                    "resourceType": "microsoft.dbforpostgresql/flexibleservers",
                    "crossComponentResources": [
                      "{Resource}"
                    ],
                    "visualization": "timechart",
                    "chartSettings": {
                      "showLegend": true
                    }
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "IsPostgreSQLServerLogsDataExists",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    },
                    {
                      "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    }
                  ],
                  "name": "query - 0"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "### **Dealing with High Number of Connections**\r\n\r\nIf you are experiencing a high number of connections on your PostgreSQL database, consider following these recommendations:\r\n\r\n\r\n#### **Adjusting Server Parameters**\r\n\r\nSet the `statement_timeout`, `idle_in_transaction_session_timeout` and `idle_session_timeout`(starting from PG14) server parameters to appropriate values. These can help manage connections and prevent idle connections from consuming resources.\r\n\r\nFor more best practices on connection handling, refer to this resource: [Best Practices](https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/connection-handling-best-practice-with-postgresql/ba-p/790883).\r\n\r\n#### **Consider Connection Pooling**\r\n\r\nIn situations where there are a lot of idle connections or connections that are consuming CPU resources, consider using a connection pooler like PgBouncer.\r\n\r\nFor more details on PgBouncer and how it works, check out this resource: [Connection Pooler](https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/not-all-postgres-connection-pooling-is-equal/ba-p/825717).\r\n\r\n##### **Setting Up PgBouncer**\r\n\r\nIf you're using Azure Database for Flexible Server, you can take advantage of PgBouncer as a built-in connection pooling solution. For more information on how to set it up, see this resource: [PgBouncer - Azure Database for PostgreSQL Flexible Server](https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-pgbouncer).\r\n\r\n##### **Recommended Settings for PgBouncer on Flexible Server**\r\n\r\n##### **Pool Mode:**\r\n- `Transaction` pool mode is generally considered to be the most suitable mode for higher TPS scenarios, as it provides a new connection for each transaction and releases the connection immediately after the transaction is complete. This approach can help reduce connection overhead and improve performance, especially for systems with a high number of short-lived transactions.\r\n- In `session` pool mode, a client is assigned a server connection for the entire duration of its connection, and the connection is returned to the pool when the client disconnects. This approach can help reduce the overhead of establishing new connections, which can be beneficial for systems with a high number of relatively long-lived connections. Also, This mode supports all PostgreSQL features.\r\n\r\n**Pool Size:** Tune the `default_pool_size` based on your workload. Note that the `default_pool_size` is per application/database.\r\n\r\n**Timeouts:** To ensure that idle connections are closed and long running queries are terminated, set the `server_idle_timeout` and `query_timeout` parameters according to your workload needs.",
                    "style": "info"
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "IsPostgreSQLServerLogsDataExists",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    },
                    {
                      "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    }
                  ],
                  "name": "text - 12",
                  "styleSettings": {
                    "padding": "0px"
                  }
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "connection-tab",
              "comparison": "isEqualTo",
              "value": "connectionsduration"
            },
            "name": "ConnectionsByDurationTab"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace. Refer to error section at the top for more details.",
                    "style": "info"
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "IsConnectionDataExists",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    },
                    {
                      "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                      "comparison": "isEqualTo",
                      "value": "No"
                    },
                    {
                      "parameterName": "IsServerPrimaryCheck",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    }
                  ],
                  "name": "text - 5 - Copy"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace. Refer to error section at the top for more details.",
                    "style": "info"
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "IsConnectionDataExists",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    },
                    {
                      "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                      "comparison": "isEqualTo",
                      "value": "No"
                    },
                    {
                      "parameterName": "IsServerPrimaryCheck",
                      "comparison": "isEqualTo",
                      "value": "No"
                    }
                  ],
                  "name": "text - 5 - Copy - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "let graph_grain=iff({TimeRange:grain}<5m,5m, {TimeRange:grain});\r\nlet Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10\r\n| where isnotempty(Datid_d) and Database_name_s !in('template1','template0', 'azure_maintenance','azure_sys')\r\n| where State_s !=\"\"\r\n| distinct TimeGenerated,Backend_start_t,Pid_d,State_s\r\n|summarize count_state=count() by bin(TimeGenerated,5m),State_s\r\n| make-series max_count= max(count_state) default=0 on TimeGenerated from Start_Time to End_Time step graph_grain by State_s\r\n|render timechart ",
                    "size": 0,
                    "aggregation": 2,
                    "showAnnotations": true,
                    "title": "Total Connection summary by State. Data is plotted at a granularity of {ChartGrainMin5}",
                    "noDataMessage": "No data found in given time range",
                    "noDataMessageStyle": 4,
                    "timeBrushParameterName": "TimeRange",
                    "timeBrushExportOnlyWhenBrushed": true,
                    "queryType": 0,
                    "resourceType": "microsoft.dbforpostgresql/flexibleservers",
                    "crossComponentResources": [
                      "{Resource}"
                    ],
                    "visualization": "timechart",
                    "chartSettings": {
                      "showLegend": true
                    }
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "IsConnectionDataExists",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    },
                    {
                      "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    }
                  ],
                  "name": "query - 2"
                },
                {
                  "type": 1,
                  "content": {
                    "json": "### **Dealing with High Number of Connections**\r\n\r\nIf you are experiencing a high number of connections on your PostgreSQL database, consider following these recommendations:\r\n\r\n\r\n#### **Adjusting Server Parameters**\r\n\r\nSet the `statement_timeout`, `idle_in_transaction_session_timeout` and `idle_session_timeout`(starting from PG14) server parameters to appropriate values. These can help manage connections and prevent idle connections from consuming resources.\r\n\r\nFor more best practices on connection handling, refer to this resource: [Best Practices](https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/connection-handling-best-practice-with-postgresql/ba-p/790883).\r\n\r\n#### **Consider Connection Pooling**\r\n\r\nIn situations where there are a lot of idle connections or connections that are consuming CPU resources, consider using a connection pooler like PgBouncer.\r\n\r\nFor more details on PgBouncer and how it works, check out this resource: [Connection Pooler](https://techcommunity.microsoft.com/t5/azure-database-for-postgresql/not-all-postgres-connection-pooling-is-equal/ba-p/825717).\r\n\r\n##### **Setting Up PgBouncer**\r\n\r\nIf you're using Azure Database for Flexible Server, you can take advantage of PgBouncer as a built-in connection pooling solution. For more information on how to set it up, see this resource: [PgBouncer - Azure Database for PostgreSQL Flexible Server](https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-pgbouncer).\r\n\r\n##### **Recommended Settings for PgBouncer on Flexible Server**\r\n\r\n##### **Pool Mode:**\r\n- `Transaction` pool mode is generally considered to be the most suitable mode for higher TPS scenarios, as it provides a new connection for each transaction and releases the connection immediately after the transaction is complete. This approach can help reduce connection overhead and improve performance, especially for systems with a high number of short-lived transactions.\r\n- In `session` pool mode, a client is assigned a server connection for the entire duration of its connection, and the connection is returned to the pool when the client disconnects. This approach can help reduce the overhead of establishing new connections, which can be beneficial for systems with a high number of relatively long-lived connections. Also, This mode supports all PostgreSQL features.\r\n\r\n**Pool Size:** Tune the `default_pool_size` based on your workload. Note that the `default_pool_size` is per application/database.\r\n\r\n**Timeouts:** To ensure that idle connections are closed and long running queries are terminated, set the `server_idle_timeout` and `query_timeout` parameters according to your workload needs.",
                    "style": "info"
                  },
                  "conditionalVisibilities": [
                    {
                      "parameterName": "IsConnectionDataExists",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    },
                    {
                      "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
                      "comparison": "isEqualTo",
                      "value": "Yes"
                    }
                  ],
                  "name": "text - 1"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "connection-tab",
              "comparison": "isEqualTo",
              "value": "connectionstate"
            },
            "name": "connectionsstate"
          }
        ],
        "exportParameters": true
      },
      "name": "Total User Only Connections"
    }
  ],
  "fallbackResourceIds": [],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}