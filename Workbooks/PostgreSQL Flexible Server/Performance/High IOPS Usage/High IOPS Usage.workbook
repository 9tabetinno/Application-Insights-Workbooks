{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "## High IOPS Utilization  \r\n\r\n<h6>*In this workbook we will try to identify the probable causes of high IOPS utilization and possible fixes to mitigate the issue. As a first step please select timestamp when you encountered the issue. .*</h6>\r\n\r\n<h6>*High IOPS Utilization can be because of several reasons which includes increased workload, long running transactions, IO consuming queries, too frequent checkpoints. The table below highlights each step that needs to be followed using the workbook to understand the behaviour on the server.*</h6>\r\n\r\nStep | Observations\r\n--- | ---\r\n**Select Parameters** | Step 0: Select time interval of interest.\r\n**Understand IOPS usage** | Step 1: Analyze the metrics in the IOPS Usage tab. Any spike in values compared to previous time intervals can be considered unusual which needs further investigation.\r\n**Understand the workload** | Step 2: Analyze workload details tab and check `read` and `write workloads`.\r\n**Do you see long running queries** | Step 3: Analyze session details tab for any read queries, write queries running for long time ?. Follow mitigation steps suggested in the section and monitor IOPS Usage.\r\n**Identify IO consuming queries** | Step 4: Analyze high IO queries tab to analyze top IO consuming  queries during window of interest.Follow mitigation steps suggested in the section.\r\n**Identify IO wait events** | Step 5: analyze `IO` wait events tab and follow recommendations on IO waits.\r\n**Do you see too frequent checkpoints** | Step 6: Checkpoints happening too frequently can consume IO. Analyze `Checkpoint Details` tab to identify any in the window of interest. Follow mitigation steps suggested in the section.\r\n**Check Storage Utilization** | Step 7: Increasing storage helps when you're adding more IOPS to the server. Check `Storage Usage` tab to understand current storage usage on the server."
      },
      "name": "text - 0"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscription}"
        ],
        "parameters": [
          {
            "id": "ad4f3a3b-ec2f-4483-8b9f-968bacd5c444",
            "version": "KqlParameterItem/1.0",
            "name": "Subscription",
            "type": 6,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "includeAll": true,
              "showDefault": false
            },
            "value": null
          },
          {
            "id": "6573f642-b4c6-4a56-8bdd-8ef451b7bdf5",
            "version": "KqlParameterItem/1.0",
            "name": "Resource",
            "type": 5,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false,
              "componentIdOnly": true
            }
          },
          {
            "id": "9ebd8e9a-5e9c-496a-bdb1-e41b9faaf9ad",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 604800000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "label": "TimeRange (Local Time)"
          },
          {
            "id": "233ae05f-0f3d-4463-b8ec-579074b35c53",
            "version": "KqlParameterItem/1.0",
            "name": "MIN_TIME_WINDOW_SEC",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "3600"
                }
              }
            ]
          },
          {
            "id": "089a8ccf-b6cb-4f68-adff-2bef115928ae",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics"
                }
              }
            ]
          },
          {
            "id": "e5f4fc66-344a-4a21-b495-f5cc20c3ec1a",
            "version": "KqlParameterItem/1.0",
            "name": "SessionsTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics"
                }
              }
            ]
          },
          {
            "id": "50d73c33-57bd-4010-b262-b1b32cf9be16",
            "version": "KqlParameterItem/1.0",
            "name": "PGServerLogsTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics"
                }
              }
            ]
          },
          {
            "id": "4acaac7e-fc60-46ae-b76a-bf233f28f4d8",
            "version": "KqlParameterItem/1.0",
            "name": "QueryWaitSamplingTable",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics"
                }
              }
            ]
          }
        ],
        "style": "above",
        "queryType": 1,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 0"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "63a46a9c-a2da-434b-8a59-3f09e9187a12",
            "version": "KqlParameterItem/1.0",
            "name": "GlobalEndTime",
            "type": 1,
            "query": "// GlobalEndTime will always equal TimeRange:end\r\n// In the case which selected interval is less than an hour, \r\n// we set GlobalStartTime to be an hour before GlobalEndTime\r\n// in order to avoid showing data \"in the future\".\r\n//print iff(true, totimespan({TimeRange:end}), totimespan({TimeRange:end}))\r\n\r\nlet dt = {TimeRange:end};\r\nprint iff(dt<now(), dt, now())",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "dd0c030c-81aa-42c2-bd83-fa6e7a220da3",
            "version": "KqlParameterItem/1.0",
            "name": "GlobalStartTime",
            "type": 1,
            "query": "// GlobalEndTime will always equal TimeRange:end\r\n// In the case which selected interval is less than an hour, \r\n// we set GlobalStartTime to be an hour before GlobalEndTime\r\n// in order to avoid showing data \"in the future\".\r\n//print iff(true, totimespan({TimeRange:end}), totimespan({TimeRange:end}))\r\nprint iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime('{GlobalEndTime}')-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start})",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "272bebf3-f5dc-4535-a126-1480bf3ebe29",
            "version": "KqlParameterItem/1.0",
            "name": "MetricsGrain",
            "type": 1,
            "query": "let trange=iff({TimeRange:grain}<5m,5m,Â {TimeRange:grain});\r\nprint case(\r\n    trange<1h, strcat(format_timespan(trange,'m'),' minute(s)'),\r\n    trange>=1h and trange<1d, strcat(format_timespan(trange,'H'),' hour(s)') ,\r\n    strcat(format_timespan(trange,'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "fc254114-66df-4953-9f5f-5cee75f57bfc",
            "version": "KqlParameterItem/1.0",
            "name": "LessThanOneHourInterval",
            "type": 1,
            "query": "let interval = 1h;\r\nprint iff({TimeRange:end} - {TimeRange:start} < interval, \"Yes\", \"No\")",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "4439ee9e-4a37-4973-a27b-d29bca8fe92d",
            "version": "KqlParameterItem/1.0",
            "name": "ChartGrain",
            "type": 1,
            "query": "let trange=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nprint case(\r\n    trange<1h, strcat(format_timespan(trange,'m'),' minute(s)'),\r\n    trange>=1h and trange<1d, strcat(format_timespan(trange,'H'),' hour(s)') ,\r\n    strcat(format_timespan(trange,'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "bfdc4660-2f41-45fb-b2f2-52df7b9afe9d",
            "version": "KqlParameterItem/1.0",
            "name": "IsServerPrimaryAPI",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..replicationRole\",\"columns\":[]}}]}",
            "isHiddenWhenLocked": true,
            "queryType": 12
          },
          {
            "id": "7eebfb68-bca9-4489-a30a-9000d4a3f139",
            "version": "KqlParameterItem/1.0",
            "name": "IsServerPrimaryCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "IsServerPrimaryAPI",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Primary",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "4e5644d9-2c5a-447e-a165-99faeb69771d",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreCheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/pg_qs.query_capture_mode?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":true,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..value\",\"columns\":[]}}]}",
            "queryType": 12,
            "value": null
          },
          {
            "id": "be3ddba2-1be1-4612-8b67-ec5d588aae52",
            "version": "KqlParameterItem/1.0",
            "name": "isQueryStoreEnabled",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "QueryStoreCheck",
                  "operator": "!=",
                  "rightValType": "static",
                  "rightVal": "None",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "a54fd47c-a961-4d05-bd93-56c2bd1bfb1b",
            "version": "KqlParameterItem/1.0",
            "name": "IsMetricsCollectorDatabaseActivityOn",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/metrics.collector_database_activity?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..value\",\"columns\":[]}}]}",
            "queryType": 12,
            "value": null
          },
          {
            "id": "57e73fc7-6ad3-48e8-9998-51563689a2fb",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIAllLogs",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.categoryGroup=='allLogs')].enabled\",\"columns\":[]}}]}",
            "queryType": 12,
            "value": null
          },
          {
            "id": "501d3c27-35cd-455d-a50f-2c451a1ea573",
            "version": "KqlParameterItem/1.0",
            "name": "AureDiagAPIQueryStoreRuntime",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.category=='PostgreSQLFlexQueryStoreRuntime')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "489af66b-ca6b-4f3b-9e82-75f15c2ec624",
            "version": "KqlParameterItem/1.0",
            "name": "IsQueryStoreRuntimeSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIAllLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AureDiagAPIQueryStoreRuntime",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "fc555679-97f3-4d11-94eb-118d965c44fe",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIPostgreSQLFlexSessions",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.category=='PostgreSQLFlexSessions')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "69ee8d62-0e6a-4340-8e32-1486d828d1aa",
            "version": "KqlParameterItem/1.0",
            "name": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIAllLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIPostgreSQLFlexSessions",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "dfde5f7b-9938-4e26-842a-2894acb98984",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIPostgreSQLLogs",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.category=='PostgreSQLLogs')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "d764799f-4209-4737-8918-dbf4aa2a5b10",
            "version": "KqlParameterItem/1.0",
            "name": "IsPostgreSQLLogsSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIAllLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIPostgreSQLLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "04724840-018d-4eea-8a4b-880a808465d5",
            "version": "KqlParameterItem/1.0",
            "name": "Waitsamplingcheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/pgms_wait_sampling.query_capture_mode?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..value\",\"columns\":[]}}]}",
            "queryType": 12,
            "value": null
          },
          {
            "id": "c9d699d4-5169-4b78-9ba7-86a920deb3f2",
            "version": "KqlParameterItem/1.0",
            "name": "isWaitsamplingenabled",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "Waitsamplingcheck",
                  "operator": "!=",
                  "rightValType": "static",
                  "rightVal": "none",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "no"
                }
              }
            ]
          },
          {
            "id": "c66e47a7-cf9d-4f13-8071-3e7286af6584",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagWaitsamplingcheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.category=='PostgreSQLFlexQueryStoreWaitStats')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "c8f892e9-ca70-48f5-9ac0-ad80c0b142d3",
            "version": "KqlParameterItem/1.0",
            "name": "isWaitLogsSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIAllLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagWaitsamplingcheck",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "parameters - 0"
    },
    {
      "type": 1,
      "content": {
        "json": "## IOPS Utilization"
      },
      "name": "text - 4"
    },
    {
      "type": 1,
      "content": {
        "json": "### Enhanced Metrics are currently disabled.\r\nThis workbook requires the use of enhanced metrics. To activate these metrics, simply enable the dynamic server parameter `metrics.collector_database_activity`.",
        "style": "error"
      },
      "conditionalVisibility": {
        "parameterName": "IsMetricsCollectorDatabaseActivityOn",
        "comparison": "isNotEqualTo",
        "value": "ON"
      },
      "name": "text - 52"
    },
    {
      "type": 1,
      "content": {
        "json": "### Query Store is currently disabled\r\nThis workbook depends on Query Store data. You need to enable it by setting the dynamic server parameter `pg_qs.query_capture_mode` to either All or TOP, and configuring the Diagnostic Settings destination to log analytics. Please refer to the following guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibility": {
        "parameterName": "isQueryStoreEnabled",
        "comparison": "isEqualTo",
        "value": "No"
      },
      "name": "text - 53"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store data is not being transmitted to the log analytics workspace\r\nThe Query Store data is not being sent to the log analytics workspace, which is necessary to use this workbook. To configure the logging settings for Query Store categories(`PostgreSQL Query Store Runtime` ) and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsQueryStoreRuntimeSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "text - 54"
    },
    {
      "type": 1,
      "content": {
        "json": "### The PostgreSQL server logs data is not being transmitted to the log analytics workspace\r\nThe PostgreSQL server logs data is not being sent to the log analytics workspace, which is necessary to use this workbook. To configure the logging settings for category `PostgreSQL Server Logs` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibility": {
        "parameterName": "IsPostgreSQLLogsSentToLogAnalytics",
        "comparison": "isEqualTo",
        "value": "No"
      },
      "name": "text - 56"
    },
    {
      "type": 1,
      "content": {
        "json": "### The PostgreSQL Sessions logs data is not being transmitted to the log analytics workspace\r\nThe PostgreSQL Sessions logs data is not being sent to the log analytics workspace, which is necessary to use this workbook. To configure the logging settings for category `PostgreSQL Sessions` and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibility": {
        "parameterName": "IsPostgreSQLFlexSessionsSentToLogAnalytics",
        "comparison": "isEqualTo",
        "value": "No"
      },
      "name": "PGSessionError"
    },
    {
      "type": 1,
      "content": {
        "json": "### Query Store Wait Sampling is currently disabled\r\nThis workbook depends on Query Store wait sampling data. You need to enable it by setting the dynamic server parameter `pgms_wait_sampling.query_capture_mode` to All, and configuring the Diagnostic Settings destination to log analytics. Please refer to the following guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibility": {
        "parameterName": "Waitsamplingcheck",
        "comparison": "isEqualTo",
        "value": "none"
      },
      "name": "text - 57 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store wait sampling data is not being transmitted to the log analytics workspace\r\nThe Query Store wait sampling data is not being sent to the log analytics workspace, which is necessary to use this workbook. To configure the logging settings for Query Store categories( `PostgreSQL Query Store Wait Statistics`) and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibility": {
        "parameterName": "isWaitLogsSentToLogAnalytics",
        "comparison": "isEqualTo",
        "value": "No"
      },
      "name": "text - 70 - Copy"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "561184d2-fedd-44f8-9fe1-5a5bca468465",
            "cellValue": "iopstab",
            "linkTarget": "parameter",
            "linkLabel": "IOPS Usage",
            "subTarget": "usage",
            "style": "link"
          },
          {
            "id": "53a4d309-f616-49ac-b3f8-01f9b81c712f",
            "cellValue": "iopstab",
            "linkTarget": "parameter",
            "linkLabel": "Workload Details",
            "subTarget": "workload",
            "style": "link"
          },
          {
            "id": "1cb86df9-058f-4ea3-a646-888e89b1fb39",
            "cellValue": "iopstab",
            "linkTarget": "parameter",
            "linkLabel": "Session Details",
            "subTarget": "long",
            "style": "link"
          },
          {
            "id": "065516f7-e3d8-4ff6-a120-568403493106",
            "cellValue": "iopstab",
            "linkTarget": "parameter",
            "linkLabel": "High IO Queries",
            "subTarget": "queries",
            "style": "link"
          },
          {
            "id": "c9da01bb-faab-4428-b968-8dfcf6ababbc",
            "cellValue": "iopstab",
            "linkTarget": "parameter",
            "linkLabel": "IO Wait Events",
            "subTarget": "wait",
            "style": "link"
          },
          {
            "id": "68f9ff2d-6068-4537-88f0-96c59fe3bb9a",
            "cellValue": "iopstab",
            "linkTarget": "parameter",
            "linkLabel": "Checkpoint Details",
            "subTarget": "checkpoint",
            "style": "link"
          },
          {
            "id": "0c59f2dd-2110-4403-8777-a6c3003b898f",
            "cellValue": "iopstab",
            "linkTarget": "parameter",
            "linkLabel": "Storage Usage",
            "subTarget": "storage",
            "style": "link"
          }
        ]
      },
      "name": "links - 33"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbookc2b8c71e-bd1e-4c87-8ba6-86bf1b7fd480",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 3,
        "color": "blue",
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 604800000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Saturation-iops",
            "aggregation": 3,
            "splitBy": null
          }
        ],
        "title": "Maximum IOPS.  Data is plotted at a granularity of {MetricsGrain}",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibility": {
        "parameterName": "iopstab",
        "comparison": "isEqualTo",
        "value": "usage"
      },
      "name": "metric - 5"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbookc2b8c71e-bd1e-4c87-8ba6-86bf1b7fd480",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 3,
        "color": "blue",
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 604800000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Saturation-disk_bandwidth_consumed_percentage",
            "aggregation": 3,
            "splitBy": null
          }
        ],
        "title": "Maximum Disk Bandwidth Consumed Percentage.  Data is plotted at a granularity of {MetricsGrain}",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "usage"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "metric - 5 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above is the percent of disk bandwidth being consumed. If this amount is at 100%, your server is IO capped from your data disk's bandwidth limit. **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "usage"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "text - 8"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbookc2b8c71e-bd1e-4c87-8ba6-86bf1b7fd480",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 3,
        "color": "blue",
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 604800000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Saturation-disk_iops_consumed_percentage",
            "aggregation": 3,
            "splitBy": null
          }
        ],
        "title": "Maximum Disk I/O Consumed Percentage.  Data is plotted at a granularity of {MetricsGrain}",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "usage"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "metric - 5 - Copy - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above is the percent of disk IO being consumed. If this amount is at 100%, your server is IO capped from your data disk's IO limit. **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "usage"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "text - 9"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "a1a65f17-8518-42a5-ab3e-8f5b2cd894fb",
            "cellValue": "worktab",
            "linkTarget": "parameter",
            "linkLabel": "Read Workload",
            "subTarget": "read",
            "style": "link"
          },
          {
            "id": "578bb476-54f2-424e-a92e-7a5d86c637ee",
            "cellValue": "worktab",
            "linkTarget": "parameter",
            "linkLabel": "Write Workload",
            "subTarget": "write",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "iopstab",
        "comparison": "isEqualTo",
        "value": "workload"
      },
      "name": "links - 43"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Workload related metrics not available. Enhanced Metrics must be enabled to view. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isNotEqualTo",
          "value": "ON"
        }
      ],
      "name": "text - 70"
    },
    {
      "type": 1,
      "content": {
        "json": "## Read workload details\r\n\r\n**Tup_fetched** and **Tup_returned** are two metrics that measure the number of rows read from a table by a PostgreSQL read workload.\r\n\r\nTup_fetched indicates the total number of live rows that have been fetched from a table using sequential scan and index entries returned by index scans in database, regardless of whether they are already in the cache or need to be read from disk. This metric provides insights into the overall data read using sequential scans.\r\n\r\nOn the other hand, tup_returned measures the number of live rows that are fetched by index scans in this database. This metric is incremented only when a row is actually comes form index scan, so it can provide insight into the efficiency of the query execution.\r\n\r\nBy monitoring these two metrics, administrators can gain a better understanding of the performance of their PostgreSQL read workloads.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "worktab",
          "comparison": "isEqualTo",
          "value": "read"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "text - 45"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbookd96d27b2-678f-4a0c-a3a3-95c7bed21c29",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 604800000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
            "aggregation": 1,
            "splitBy": null
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
            "aggregation": 1
          }
        ],
        "title": "Read Workload Trend.  Data is plotted at a granularity of {MetricsGrain}",
        "showCreateAlertRule": true,
        "filters": [
          {
            "id": "2",
            "key": "DatabaseName",
            "operator": 1,
            "values": [
              "azure_maintenance",
              "azure_sys"
            ]
          }
        ],
        "timeBrushParameterName": "TimeRange",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Subscription",
              "formatter": 5
            },
            {
              "columnMatch": "Name",
              "formatter": 13,
              "formatOptions": {
                "linkTarget": "Resource"
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched Timeline",
              "formatter": 5
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
              "formatter": 1,
              "numberFormat": {
                "unit": 0,
                "options": null
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned Timeline",
              "formatter": 5
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
              "formatter": 1,
              "numberFormat": {
                "unit": 0,
                "options": null
              }
            }
          ],
          "rowLimit": 10000,
          "labelSettings": [
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
              "label": "Tuples Fetched (Preview) (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched Timeline",
              "label": "Tuples Fetched (Preview) Timeline"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
              "label": "Tuples Returned (Preview) (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned Timeline",
              "label": "Tuples Returned (Preview) Timeline"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "worktab",
          "comparison": "isEqualTo",
          "value": "read"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "metric - 11"
    },
    {
      "type": 1,
      "content": {
        "json": "**The read workload metric calculates the total number of tuples fetched and returned, it does not include `azure_sys` and `azure_maintenance` databases.**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "worktab",
          "comparison": "isEqualTo",
          "value": "read"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "text - 14"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook7a7c3cb2-9d2d-45e7-a9bf-cb0db0f38dc9",
        "version": "MetricsItem/2.0",
        "size": 1,
        "chartType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 604800000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
            "aggregation": 1,
            "splitBy": "DatabaseName",
            "splitBySortOrder": -1,
            "splitByLimit": 50
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
            "aggregation": 1,
            "splitBy": "DatabaseName",
            "splitBySortOrder": -1,
            "splitByLimit": 50
          }
        ],
        "gridFormatType": 2,
        "filters": [
          {
            "id": "1",
            "key": "DatabaseName",
            "operator": 1,
            "values": [
              "azure_maintenance",
              "azure_sys"
            ]
          }
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Subscription",
              "formatter": 5
            },
            {
              "columnMatch": "Name",
              "formatter": 5,
              "formatOptions": {
                "linkTarget": "Resource"
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched Timeline",
              "formatter": 21,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned Timeline",
              "formatter": 21,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": ".*\\/Tuples Returned (Preview)$",
              "formatter": 1
            },
            {
              "columnMatch": ".*\\/Tuples Fetched (Preview)$",
              "formatter": 1
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "Segment",
              "label": "Database"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched",
              "label": "Tuples Fetched (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_fetched Timeline",
              "label": "Tuples Fetched (Sum) [Timeline]"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned",
              "label": "Tuples Returned (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_returned Timeline",
              "label": "Tuples Returned (Sum) [Timeline]"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "worktab",
          "comparison": "isEqualTo",
          "value": "read"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "metric - 66"
    },
    {
      "type": 1,
      "content": {
        "json": "## Write workload details \r\nThe number of tuples that have been inserted, updated, or deleted are critical for understanding the overall performance of the database and for identifying potential inefficiencies.\r\n\r\n**Tuples inserted** represents the number of rows that have been inserted into the database. This metric is particularly useful for monitoring the growth of the database and for assessing the effectiveness of bulk insert operations.\r\n\r\n**Tuples updated** measures the number of rows that have been updated in the database. This metric can help identify queries that are executing inefficiently or that are causing contention within the database.\r\n\r\n**Tuples deleted** represents the number of rows that have been deleted from the database. This metric can help identify queries that are causing excessive data churn or that are deleting more data than is necessary.\r\n\r\nBy monitoring these metrics, administrators can gain insights into the performance of their PostgreSQL write workloads and make data-driven decisions to optimize the database.\r\n\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "worktab",
          "comparison": "isEqualTo",
          "value": "write"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "text - 47"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbookd96d27b2-678f-4a0c-a3a3-95c7bed21c29",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 2,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 604800000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
            "aggregation": 1,
            "splitBy": null
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
            "aggregation": 1
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
            "aggregation": 1
          }
        ],
        "title": "Write Workload Trend.  Data is plotted at a granularity of {MetricsGrain}",
        "filters": [
          {
            "id": "2",
            "key": "DatabaseName",
            "operator": 1,
            "values": [
              "azure_maintenance",
              "azure_sys"
            ]
          }
        ],
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "worktab",
          "comparison": "isEqualTo",
          "value": "write"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "metric - 11 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "**The write workload metric calculates the total number of inserted, updated, and deleted tuples, it does not include `azure_sys` and `azure_maintenance` databases.**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "worktab",
          "comparison": "isEqualTo",
          "value": "write"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "text - 13"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook840cc26a-4a5b-4641-9a39-c0186fc4b983",
        "version": "MetricsItem/2.0",
        "size": 1,
        "chartType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 604800000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
            "aggregation": 1,
            "splitBy": "DatabaseName",
            "splitBySortOrder": -1,
            "splitByLimit": 50
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
            "aggregation": 1,
            "splitBy": "DatabaseName",
            "splitBySortOrder": -1,
            "splitByLimit": 50
          },
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
            "aggregation": 1,
            "splitBy": "DatabaseName",
            "splitBySortOrder": -1,
            "splitByLimit": 50
          }
        ],
        "title": "Tuples Inserted, Updated & Deleted by Database",
        "gridFormatType": 2,
        "filters": [
          {
            "id": "1",
            "key": "DatabaseName",
            "operator": 1,
            "values": [
              "azure_maintenance",
              "azure_sys"
            ]
          }
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Subscription",
              "formatter": 5
            },
            {
              "columnMatch": "Name",
              "formatter": 5
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted Timeline",
              "formatter": 21,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated Timeline",
              "formatter": 21,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
              "formatter": 1,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted Timeline",
              "formatter": 21,
              "formatOptions": {
                "palette": "blue"
              }
            }
          ],
          "rowLimit": 10000,
          "labelSettings": [
            {
              "columnId": "Segment",
              "label": "Database"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted",
              "label": "Tuples Inserted (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_inserted Timeline",
              "label": "Tuples Inserted  (Sum) [Timeline]"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated",
              "label": "Tuples Updated  (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_updated Timeline",
              "label": "Tuples Updated  (Sum) [Timeline]"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted",
              "label": "Tuples Deleted  (Sum)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Database (Preview)-tup_deleted Timeline",
              "label": "Tuples Deleted  (Sum) [Timeline]"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "workload"
        },
        {
          "parameterName": "worktab",
          "comparison": "isEqualTo",
          "value": "write"
        },
        {
          "parameterName": "IsMetricsCollectorDatabaseActivityOn",
          "comparison": "isEqualTo",
          "value": "ON"
        }
      ],
      "name": "metric - 71"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "d135ed65-b24a-48aa-85bc-0810a3cb8f38",
            "version": "KqlParameterItem/1.0",
            "name": "HaveHighIOConsumingQueries",
            "label": "HaveHighIOQueries",
            "type": 1,
            "query": "letÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Blk_read_time_d+Blk_write_time_d > 0\r\n| extend Mean_blk_rw_time=(Blk_read_time_d+Blk_write_time_d)/Calls_d\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by Queryid_d\r\n| count\r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "parameters - 67"
    },
    {
      "type": 1,
      "content": {
        "json": "** No IO consuming queries found in the selected timeRange **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "text - 59"
    },
    {
      "type": 1,
      "content": {
        "json": "#### Query Store is currently disabled",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "text - 59"
    },
    {
      "type": 1,
      "content": {
        "json": "**NOTE:**â¯ When using query store please make sure to enable server parameter â¯*`track_io_timing`* . <br>The parameter helps in populating columns *`blk_read_time`*  and *`blk_write_time`* in query store which helps in identifying high IO consuming queries. \r\n\r\n*`blk_read_time`*: Total time the statement spent reading data file blocks, in milliseconds <br>\r\n*`blk_write_time`*: Total time the statement spent writing data file blocks, in milliseconds <br>\r\n\r\nThe metric below identifiy the top IO-Consuming queries, order by sum of *`blk_read_time`* and *`blk_write_time`* . <br>",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "text - 17"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "/subscriptions/9d3faf91-9fbe-450d-b5dd-37bea9595299/resourcegroups/customerfacingworkbooks"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopIOConsumingQueries",
            "label": "Max Count",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "parameters - 49"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "text - 59"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "letÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Blk_read_time_d+Blk_write_time_d > 0\r\n| extend Mean_blk_rw_time=(Blk_read_time_d+Blk_write_time_d)/Calls_d\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by Queryid_d\r\n| top {TopIOConsumingQueries} by max_Mean_blk_rw_time desc\r\n| project Queryid_d;\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10\r\n| where Queryid_d in (TopQueryIDs)\r\n| extend Mean_blk_rw_time=(Blk_read_time_d+Blk_write_time_d)/Calls_d\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), 1m)\r\n|Â make-series maxiotime=max(Mean_blk_rw_time) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid=strcat('QueryId ',tolong(Queryid_d))",
        "size": 0,
        "aggregation": 2,
        "title": "Top {TopIOConsumingQueries} IOPS Consuming Queries. Data is plotted at a granularity of {ChartGrain}",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "query - 52"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsByIO",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "letÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Blk_read_time_d+Blk_write_time_d > 0\r\n| extend Mean_blk_rw_time=(Blk_read_time_d+Blk_write_time_d)/Calls_d\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by Queryid_d\r\n| top {TopIOConsumingQueries} by max_Mean_blk_rw_time desc\r\n| serialize Rank = row_number()\r\n| project label = Queryid_d, value =  Queryid_d, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "parameters - 40"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "letÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| where Queryid_d == {QueryIdsByIO}\r\n|â¯distinctâ¯Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Blk_read_time_d,Blk_write_time_d \r\n| extend blk_rw_time=Blk_read_time_d+Blk_write_time_d\r\n| extend Mean_blk_rw_time=blk_rw_time/Calls_d\r\n| summarize AvgIOtime=avg(Mean_blk_rw_time),AvgExecutionTime=avg(Mean_time_d),MaxIOtime=max(blk_rw_time),MaxExecutionTime=max(Max_time_d),TotalCalls=sum(Calls_d),MinIOtime=min(blk_rw_time), MinExecutionTime=min(Min_time_d) by Queryid_d,Query_type_s\r\n",
        "size": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "AvgIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "Queryid_d",
              "label": "Query Id"
            },
            {
              "columnId": "Query_type_s",
              "label": "Query Type"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "query - 69"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "letÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n    | where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n    | where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n    | where Userid_d != 10 // exclude azure super user \r\n    | where Queryid_d == {QueryIdsByIO}\r\n    |â¯distinctâ¯Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Rows_d,Total_time_d,Start_time_t,End_time_t,Plan_id_d,Dbid_d,Userid_d,Blk_read_time_d,Blk_write_time_d,Shared_blks_read_d,Shared_blks_dirtied_d\r\n    | extend blk_rw_time=Blk_read_time_d+Blk_write_time_d\r\n    | extend mean_Blk_read_time=Blk_read_time_d/Calls_d\r\n    | extend mean_Blk_write_time=Blk_write_time_d/Calls_d\r\n    | extend mean_blk_rw_time=blk_rw_time/Calls_d\r\n    | extend Mean_data_read_kb=Shared_blks_read_d*8/Calls_d, Mean_data_write_kb=Shared_blks_dirtied_d*8/Calls_d\r\n| summarize WindowStart=min(Start_time_t), WindowEnd=max(End_time_t),MeanIOtime=avg(mean_blk_rw_time),MeanExecutionTime=avg(Mean_time_d), MeanReadIOtime=avg(mean_Blk_read_time),MeanDataRead=avg(Mean_data_read_kb),MeanWriteIOtime=avg(mean_Blk_write_time),MeanDataWrite=avg(Mean_data_write_kb),\r\nMeanRows=sum(Rows_d)/sum(Calls_d),MinIOtime=min(mean_blk_rw_time),MinExecutionTime=min(Min_time_d),MaxIOtime=max(mean_blk_rw_time),MaxExecutionTime=max(Max_time_d),TotalCalls=sum(Calls_d),TotalExecutionTime=sum(Total_time_d),TotalRows=sum(Rows_d),TotalIOtime=sum(blk_rw_time) by bin(todatetime(End_time_t), graphgrain), Queryid_d,Plan_id_d,Dbid_d,Userid_d\r\n//excluded MeanReadIOtime and MeanWriteIOtime, because most of the time write io time will be less. Writes are on bgwriter \r\n| project Queryid_d,Plan_id_d,Dbid_d,Userid_d,WindowStart, WindowEnd, MeanIOtime,MeanExecutionTime,MeanDataRead,MeanDataWrite,MeanRows,TotalCalls,MinIOtime,MinExecutionTime,MaxIOtime,MaxExecutionTime,TotalRows,TotalIOtime,TotalExecutionTime\r\n|order by WindowStart asc\r\n\r\n   \r\n",
        "size": 0,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "MeanIOtime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataWrite",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinIOtime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "Queryid_d",
              "label": "Query id"
            },
            {
              "columnId": "Plan_id_d",
              "label": "Plan id"
            },
            {
              "columnId": "Dbid_d",
              "label": "Db Id"
            },
            {
              "columnId": "Userid_d",
              "label": "User Id"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "query - 55"
    },
    {
      "type": 1,
      "content": {
        "json": "** Shown above IO time is deducted by the total Blk_read_time plus Blk_write_time for the given Queryid and TimeRange. It is expected that Blk_write_time will always be way less than the Blk_read_time altghough the query could have written more data, because the write operations are mostly performed by the background writter process and not directly by the query. That is the reason we have shown as the IO time the sum of both read and write io **\r\n\r\n**MeanIOtime**: The mean (average) IO time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MeanExecutionTime**: The mean (average) execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MeanDataRead**: The mean (average) size of the blocks the queryid read from disk in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MeanDataRead**: The mean (average) size of the blocks the queryid modified in the shared buffers in a single call across the time bucket defined between WindowStart and WindowEnd. The dirtied blocks will be further written to disk by the background process<br>\r\n**MeanRows**: The mean (average) rows retrieved or affected by the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**TotalCalls**: Total calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MinIOtime**: The minimum IO time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MinExecutionTime**: The minimum execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n**MaxIOtime**: The maximum IO time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MaxExecutionTime**: The maximum execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n**TotalRows**: Total rows retrieved or affected by the querid for all the calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n**TotalIOtime**: Total IO time of the querid for all the calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n**TotalExecutionTime**: The total execution time of the querid for all the calls in the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n\r\nNon performant queries or queries that spent too much IO time may be ones which are contributing to High IO on the server. They are good candidates to  further analyze and tune.\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "text - 56"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific Query ID?**\r\n\r\nTo retrieve the Query Text for a specific Query ID, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the Query ID.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the query text for a given Query ID, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "text - 57"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "letÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Blk_read_time_d+Blk_write_time_d > 0\r\n| extend Mean_blk_rw_time=(Blk_read_time_d+Blk_write_time_d)/Calls_d\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by Queryid_d\r\n| top {TopIOConsumingQueries} by max_Mean_blk_rw_time desc\r\n| extend SQL= strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",tolong(Queryid_d),\";\")\r\n| project SQL",
        "size": 1,
        "title": "Get query_text from QueryId",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "query - 36"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "6ecc08b6-475d-4e78-b2d6-6fc300932335",
            "cellValue": "storage-tab",
            "linkTarget": "parameter",
            "linkLabel": "Storage Used Percentage",
            "subTarget": "storagepct",
            "style": "link"
          },
          {
            "id": "559e5a96-b09c-4c9c-9d6b-ab15ef257d28",
            "cellValue": "storage-tab",
            "linkTarget": "parameter",
            "linkLabel": "Storage Used Size",
            "subTarget": "storageused",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "iopstab",
        "comparison": "isEqualTo",
        "value": "storage"
      },
      "name": "links - 75"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbooka25b2c44-0749-4517-ba9d-63dbec8293ab",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 3,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 604800000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Saturation-storage_used",
            "aggregation": 3,
            "splitBy": null
          }
        ],
        "title": "Maximum Storage Space Used. Data is plotted at a granularity of {MetricsGrain}",
        "showCreateAlertRule": true,
        "timeBrushParameterName": "TimeRange",
        "gridSettings": {
          "rowLimit": 10000
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "storage-tab",
          "comparison": "isEqualTo",
          "value": "storageused"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "storage"
        }
      ],
      "name": "metric - 47"
    },
    {
      "type": 10,
      "content": {
        "chartId": "workbook20a3930f-e48b-43a6-8739-0906f905d8cc",
        "version": "MetricsItem/2.0",
        "size": 0,
        "chartType": 3,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "metricScope": 0,
        "resourceParameter": "Resource",
        "resourceIds": [
          "{Resource}"
        ],
        "timeContextFromParameter": "TimeRange",
        "timeContext": {
          "durationMs": 604800000
        },
        "metrics": [
          {
            "namespace": "microsoft.dbforpostgresql/flexibleservers",
            "metric": "microsoft.dbforpostgresql/flexibleservers-Saturation-storage_percent",
            "aggregation": 3,
            "splitBy": null
          }
        ],
        "title": "Maximum Percent of Storage Space Used. Data is plotted at a granularity of {MetricsGrain}",
        "showCreateAlertRule": true,
        "timeBrushParameterName": "TimeRange",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Subscription",
              "formatter": 5
            },
            {
              "columnMatch": "Name",
              "formatter": 13,
              "formatOptions": {
                "linkTarget": "Resource"
              }
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Saturation-storage_percent Timeline",
              "formatter": 5
            },
            {
              "columnMatch": "microsoft.dbforpostgresql/flexibleservers-Saturation-storage_percent",
              "formatter": 1,
              "numberFormat": {
                "unit": 1,
                "options": null
              }
            }
          ],
          "rowLimit": 10000,
          "labelSettings": [
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Saturation-storage_percent",
              "label": "Storage percent (Max)"
            },
            {
              "columnId": "microsoft.dbforpostgresql/flexibleservers-Saturation-storage_percent Timeline",
              "label": "Storage percent Timeline"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "storage-tab",
          "comparison": "isEqualTo",
          "value": "storagepct"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "storage"
        }
      ],
      "name": "Storage Utilization"
    },
    {
      "type": 1,
      "content": {
        "json": "** Expanding the storage capacity can be beneficial when incorporating additional IOPS into the server. To learn more about storage and its related IOPS, [Compute and storage options](https://learn.microsoft.com/en-us/azure/postgresql/flexible-server/concepts-compute-storage).**",
        "style": "info"
      },
      "conditionalVisibility": {
        "parameterName": "iopstab",
        "comparison": "isEqualTo",
        "value": "storage"
      },
      "name": "text - 20"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "6d9b9253-2393-4154-9216-67dfd7ba8c1a",
            "version": "KqlParameterItem/1.0",
            "name": "HasSessionData",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10 and State_s !='idle'\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n|count\r\n|extend hasdata =iff(Count>0,'Yes','No')\r\n|project hasdata",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "iopstab",
        "comparison": "isEqualTo",
        "value": "long"
      },
      "name": "parameters - 68"
    },
    {
      "type": 1,
      "content": {
        "json": "#### No sessions data  found in the selected timeRange.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "long"
        },
        {
          "parameterName": "HasSessionData",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "text - 69"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "/subscriptions/9d3faf91-9fbe-450d-b5dd-37bea9595299/resourcegroups/customerfacingworkbooks"
        ],
        "parameters": [
          {
            "id": "78753f4c-89f7-4880-8fde-10fdd30eade9",
            "version": "KqlParameterItem/1.0",
            "name": "PIDs",
            "label": "Number Of PIDs",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"10\", \"label\":\"10\",\"selected\":true },\r\n  { \"value\":\"20\", \"label\":\"20\" },\r\n    { \"value\":\"30\", \"label\":\"30\" },\r\n     { \"value\":\"40\", \"label\":\"40\" },\r\n  { \"value\":\"50\", \"label\":\"50\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "long"
        },
        {
          "parameterName": "HasSessionData",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "parameters - 32"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10 and State_s !='idle'\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n| distinct TimeGenerated,Pid_d,Backend_start_t,Backend_type_s,State_s,Collection_time_t,Query_start_t,Xact_start_t\r\n| extend Connection_duration_sec = datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Backend_start_t)), Query_duration_ms = datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Query_start_t))\r\n| summarize Connection_duration_sec=max(Connection_duration_sec), Query_duration_ms=max(Query_duration_ms),arg_max(TimeGenerated,lastState=State_s) by Pid_d,Backend_start_t, Backend_type_s\r\n | order by Query_duration_ms desc, Pid_d asc\r\n  | limit {PIDs}",
        "size": 1,
        "aggregation": 2,
        "title": "Top {PIDs} PIDs by transaction duration. Blue - connection duration; Yellow - query duration. The state shown in the tile is the last state from telemetry snapshot, historically the sate could have changed multiple times",
        "noDataMessage": "No PIDs data was found for the selected time range. Select a wider time range",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "tiles",
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Pid_d",
            "formatter": 1,
            "numberFormat": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "useGrouping": false
              }
            }
          },
          "subtitleContent": {
            "columnMatch": "lastState",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "Connection_duration_sec",
            "formatter": 3,
            "formatOptions": {
              "palette": "blue"
            },
            "numberFormat": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": false,
                "maximumFractionDigits": 2
              }
            },
            "tooltipFormat": {
              "tooltip": "{1}"
            }
          },
          "rightContent": {
            "columnMatch": "Query_duration_ms",
            "formatter": 3,
            "formatOptions": {
              "palette": "yellow"
            },
            "numberFormat": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            },
            "tooltipFormat": {
              "tooltip": "Query Duration"
            }
          },
          "secondaryContent": {
            "columnMatch": "Backend_type_s",
            "formatter": 1
          },
          "showBorder": true,
          "sortCriteriaField": "Connection_duration_sec",
          "sortOrderField": 2,
          "size": "auto"
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "Session_duration",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Pid",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "showLegend": true,
          "xSettings": {
            "numberFormatSettings": {
              "unit": 0,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          },
          "ySettings": {
            "numberFormatSettings": {
              "unit": 24,
              "options": {
                "style": "decimal",
                "useGrouping": false
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "long"
        },
        {
          "parameterName": "HasSessionData",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - Long Running Transactions "
    },
    {
      "type": 1,
      "content": {
        "json": "## Stats on sessions with Long running queries\r\n\r\n* Connection Duration **(blue)** - Duration of session or connection (collection_time-backend_start). You will notice higher value in case if you are using conneciton pool.\r\n* Query Duration **(yellow)** - Duration of query (collection_time-query_start). This should be in expected range of query execution time.\r\n\r\nLong running queries is based out of pg_stat_activity view in postgresql. If you want to know more about these columns, please visit https://www.postgresql.org/docs/current/monitoring-stats.html#MONITORING-PG-STAT-ACTIVITY-VIEW\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "long"
        },
        {
          "parameterName": "HasSessionData",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 34"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "ee95378d-6aea-4469-bddf-591a038fad99",
            "version": "KqlParameterItem/1.0",
            "name": "SessionPid",
            "label": "Show Snapshot of PID",
            "type": 2,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10 and State_s !='idle'\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n| extend Connection_duration_sec = datetime_diff('second',todatetime(Collection_time_t),todatetime(Backend_start_t)), Query_duration_ms = datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Query_start_t))\r\n| summarize  Connection_duration_sec=max(Connection_duration_sec), Query_duration_ms=max(Query_duration_ms) by Pid_d,Backend_start_t\r\n| order by Query_duration_ms desc, Pid_d asc\r\n| limit {PIDs}\r\n| extend uniquePidkeys=strcat(toint(Pid_d),'-',Backend_start_t)\r\n| project uniquePidkeys,Pid_d\r\n| serialize Rank = row_number()\r\n| project value = uniquePidkeys, label = strcat('ð ', toint(Pid_d)), selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "long"
        },
        {
          "parameterName": "HasSessionData",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "parameters - 35"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where Usesysid_d != 10\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| distinct TimeGenerated,Pid_d,Backend_start_t,Backend_type_s,State_s,Collection_time_t,Query_start_t,Xact_start_t,State_change_t,Datid_d,Database_name_s,Usesysid_d,Client_addr_s\r\n| extend uniquePidkeys=strcat(toint(Pid_d),'-',Backend_start_t)\r\n| where uniquePidkeys =='{SessionPid}'\r\n| extend Transaction_Duration=iff(todatetime(Collection_time_t)-todatetime(Xact_start_t)<time(00:00:00.00),0, datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Xact_start_t)))\r\n| extend StateLastChanged_ms=iff(todatetime(Collection_time_t)-todatetime(State_change_t)<time(00:00:00.00),0, datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(State_change_t)))\r\n| extend Xact_duration_ms=iff(todatetime(Collection_time_t)-todatetime(Xact_start_t)<time(00:00:00.00), datetime_diff('millisecond',todatetime(Xact_start_t),todatetime(Collection_time_t)), datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Xact_start_t)))\r\n| extend Query_duration_ms=iff(todatetime(Collection_time_t)-todatetime(Query_start_t)<time(00:00:00.00),datetime_diff('millisecond',todatetime(Xact_start_t),todatetime(Collection_time_t)), datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Query_start_t)))\r\n| extend dummy_row=1\r\n| summarize max(Transaction_Duration), max(Query_duration_ms), max(Xact_duration_ms),sum(dummy_row) Â by Pid_d,Backend_start_t, Datid_d, Database_name_s, Usesysid_d, Client_addr_s, Backend_type_s\r\n| project Pid_d,Backend_type_s, Datid_d, Database_name_s, Usesysid_d, Client_addr_s,Backend_start_t,TotalTransactionDuration=max_Transaction_Duration, LongestTransactionDuration=max_Xact_duration_ms,LongestQueryDuration=max_Query_duration_ms, SampledDatapointsCounter=sum_dummy_row",
        "size": 4,
        "title": "Summary as Of Time - {GlobalEndTime} UTC",
        "noDataMessage": "No PIDs data was found for the selected time range. Select a wider time range",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Backend_start",
              "formatter": 6
            },
            {
              "columnMatch": "TotalConnectionDuration",
              "formatter": 1,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestTransactionDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestQueryDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ]
        },
        "sortBy": [],
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Pid",
            "formatter": 1
          },
          "subtitleContent": {
            "columnMatch": "Backend_start",
            "formatter": 6,
            "dateFormat": {
              "showUtcTime": null,
              "formatName": "fullDateTimePattern"
            }
          },
          "leftContent": {
            "columnMatch": "Database_name",
            "formatter": 1
          },
          "showBorder": false
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "Backend_start",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Pid",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "long"
        },
        {
          "parameterName": "HasSessionData",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - 44"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Usesysid_d != 10 \r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n| distinct Datid_d,Database_name_s,Pid_d,Backend_start_t,State_s\r\n    | extend uniquePidkeys=strcat(toint(Pid_d),'-',Backend_start_t)\r\n    | where uniquePidkeys =='{SessionPid}'\r\n| extend workingState=iff(State_s in ('active','idle','idle in transaction','idle in transaction (aborted)'),State_s,'Other')\r\n| summarize count() by State=workingState",
        "size": 4,
        "title": "Overall State of the PID for the period. Data is sampled each 5 minutes",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "piechart",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Backend_start",
              "formatter": 6
            },
            {
              "columnMatch": "TotalConnectionDuration",
              "formatter": 1,
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestTransactionDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestQueryDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ]
        },
        "sortBy": [],
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Pid",
            "formatter": 1
          },
          "subtitleContent": {
            "columnMatch": "Backend_start",
            "formatter": 6,
            "dateFormat": {
              "showUtcTime": null,
              "formatName": "fullDateTimePattern"
            }
          },
          "leftContent": {
            "columnMatch": "Database_name",
            "formatter": 1
          },
          "showBorder": false
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "Backend_start",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Pid",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "long"
        },
        {
          "parameterName": "HasSessionData",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "customWidth": "50",
      "name": "query - 44 - Copy - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Usesysid_d != 10\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n| distinct Datid_d,Database_name_s,Pid_d,Backend_start_t,State_s,Wait_event_type_s,Wait_event_s\r\n    | extend uniquePidkeys=strcat(toint(Pid_d),'-',Backend_start_t)\r\n    | where uniquePidkeys =='{SessionPid}'\r\n|  summarize count() by Wait_event_type_s,Wait_event_s\r\n|project iff(isempty(Wait_event_type_s),'No Waits',strcat(Wait_event_type_s,':',Wait_event_s)),count_",
        "size": 4,
        "title": "Overall wait events of the PID for the period. Data is sampled each 5 minutes",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "piechart",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Backend_start",
              "formatter": 6
            },
            {
              "columnMatch": "TotalConnectionDuration",
              "formatter": 1,
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestTransactionDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LongestQueryDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ]
        },
        "sortBy": [],
        "tileSettings": {
          "titleContent": {
            "columnMatch": "Pid",
            "formatter": 1
          },
          "subtitleContent": {
            "columnMatch": "Backend_start",
            "formatter": 6,
            "dateFormat": {
              "showUtcTime": null,
              "formatName": "fullDateTimePattern"
            }
          },
          "leftContent": {
            "columnMatch": "Database_name",
            "formatter": 1
          },
          "showBorder": false
        },
        "graphSettings": {
          "type": 0,
          "topContent": {
            "columnMatch": "Backend_start",
            "formatter": 1
          },
          "centerContent": {
            "columnMatch": "Pid",
            "formatter": 1,
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        },
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "long"
        },
        {
          "parameterName": "HasSessionData",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "customWidth": "50",
      "name": "query - 44 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": " \r\nlet Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{SessionsTable}\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n| where TimeGenerated >= Start_Time and TimeGenerated <= End_Time\r\n| where Usesysid_d != 10\r\n| where isnotempty(Datid_d) and Database_name_s !in('azure_sys','azure_maintenance')\r\n    | extend uniquePidkeys=strcat(toint(Pid_d),'-',Backend_start_t)\r\n    | where uniquePidkeys =='{SessionPid}'\r\n| extend Connection_Duration=iff(todatetime(Collection_time_t)-todatetime(Backend_start_t)<time(00:00:00.00),datetime_diff('second',todatetime(Backend_start_t),todatetime(Collection_time_t)), datetime_diff('second',todatetime(Collection_time_t),todatetime(Backend_start_t)))\r\n| extend StateLastChanged_ms=iff(todatetime(Collection_time_t)-todatetime(State_change_t)<time(00:00:00.00),datetime_diff('millisecond',todatetime(State_change_t),todatetime(Collection_time_t)), datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(State_change_t)))\r\n| extend Xact_duration_ms=iff(todatetime(Collection_time_t)-todatetime(Xact_start_t)<time(00:00:00.00),datetime_diff('millisecond',todatetime(Xact_start_t),todatetime(Collection_time_t)), datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Xact_start_t)))\r\n| extend Query_duration_ms=iff(todatetime(Collection_time_t)-todatetime(Query_start_t)<time(00:00:00.00),datetime_diff('millisecond',todatetime(Query_start_t),todatetime(Collection_time_t)), datetime_diff('millisecond',todatetime(Collection_time_t),todatetime(Query_start_t)))\r\n| distinct Pid_d, Collection_time_t, Application_name_s , Connection_Duration,Query_duration_ms,Xact_duration_ms,StateLastChanged_ms, State_s, Wait_event_type_s , Wait_event_s , Backend_xid_d , Backend_xmin_d \r\n| order by Connection_Duration asc \r\n| serialize \r\n| extend rn=row_number()\r\n| extend prev_Application=(prev(Application_name_s,1))\r\n| extend prev_State=(prev(State_s,1))\r\n| extend prev_Waitevtype=(prev(Wait_event_type_s,1))\r\n| extend prev_Waitev=(prev(Wait_event_s,1))\r\n| extend prev_xid=(prev(Backend_xid_d,1))\r\n| extend prev_xmin=(prev(Backend_xmin_d,1))\r\n| extend isApp_change=iff( rn>1 and Application_name_s != prev_Application,1,0)\r\n| extend isState_change=iff( rn>1 and State_s != prev_State,1,0)\r\n| extend isWaitevtype_change=iff( rn>1 and Wait_event_type_s != prev_Waitevtype,1,0)\r\n| extend isWaitev_change=iff( rn>1 and Wait_event_s != prev_Waitev,1,0)\r\n| extend isxid_change=iff( rn>1 and Backend_xid_d != prev_xid,1,0)\r\n| extend isxmin_change=iff( rn>1 and Backend_xmin_d != prev_xmin,1,0)\r\n| extend breakPoint=iff (isApp_change>0 or isState_change>0 or isWaitevtype_change>0 or isWaitev_change>0 or isxid_change>0 or isxmin_change>0, 0, rn)\r\n| project Collection_time_t,Pid_d,Application_name_s,Connection_Duration, State_s, prev_State, Wait_event_s, prev_Waitev, Wait_event_type_s, prev_Waitevtype, rn, breakPoint,Backend_xid_d , Backend_xmin_d,Xact_duration_ms,StateLastChanged_ms\r\n| scan with_match_id=change_id declare (TheRank: long) with \r\n(\r\n    step buildRank: true => TheRank = iff(isnull(buildRank.TheRank), rn, buildRank.TheRank);\r\n    step endRank output=none: breakPoint==0;\r\n)\r\n| summarize min(Connection_Duration),max(Connection_Duration),min(Collection_time_t),max(Collection_time_t), SampledCounter=count(), max(Xact_duration_ms), avg(Xact_duration_ms), max(StateLastChanged_ms)  by change_id, Application_name_s, State_s,Wait_event_s,Wait_event_type_s,Pid_d, Backend_xid_d , Backend_xmin_d\r\n| extend WaitEvent=iff(isempty(Wait_event_type_s),'No Waits',strcat(Wait_event_type_s,':',Wait_event_s))\r\n| project Pid_d, FromTime=min_Collection_time_t, ToTime=max_Collection_time_t, \r\nFromConnectionStart=min_Connection_Duration,//, EndFromConnectionStart=max_Connection_Duration, \r\nApplication_name_s, State_s,WaitEvent,Backend_xid_d, Backend_xmin_d,MaxTransactionTime=max_Xact_duration_ms,AvgTransactionTime=iff(isnan(avg_Xact_duration_ms ),'',tostring(toint(avg_Xact_duration_ms))),//MaxLastStateChanged=max_StateLastChanged_ms\r\n SampledCounter",
        "size": 0,
        "title": "Full history of the PID for the selected TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "FromTime",
              "formatter": 6
            },
            {
              "columnMatch": "ToTime",
              "formatter": 6
            },
            {
              "columnMatch": "FromConnectionStart",
              "formatter": 19,
              "formatOptions": {
                "palette": "blue",
                "timelineSettings": {
                  "timelineStartColumn": "FromConnectionStart"
                }
              },
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxTransactionTime",
              "formatter": 1,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgTransactionTime",
              "formatter": 1,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "FromConnectionDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "ToConnectionDuration",
              "formatter": 0,
              "numberFormat": {
                "unit": 24,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Backend_start",
              "formatter": 6
            }
          ],
          "rowLimit": 500
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "long"
        },
        {
          "parameterName": "HasSessionData",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - 44 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "**Recommendations**\r\n\r\n* As a long term approach consider tuning queries identified from the above PIDs using explain analyze.\r\nMore information on EXPLAIN commandâ¯can be found here - https://www.postgresql.org/docs/14/sql-explain.html\r\n\r\n\r\n* As a short term option carefully consider if any of the long running session can be terminated or canceled by executing below commands:\r\n\r\nFrom the PIDs retrieved above execute the below query on the server to terminate the session:\r\n\r\n\tSELECT pg_terminate_backend(<pid>);\r\n\r\nYou could also cancel the running queries by executing the below query:\r\n\r\n\tSelect pg_cancel_backend(<pid>); \r\n\r\n* It is advised to have server parameters `statement_timeout` or `idle_in_transaction_session_timeout` set on the server to kill the long running transactions.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "long"
        },
        {
          "parameterName": "HasSessionData",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 39"
    },
    {
      "type": 1,
      "content": {
        "json": "#### The Query Store wait sampling is not enabled on the server.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "wait"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "text - 59"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "425a73d4-5fcf-41b2-9aab-c4dc6acb42e9",
            "version": "KqlParameterItem/1.0",
            "name": "HasWaitSampleData",
            "type": 1,
            "query": "letÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryWaitSamplingTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreWaitStats\"\r\n|Â whereÂ todatetime(End_time_t)Â >=Â TimeStartÂ andÂ todatetime(End_time_t)Â <=Â TimeEnd\r\n| where Userid_d !in (0, 10) //Â excludeÂ azureÂ superÂ userÂ  and system calls\r\n| where Queryid_d !=0\r\n | where Event_type_s=='IO'\r\n| count\r\n| extend HaveData = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveData\r\n\r\n",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "wait"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "parameters - 66"
    },
    {
      "type": 1,
      "content": {
        "json": "** No wait events found in the selected timeRange **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "wait"
        },
        {
          "parameterName": "HasWaitSampleData",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "text - 59"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "/subscriptions/9d3faf91-9fbe-450d-b5dd-37bea9595299/resourcegroups/customerfacingworkbooks"
        ],
        "parameters": [
          {
            "id": "c2575916-cafe-4f40-90b8-914a668084d7",
            "version": "KqlParameterItem/1.0",
            "name": "MaxCount",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "10"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "wait"
        },
        {
          "parameterName": "Waitsamplingcheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HasWaitSampleData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "parameters - 41"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "\r\nletÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\n//let graphgrain=15m;\r\nletÂ TimeStartÂ =Â todatetime('{GlobalStartTime}');\r\nletÂ TimeEndÂ =Â todatetime('{GlobalEndTime}');\r\nlet Topwaits = \r\n{QueryWaitSamplingTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreWaitStats\"\r\n|Â whereÂ todatetime(End_time_t)Â >=Â TimeStartÂ andÂ todatetime(End_time_t)Â <=Â TimeEnd\r\n| where Userid_d !in (0, 10) //Â excludeÂ azureÂ superÂ userÂ  and system calls\r\n| where Queryid_d !=0\r\n | where Event_type_s=='IO'\r\n| extend WaitEvent = strcat(iff(isempty(Event_type_s), 'No Waits', Event_type_s), \":\", Event_s)\r\n| summarize max_calls = max(Calls_d) by WaitEvent\r\n| where max_calls > 0\r\n| top {MaxCount} by max_calls desc\r\n| project WaitEvent;\r\n{QueryWaitSamplingTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreWaitStats\"\r\n|Â whereÂ todatetime(End_time_t)Â >=Â TimeStartÂ andÂ todatetime(End_time_t)Â <=Â TimeEnd\r\n| where Userid_d !in (0, 10) //Â excludeÂ azureÂ superÂ userÂ  and system calls\r\n| where Queryid_d !=0\r\n| where Event_type_s=='IO'\r\n| extend Events = strcat(iff(isempty(Event_type_s), 'No Waits', Event_type_s), \":\", Event_s)\r\n| where Events in (Topwaits)\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t),1m)\r\n|Â make-series max(Calls_d) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Events\r\n\r\n",
        "size": 0,
        "aggregation": 2,
        "title": "Top sampled wait events. Data is plotted at a granularity of {ChartGrain}",
        "timeContextFromParameter": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "tileSettings": {
          "showBorder": false
        },
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "wait"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HasWaitSampleData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - 40"
    },
    {
      "type": 1,
      "content": {
        "json": "**Recommendations On Common IO Wait Events**\r\n\r\n*IO:DATAFILEREAD* or *IO:DATAFILEWRITE*\r\n\r\n\r\n* High bloat on the tables can also lead to considerable IO usage. As a one off case consider carrying manual vacuum analyze of the tables using the below command on the database\r\n\r\n\t\tVacuum (analyze,verbose) <Table Name> \r\n\r\n* Partitioning: If you observe queries on large tables taking high IO consider partitioning the large tables.\r\n\r\n* Indexes & Joins : Consider creating indexes and reduce the joins in the query if applicable.\r\n\r\n* Consider tuning server parameters like work_mem, maintainence_work_mem. Please make the changes with caution and testing as setting a very high value of both parameters could lead to out of memory issues.\r\n\r\n* Understand the checkpoint timings and follow the recommendations provided below in checkpoint details tab in the workbook to tune checkpoint related server parameters.\r\n\r\n* Consider moving to higher SKU.\r\n\r\n*IO:WALWRITE*\r\n\r\n* Analyze the checkpoint details tab and follow recommendations around server parameters `max_wal_size`,`checkpoint_completion_target`.\r\n\r\n* Tune queries.\r\n\r\n* Consider moving to higher SKU.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "wait"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HasWaitSampleData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 42"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "95b812ef-1160-4692-be0a-a709435803d2",
            "version": "KqlParameterItem/1.0",
            "name": "isCheckpoint",
            "label": "Checkpoint Frequency",
            "type": 1,
            "query": "letÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nletÂ TimeStartÂ =Â todatetime('{GlobalStartTime}');\r\nletÂ TimeEndÂ =Â todatetime('{GlobalEndTime}');\r\n{PGServerLogsTable}\r\n| where Category == \"PostgreSQLLogs\"\r\n| where Message contains \"checkpoints are occurring too frequently\"\r\n| where todatetime(timestamp_s) >=Â TimeStartÂ andÂ todatetime(timestamp_s)Â <=Â TimeEnd\r\n|count\r\n|extend checkpointfrequent = iff(Count >0,'Yes','No')\r\n|project checkpointfrequent\r\n",
            "crossComponentResources": [
              "{Resource}"
            ],
            "isHiddenWhenLocked": true,
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "checkpoint"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "parameters - 51"
    },
    {
      "type": 1,
      "content": {
        "json": "# Checkpoints \r\nCheckpoints are points in the sequence of transactions at which it is guaranteed that the heap and index data files have been updated with all information written before that checkpoint. At checkpoint time, all dirty data pages are flushed to disk and a special checkpoint record is written to the log file. \r\n\r\nThe server's checkpointer process automatically performs a checkpoint every so often. A checkpoint is begun every `checkpoint_timeout` seconds, or if `max_wal_size` is about to be exceeded, whichever comes first. \r\n\r\n`checkpoint_timeout`   \r\nMaximum time between automatic WAL checkpoints. If this value is specified without units, it is taken as seconds. \r\n\r\n`max_wal_size`   \r\nMaximum size to let the WAL grow during automatic checkpoints.If this value is specified without units, it is taken as megabytes.\r\n\r\n",
        "style": "info"
      },
      "conditionalVisibility": {
        "parameterName": "iopstab",
        "comparison": "isEqualTo",
        "value": "checkpoint"
      },
      "name": "text - 68"
    },
    {
      "type": 1,
      "content": {
        "json": "## Monitor Checkpoint frequency and the checkpoint Time \r\n<table>\r\n\t<tr>\r\n        <td><strong>Checkpoint Timed</strong></td>\r\n        <td> A checkpoint is begun every `checkpoint_timeout` seconds </td>\r\n    </tr>\r\n\t<tr>\r\n        <td><strong>Checkpoint Requested</strong></td>\r\n        <td>A checkpoint is bugun if `max_wal_size` is about to be exceeded</td>\r\n    </tr>\r\n</table>",
        "style": "info"
      },
      "conditionalVisibility": {
        "parameterName": "iopstab",
        "comparison": "isEqualTo",
        "value": "checkpoint"
      },
      "name": "text - 69"
    },
    {
      "type": 1,
      "content": {
        "json": "###### Checkpoints requested too frequently in the time interval selected. Along with write workload analyze the below checkpoint metrics to understand the checkpoint frequency and average checkpoint times. Too frequent checkpoints has high IO impact. Follow the recommendations provided and tune parameters `max_wal_size`,`checkpoint_timeout` and `checkpoint_completion_target`.",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "checkpoint"
        },
        {
          "parameterName": "isCheckpoint",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 50"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "letÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nletÂ TimeStartÂ =Â todatetime('{GlobalStartTime}');\r\nletÂ TimeEndÂ =Â todatetime('{GlobalEndTime}');\r\n{PGServerLogsTable}\r\n| where Category == \"PostgreSQLLogs\"\r\n| where todatetime(timestamp_s) >=Â TimeStartÂ andÂ todatetime(timestamp_s)Â <=Â TimeEnd\r\n| where Message contains \"checkpoint starting\" or Message contains \"restartpoint starting\"\r\n|distinct Message,timestamp_s\r\n| extend preg_matchall=extract_all(@'(checkpoint|restartpoint) starting: (.+)',Message)\r\n| extend CheckpointFlagsBit=tostring(preg_matchall[0][1])\r\n| extend CheckpointType=preg_matchall[0][0]\r\n| project timestamp_s,CheckpointType,CheckpointFlagsBit\r\n| extend ts = bin(todatetime(timestamp_s), 1m)\r\n| where CheckpointFlagsBit ==\"time\" or CheckpointFlagsBit==\"wal\"\r\n| make-series NrOfCheckpointsEach30min=count(CheckpointFlagsBit) default=0 on ts  from TimeStart to TimeEnd step graphgrain by CheckpointFlagsBit\r\n\r\n\r\n",
        "size": 0,
        "title": "Checkpoint frequency Every {ChartGrain}",
        "noDataMessageStyle": 4,
        "timeContextFromParameter": "TimeRange",
        "timeBrushParameterName": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "unstackedbar",
        "chartSettings": {
          "yAxis": [
            "NrOfCheckpointsEach30min"
          ],
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "Checkpoint Frequency",
              "label": "Chkpoint Frequency"
            },
            {
              "seriesName": "immediate force wait",
              "label": " force wait"
            },
            {
              "seriesName": "immediate force wait flush-all",
              "label": "force wait flush-all"
            },
            {
              "seriesName": "time",
              "label": "Checkpt Timed"
            },
            {
              "seriesName": "wal",
              "label": "Checkpt Requested"
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "iopstab",
        "comparison": "isEqualTo",
        "value": "checkpoint"
      },
      "name": "query - 49"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "letÂ graphgrain=iff({TimeRange:grain}<15m,15m,Â {TimeRange:grain});\r\nletÂ TimeStartÂ =Â todatetime('{GlobalStartTime}');\r\nletÂ TimeEndÂ =Â todatetime('{GlobalEndTime}');\r\n{PGServerLogsTable}\r\n| where Category == \"PostgreSQLLogs\"\r\n| where todatetime(timestamp_s) >=Â TimeStartÂ andÂ todatetime(timestamp_s)Â <=Â TimeEnd\r\n| where Message contains \"checkpoint complete\"\r\n| distinct Message,timestamp_s\r\n| extend preg_matchall=extract_all(@'checkpoint complete: (.+)',Message)\r\n|extend CheckpointFlagsBit=extract(\"total=([0-9.]+)\", 1, tostring(preg_matchall[0]), typeof(real))\r\n| project timestamp_s,CheckpointFlagsBit,Type=strcat(extract(\"checkpoint\",0,Message),' ',\"Times\")\r\n| extend ts = bin(todatetime(timestamp_s), 1m)\r\n| make-series NrOfCheckpointsEach30min=avg(CheckpointFlagsBit) default=0 on ts from  TimeStart to TimeEnd step graphgrain by Type",
        "size": 0,
        "aggregation": 3,
        "title": "Checkpoint Time Every {ChartGrain}",
        "timeBrushParameterName": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "linechart",
        "chartSettings": {
          "showLegend": true,
          "seriesLabelSettings": [
            {
              "seriesName": "checkpoint Times",
              "label": "ChkpointTime[In Sec]"
            }
          ],
          "ySettings": {
            "numberFormatSettings": {
              "unit": 24,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "checkpoint"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - 49 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "\r\n\r\n#### Tune server parameters\r\n\r\nIf you've observed that the checkpoint is happening too frequently, increase theâ¯max_wal_sizeâ¯server <br>parameter until most checkpoints are time driven, instead of requested. Eventually, 90 percent or more should be time <br> based, and the interval between two  checkpoints should be close to theâ¯checkpoint_timeoutâ¯value that's set on the server. \r\n\r\n**max_wal_size**: Peak business hours are a good time to arrive at aâ¯max_wal_sizeâ¯value. To arrive at a value, do the following: \r\n\r\nRun the following query to get the current WAL LSN, and then note the result: \r\n\r\n```\r\nSELECT pg_current_wal_lsn();\r\n```\r\n\r\nWait for aâ¯checkpoint_timeoutâ¯number of seconds. Run the following query to get the current WAL LSN, and then note the result: \r\n\r\n```\r\nSELECT pg_current_wal_lsn();\r\n```\r\n\r\nRun the following query, which uses the two results, to check the difference, in gigabytes (GB): \r\n\r\n```\r\nSELECT round (pg_wal_lsn_diff ('LSN value when run second time', 'LSN value when run first time')/1024/1024/1024,2) WAL_CHANGE_GB; \r\n```\r\n\r\n**checkpoint_completion_target**: A good practice would be to set the value to 0.9. As an example, a value of 0.9 for <br>aâ¯checkpoint_timeoutâ¯of 5 minutes indicates that the target to complete a checkpoint is 270 seconds (0.9*300 seconds). A value of 0.9 provides a<br> fairly consistent I/O load. An aggressive value ofâ¯checkpoint_completion_targetâ¯might result in an increased I/O load on the server. \r\n\r\n**checkpoint_timeout**: You can increase theâ¯checkpoint_timeoutâ¯value from the default value that's set on the server. As you're increasing the<br> value, take into consideration that increasing it would also increase the time for crash recovery.\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "checkpoint"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 48"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store's capabilities are not functioning on the replica server.\r\n#### After analysis, we have determined that this server is a replica server, which means that the query store functionality is not available.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "wait"
        }
      ],
      "name": "text - 70"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store's capabilities are not functioning on the replica server.\r\n#### After analysis, we have determined that this server is a replica server, which means that the query store functionality is not available. However, there are alternative methods you can use to monitor long-running sessions on the replica server.\r\n- ##### To help pinpoint possible performance issues, a recommended solution is to adjust the `log_min_duration_statement` parameter to the desired threshold and properly configure `log_line_prefix` to include the relevant details such as **%t-%c user=%u,db=%d,app=%a,client=%h**. This will enable the logging of slow queries in the PostgreSQL logs. By doing so, you can easily access the top queries and review the slow queries that may require optimization.\r\n- ##### Another option is to configure `pg_stat_statements`, which allows you to view information about your query performance on the replica server. However, Please keep in mind that you need to execute the `CREATE EXTENSION pg_stat_statements` command on the primary server database. For more informaiton, please visit [PostgreSQL Documentation](https://www.postgresql.org/docs/current/pgstatstatements.html).\r\n- ##### You can also monitor the ongoing workload on the replica server by using the `pg_stat_activity` catalog view.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "iopstab",
          "comparison": "isEqualTo",
          "value": "queries"
        }
      ],
      "name": "text - 70"
    }
  ],
  "fallbackResourceIds": [],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}