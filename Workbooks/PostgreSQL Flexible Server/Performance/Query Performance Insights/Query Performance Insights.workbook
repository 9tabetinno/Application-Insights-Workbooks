{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "## Query Performance Insights\r\n\r\n<h6>*This workbook contains information regarding high time, memory, IOPS, and tempororay file generating queries, along with wait statistics on the given server. *</h6>\r\n\r\n"
      },
      "name": "text - 18"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscription}"
        ],
        "parameters": [
          {
            "id": "ad4f3a3b-ec2f-4483-8b9f-968bacd5c444",
            "version": "KqlParameterItem/1.0",
            "name": "Subscription",
            "type": 6,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "includeAll": true,
              "showDefault": false
            },
            "value": null
          },
          {
            "id": "9ebd8e9a-5e9c-496a-bdb1-e41b9faaf9ad",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": true,
            "isGlobal": true,
            "value": {
              "durationMs": 3600000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "label": "TimeRange (Local Time)"
          },
          {
            "id": "6573f642-b4c6-4a56-8bdd-8ef451b7bdf5",
            "version": "KqlParameterItem/1.0",
            "name": "Resource",
            "type": 5,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false,
              "componentIdOnly": true
            }
          },
          {
            "id": "09ae6e10-24ff-4eb0-964c-78c3bebf6b0b",
            "version": "KqlParameterItem/1.0",
            "name": "MIN_TIME_WINDOW_SEC",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "3600"
                }
              }
            ]
          },
          {
            "id": "089a8ccf-b6cb-4f68-adff-2bef115928ae",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreTable",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "AzureDiagnostics"
                }
              }
            ]
          },
          {
            "id": "0c594537-ed02-4094-98a9-3ecd2395f87b",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreWaitSampling",
            "type": 1,
            "isHiddenWhenLocked": true,
            "value": "AzureDiagnostics"
          }
        ],
        "style": "above",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "parameters - 0"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "/subscriptions/9d3faf91-9fbe-450d-b5dd-37bea9595299/resourcegroups/customerfacingworkbooks"
        ],
        "parameters": [
          {
            "id": "62507ec3-c7bd-4ef2-b0c5-69eddf960a36",
            "version": "KqlParameterItem/1.0",
            "name": "GlobalEndTime",
            "type": 1,
            "query": "// GlobalEndTime will always equal TimeRange:end\r\n// In the case which selected interval is less than an hour, \r\n// we set GlobalStartTime to be an hour before GlobalEndTime\r\n// in order to avoid showing data \"in the future\".\r\n//print iff(true, totimespan({TimeRange:end}), totimespan({TimeRange:end}))\r\n\r\nlet dt = {TimeRange:end};\r\nprint iff(dt<now(), dt, now())",
            "crossComponentResources": [
              "{Resource}"
            ],
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0
          },
          {
            "id": "25ec8def-09e9-4f9a-9b24-ac5fbe85ebf2",
            "version": "KqlParameterItem/1.0",
            "name": "GlobalStartTime",
            "type": 1,
            "query": "// GlobalEndTime will always equal TimeRange:end\r\n// In the case which selected interval is less than an hour, \r\n// we set GlobalStartTime to be an hour before GlobalEndTime\r\n// in order to avoid showing data \"in the future\".\r\n//print iff(true, totimespan({TimeRange:end}), totimespan({TimeRange:end}))\r\nprint iff (datetime_diff('second',{TimeRange:end},{TimeRange:start})<={MIN_TIME_WINDOW_SEC},todatetime('{GlobalEndTime}')-{MIN_TIME_WINDOW_SEC}s,{TimeRange:start})",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "477ec0d7-9343-498c-9124-6ab8e638c20c",
            "version": "KqlParameterItem/1.0",
            "name": "LessThanOneHourInterval",
            "type": 1,
            "query": "let interval = 1h;\r\nprint iff({TimeRange:end} - {TimeRange:start} < interval, \"Yes\", \"No\")",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "b64d57a5-ed62-4b71-b735-1d8db0cd6a34",
            "version": "KqlParameterItem/1.0",
            "name": "QueryStoreCheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/pg_qs.query_capture_mode?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..value\",\"columns\":[]}}]}",
            "queryType": 12,
            "value": null
          },
          {
            "id": "365629ac-caa7-4ffa-9889-7b40958a6bae",
            "version": "KqlParameterItem/1.0",
            "name": "ChartGrain",
            "type": 1,
            "query": "let trange=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nprint case(\r\n    trange<1h, strcat(format_timespan(trange,'m'),' minute(s)'),\r\n    trange>=1h and trange<1d, strcat(format_timespan(trange,'H'),' hour(s)') ,\r\n    strcat(format_timespan(trange,'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "3a7a3473-12de-428c-815c-251e02cdd4ab",
            "version": "KqlParameterItem/1.0",
            "name": "ChartGrainMin5",
            "type": 1,
            "query": "let trange=iff({TimeRange:grain}<5m,5m, {TimeRange:grain});\r\nprint case(\r\n    trange<1h, strcat(format_timespan(trange,'m'),' minute(s)'),\r\n    trange>=1h and trange<1d, strcat(format_timespan(trange,'H'),' hour(s)') ,\r\n    strcat(format_timespan(trange,'dd'),' day(s)')\r\n);",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers"
          },
          {
            "id": "c0e2c1db-c7d5-42ca-85e7-641943e3b8c3",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIAllLogs",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.categoryGroup=='allLogs')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "18bb8d79-2e99-42c0-9347-0e665c849b62",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagAPIQueryStoreRuntime",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.category=='PostgreSQLFlexQueryStoreRuntime')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "cd125bde-ebfa-4df2-ab8c-4215bbbb5f42",
            "version": "KqlParameterItem/1.0",
            "name": "IsServerPrimaryAPI",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..replicationRole\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "6c30bc57-b989-491e-8ea5-4e37217a339d",
            "version": "KqlParameterItem/1.0",
            "name": "IsServerPrimaryCheck",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "IsServerPrimaryAPI",
                  "operator": "==",
                  "rightValType": "static",
                  "rightVal": "Primary",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "0cf48c98-0af9-4809-be3b-7999ecf1fde8",
            "version": "KqlParameterItem/1.0",
            "name": "isQueryStoreEnabled",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "QueryStoreCheck",
                  "operator": "!=",
                  "rightValType": "static",
                  "rightVal": "none",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "cec8a31f-2806-4fce-83dd-3ffa45ec9803",
            "version": "KqlParameterItem/1.0",
            "name": "Waitsamplingcheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/configurations/pgms_wait_sampling.query_capture_mode?api-version=2022-12-01\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..value\",\"columns\":[]}}]}",
            "queryType": 12,
            "value": null
          },
          {
            "id": "e950bd84-bbb9-4cc4-a7e2-d77d8432ce0f",
            "version": "KqlParameterItem/1.0",
            "name": "isWaitsamplingenabled",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "Waitsamplingcheck",
                  "operator": "!=",
                  "rightValType": "static",
                  "rightVal": "none",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "13674b9e-433f-41f7-b179-a730bb558690",
            "version": "KqlParameterItem/1.0",
            "name": "AzureDiagWaitsamplingcheck",
            "type": 1,
            "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{Resource}/providers/Microsoft.Insights/diagnosticSettings?api-version=2021-05-01-preview\",\"urlParams\":[],\"batchDisabled\":false,\"transformers\":[{\"type\":\"jsonpath\",\"settings\":{\"tablePath\":\"$..properties..logs[?(@.category=='PostgreSQLFlexQueryStoreWaitStats')].enabled\",\"columns\":[]}}]}",
            "queryType": 12
          },
          {
            "id": "7c33ae51-201f-41e6-9687-bf51cebfa929",
            "version": "KqlParameterItem/1.0",
            "name": "IsQueryStoreRuntimeSentToLogAnalytics",
            "type": 1,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIAllLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIQueryStoreRuntime",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          },
          {
            "id": "735258d8-9b8e-46ab-a6ee-509e8f63e1f2",
            "version": "KqlParameterItem/1.0",
            "name": "isWaitLogsSentToLogAnalytics",
            "type": 1,
            "isRequired": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagAPIAllLogs",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "leftOperand": "AzureDiagWaitsamplingcheck",
                  "operator": "contains",
                  "rightValType": "static",
                  "rightVal": "true",
                  "resultValType": "static",
                  "resultVal": "Yes"
                }
              },
              {
                "criteriaContext": {
                  "operator": "Default",
                  "resultValType": "static",
                  "resultVal": "No"
                }
              }
            ]
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "parameters - parameter check"
    },
    {
      "type": 1,
      "content": {
        "json": "### Query Store is currently disabled\r\nThis workbook depends on Query Store data. You need to enable it by setting the dynamic server parameter `pg_qs.query_capture_mode` to either All or TOP, and configuring the Diagnostic Settings destination to log analytics. Please refer to the following guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "QueryStoreCheck",
          "comparison": "isEqualTo",
          "value": "none"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 57"
    },
    {
      "type": 1,
      "content": {
        "json": "### Query Store Wait Sampling is currently disabled\r\nThis workbook depends on Query Store wait sampling data. You need to enable it by setting the dynamic server parameter `pgms_wait_sampling.query_capture_mode` to All, and configuring the Diagnostic Settings destination to log analytics. Please refer to the following guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "Waitsamplingcheck",
          "comparison": "isEqualTo",
          "value": "none"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 57 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store data is not being transmitted to the log analytics workspace\r\nThe Query Store data is not being sent to the log analytics workspace, which is necessary to use this workbook. To configure the logging settings for Query Store categories(`PostgreSQL Query Store Runtime` & `PostgreSQL Query Store Wait Statistics`) and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsQueryStoreRuntimeSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 70"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store wait sampling data is not being transmitted to the log analytics workspace\r\nThe Query Store wait sampling data is not being sent to the log analytics workspace, which is necessary to use this workbook. To configure the logging settings for Query Store categories( `PostgreSQL Query Store Wait Statistics`) and send the data to a log analytics workspace, please refer to this guide for detailed instructions: https://learn.microsoft.com/azure/postgresql/flexible-server/howto-configure-and-access-logs.",
        "style": "error"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isWaitLogsSentToLogAnalytics",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 70 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "### The Query Store's capabilities are not functioning on the replica server.\r\n#### After analysis, we have determined that this server is a replica server, which means that the query store functionality is not available. However, there are alternative methods you can use to monitor long-running sessions on the replica server.\r\n- ##### To help pinpoint possible performance issues, a recommended solution is to adjust the `log_min_duration_statement` parameter to the desired threshold and properly configure `log_line_prefix` to include the relevant details such as **%t-%c user=%u,db=%d,app=%a,client=%h**. This will enable the logging of slow queries in the PostgreSQL logs. By doing so, you can easily access the top queries and review the slow queries that may require optimization.\r\n- ##### Another option is to configure `pg_stat_statements`, which allows you to view information about your query performance on the replica server. However, Please keep in mind that you need to execute the `CREATE EXTENSION pg_stat_statements` command on the primary server database. For more informaiton, please visit [PostgreSQL Documentation](https://www.postgresql.org/docs/current/pgstatstatements.html).\r\n- ##### You can also monitor the ongoing workload on the replica server by using the `pg_stat_activity` catalog view.",
        "style": "info"
      },
      "conditionalVisibility": {
        "parameterName": "IsServerPrimaryCheck",
        "comparison": "isEqualTo",
        "value": "No"
      },
      "name": "text - 60 - Copy"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "3ae74b6f-b823-4915-a31b-5dd3021d3cba",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "Long Running Queries",
            "subTarget": "qs-time",
            "preText": "High Time Consuming Queries",
            "style": "link"
          },
          {
            "id": "17e23a1d-3845-4275-bc98-a45babd7e411",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "Top Queries by Calls ",
            "subTarget": "qs-calls",
            "style": "link"
          },
          {
            "id": "5c1c9de9-9aa9-48a7-aba8-abc9a6a11a6a",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "High Memory Queries",
            "subTarget": "qs-memory",
            "style": "link"
          },
          {
            "id": "8c8cd62f-a541-48bc-93d2-d86198f33a94",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "High IOPS Queries",
            "subTarget": "qs-iops",
            "style": "link"
          },
          {
            "id": "1acea05d-fac2-4fe2-9e0d-a9e25a1b7ff5",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "High Temporary File Queries",
            "subTarget": "qs-temp",
            "style": "link"
          },
          {
            "id": "1965bfea-aec2-45e2-963c-bf46b23f3c61",
            "cellValue": "querystore-tab",
            "linkTarget": "parameter",
            "linkLabel": "Wait Statistics",
            "subTarget": "qs-wait",
            "style": "link"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "IsServerPrimaryCheck",
        "comparison": "isEqualTo",
        "value": "Yes"
      },
      "name": "links - 22"
    },
    {
      "type": 1,
      "content": {
        "json": "## Long Running Queries"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 22"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "750e436e-5970-4d36-9f0f-917ea9523724",
            "version": "KqlParameterItem/1.0",
            "name": "HighTimeQueries",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_time_d) by Queryid_d\r\n| count\r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "parameters - 64"
    },
    {
      "type": 1,
      "content": {
        "json": "** Query Store is not enabled on the server. **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 71 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "** No Time Consuming Queries Found in Selected TimeRange **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "text - 60"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "/subscriptions/9d3faf91-9fbe-450d-b5dd-37bea9595299/resourcegroups/customerfacingworkbooks"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopTimeConsumingQueries",
            "label": "Max Count",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "parameters - 49"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "text - 59 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_time_d) by Queryid_d\r\n| top {TopTimeConsumingQueries} by max_Mean_time_d desc\r\n| project Queryid_d;\r\n{QueryStoreTable} \r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10 // exclude azure super user \r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd             \r\n | where Queryid_d in (TopQueryIDs)\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), 1m)\r\n| make-series maxiotime=max(Mean_time_d) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid_d=strcat('QueryId ',tolong(Queryid_d))\r\n",
        "size": 0,
        "aggregation": 2,
        "title": "Top {TopTimeConsumingQueries} slow queries from Query Store. Data is plotted at a granularity of {ChartGrain}",
        "noDataMessage": "No data found during the window selected",
        "noDataMessageStyle": 4,
        "timeBrushParameterName": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "query - 18 - Copy - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above are the total execution time of the server's {TopTimeConsumingQueries} slowest queries. ** \r\n\r\n\r\nNon performant queries or queries that take time to complete might be the ones which consume CPU. Details on these QueryIds are shown below. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "text - 25"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsByTime",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}  \r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_time_d) by Queryid_d\r\n| top {TopTimeConsumingQueries} by max_Mean_time_d desc\r\n| project Queryid_d\r\n| serialize Rank = row_number()\r\n| project value = Queryid_d, label = Queryid_d, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "parameters - 40"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable} \r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user       \r\n| where Queryid_d == {QueryIdsByTime}\r\n| distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s\r\n| summarize AvgExecutionTime=avg(Mean_time_d),MaxExecutionTime=max(Max_time_d), MinExecutionTime=min(Min_time_d), TotalCalls=sum(Calls_d) by Queryid_d,Query_type_s",
        "size": 4,
        "title": "QueryID {QueryIdsByTime} summary in selected TimeRange",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "green"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "Queryid_d",
              "label": "Query Id"
            },
            {
              "columnId": "Query_type_s",
              "label": "Query Type"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "query - 33"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable} \r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| where Queryid_d == {QueryIdsByTime}\r\n| distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Rows_d,Total_time_d,Start_time_t,End_time_t,Plan_id_d,Dbid_d,Userid_d,Runtime_stats_entry_id_d\r\n| summarize WindowStart=min(Start_time_t), WindowEnd=max(End_time_t),MeanRows=sum(Rows_d)/sum(Calls_d),MeanExecutionTime=avg(Mean_time_d),MinExecutionTime=min(Min_time_d),MaxExecutionTime=max(Max_time_d),TotalCalls=sum(Calls_d),TotalExecutionTime=sum(Total_time_d),TotalRows=sum(Rows_d) by bin(todatetime(End_time_t), graphgrain), Queryid_d,Query_type_s,Plan_id_d,Dbid_d,Userid_d\r\n|order by WindowStart asc",
        "size": 0,
        "title": "QueryID {QueryIdsByTime} runtime statistics split by time buckets of {ChartGrain} each",
        "noDataMessage": "No data available during the period selected",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "End_time",
              "formatter": 5
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Dbid",
              "formatter": 1
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "MeanRows",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "Total_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "PreciseTimeStamp",
              "formatter": 6
            },
            {
              "columnMatch": "Min_time",
              "formatter": 5
            },
            {
              "columnMatch": "Max_time",
              "formatter": 5
            },
            {
              "columnMatch": "Stddev_time",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_read_time",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_write_time",
              "formatter": 5
            }
          ],
          "rowLimit": 500,
          "sortBy": [
            {
              "itemKey": "WindowStart",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "Queryid_d",
              "label": "Query Id"
            },
            {
              "columnId": "Dbid_d",
              "label": "Db Id"
            },
            {
              "columnId": "Userid_d",
              "label": "User Id"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "WindowStart",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "query - 33 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific Query ID?**\r\n\r\nTo retrieve the Query Text for a specific Query ID, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the Query ID.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the query text for a given Query ID, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 19"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_time_d) by Queryid_d\r\n| top {TopTimeConsumingQueries} by max_Mean_time_d desc\r\n| extend SQL= strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",tolong(Queryid_d),\";\")\r\n| project SQL",
        "size": 1,
        "title": "Get query_text from QueryId",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-time"
        }
      ],
      "name": "query - 33 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "## High Memory Queries"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 23"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "ff1b8a4d-9705-436c-936a-9c72150f0ce2",
            "version": "KqlParameterItem/1.0",
            "name": "HighMemoryQueries",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10 // exclude azure super user \r\n |extend Mean_memory_blks=(Shared_blks_hit_d + Shared_blks_dirtied_d)/Calls_d\r\n| summarize Max_blks = max(Mean_memory_blks) by Queryid_d\r\n|where Max_blks >0\r\n| count\r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "parameters - 65"
    },
    {
      "type": 1,
      "content": {
        "json": "** Query Store is not enabled on the server.**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 71 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "** No High Memory Consuming Queries Found in Selected TimeRange **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "text - 60"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "/subscriptions/9d3faf91-9fbe-450d-b5dd-37bea9595299/resourcegroups/customerfacingworkbooks"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopTimeConsumingQueries",
            "label": "Max Count",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "parameters - 49"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "text - 59 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n|extend Mean_memory_blks=(Shared_blks_hit_d + Shared_blks_dirtied_d)/Calls_d\r\n| summarize Max_blks = max(Mean_memory_blks) by Queryid_d, Resource \r\n| where Max_blks>0\r\n| top {TopTimeConsumingQueries} by Max_blks desc\r\n| project Queryid_d;\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd            \r\n| where Queryid_d in (TopQueryIDs)\r\n| where Userid_d != 10\r\n|extend Mean_memory_blks=(Shared_blks_hit_d + Shared_blks_dirtied_d)/Calls_d\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), 1m)\r\n| make-series maxmemorytime=max(Mean_memory_blks*8) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid_d=strcat('QueryId ',tolong(Queryid_d))",
        "size": 0,
        "aggregation": 2,
        "title": "Top {TopTimeConsumingQueries} Memory Consuming Queries. Data is plotted at a granularity of {ChartGrain}",
        "noDataMessage": "No data found in given time range",
        "noDataMessageStyle": 4,
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 3,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "query - 18"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above are the top {TopTimeConsumingQueries} memory consuming queries for the selected timerange. ** \r\n\r\nThese queries have the largest sum of shared_blks_hit and shared_blks_dirtied in the selected timerange\r\n\r\n*The counter indicates how much memory was pinned through the execution process, it could be that a page from the memory was pinned multiple times, hence the total memory touched by the given query can be multiple times higher than the shared_buffers itself.*",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "text - 38"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsByTime",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Userid_d != 10 // exclude azure super user \r\n| extend Mean_memory_blks=(Shared_blks_hit_d + Shared_blks_dirtied_d)/Calls_d\r\n| summarize Max_blks = max(Mean_memory_blks) by Queryid_d\r\n| where Max_blks>0\r\n| top {TopTimeConsumingQueries} by Max_blks desc\r\n| serialize Rank = row_number()\r\n| project value = Queryid_d, label = Queryid_d, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "parameters - 40"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| where Queryid_d == {QueryIdsByTime}\r\n| distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s\r\n| summarize AvgExecutionTime=avg(Mean_time_d),MaxExecutionTime=max(Max_time_d), MinExecutionTime=min(Min_time_d), TotalCalls=sum(Calls_d) by Queryid_d,Query_type_s\r\n",
        "size": 4,
        "title": "QueryID {QueryIdsByTime} summary in selected TimeRange",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "Is_system_query_b",
              "formatter": 5
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "green"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "Queryid_d",
              "label": "Query Id"
            },
            {
              "columnId": "Query_type_s",
              "label": "Query Type"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "query - 33"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n    | where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n    | where Userid_d != 10 // exclude azure super user \r\n    | where Queryid_d == {QueryIdsByTime}\r\n    | distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Rows_d,Total_time_d,Start_time_t,End_time_t,Plan_id_d,Dbid_d,Userid_d,Shared_blks_hit_d,Shared_blks_dirtied_d\r\n    | extend Total_Memory_blks_hit=(Shared_blks_hit_d + Shared_blks_dirtied_d)*8\r\n    | extend Mean_Memory_blks_hit=Total_Memory_blks_hit/Calls_d         \r\n    | summarize WindowStart=min(Start_time_t), WindowEnd=max(End_time_t),MeanRows=sum(Rows_d)/sum(Calls_d), MeanMemory=avg(Mean_Memory_blks_hit), MeanExecutionTime=avg(Mean_time_d), MinMemory=min(Mean_Memory_blks_hit),MaxMemory=max(Mean_Memory_blks_hit), TotalCalls=sum(Calls_d),TotalMemory=sum(Total_Memory_blks_hit), TotalRows=sum(Rows_d),MinExecutionTime=min(Min_time_d),MaxExecutionTime=max(Max_time_d),TotalExecutionTime=sum(Total_time_d) by bin(todatetime(End_time_t), graphgrain), Queryid_d,Plan_id_d,Dbid_d,Userid_d\r\n |order by WindowStart asc",
        "size": 0,
        "title": "QueryID {QueryIdsByTime} runtime statistics split by time buckets of {ChartGrain} each",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "End_time",
              "formatter": 5
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Dbid",
              "formatter": 1
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "Rows",
              "formatter": 8,
              "formatOptions": {
                "palette": "green"
              }
            },
            {
              "columnMatch": "MeanMemory",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinMemory",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxMemory",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "TotalMemory",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "Shared_blks_dirtied",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Shared_blks_hit",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Memory_blks_hit",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "PreciseTimeStamp",
              "formatter": 6
            },
            {
              "columnMatch": "memory_blks_hit",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_consumed_memory",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_blks",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Max_blks",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            }
          ],
          "rowLimit": 500,
          "sortBy": [
            {
              "itemKey": "WindowStart",
              "sortOrder": 1
            }
          ],
          "labelSettings": [
            {
              "columnId": "Queryid_d",
              "label": "Query Id"
            },
            {
              "columnId": "Plan_id_d",
              "label": "Plan Id"
            },
            {
              "columnId": "Dbid_d",
              "label": "Db Id"
            },
            {
              "columnId": "Userid_d",
              "label": "User Id"
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "WindowStart",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "query - 31 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "** Shown above memory usage is deducted by the total blks_hit plus blks_dirtied for the given Queryid and TimeRange. **\r\n\r\n**MeanMemory**: The mean (average) memory manipulated by the queryid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MinMemory**: The minimum memory manipulated by the queryid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MaxMemory**: The maximum memory manipulated by the queryid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**TotalMemory**: Total memory manipulated by the queryid in the time backet for all the calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MeanRows**: The mean (average) rows retrieved or affected by the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**TotalRows**: Total rows retrieved or affected by the querid for all the calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MeanExecutionTime**: The mean (average) execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MinExecutionTime**: The minimum execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n**MaxExecutionTime**: The maximum execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n**TotalExecutionTime**: The total execution time of the querid for all the calls in the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\nNon performant queries or queries that consume too much memory may be ones which are consuming high memory on the server. They are good candidates to to further analyze and tune.",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "text - 29"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific Query ID?**\r\n\r\nTo retrieve the Query Text for a specific Query ID, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the Query ID.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the query text for a given Query ID, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "text - 37"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Userid_d != 10 // exclude azure super user \r\n| extend Mean_memory_blks=(Shared_blks_hit_d + Shared_blks_dirtied_d)/Calls_d\r\n| summarize Max_blks = max(Mean_memory_blks) by Queryid_d, Resource \r\n| where Max_blks>0\r\n| top {TopTimeConsumingQueries} by Max_blks desc\r\n    | extend GetQueryText = strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",tolong(Queryid_d),\";\")\r\n    | project GetQueryText \r\n    ",
        "size": 1,
        "title": "Get query_text from QueryId",
        "noDataMessage": "No data found in given time range",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighMemoryQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-memory"
        }
      ],
      "name": "query - 35"
    },
    {
      "type": 1,
      "content": {
        "json": "## High Temporary File Queries "
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "High Temporary File Generating Queries: Read Replica"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "55658415-126e-4ef7-ad32-8cf7f90827e7",
            "version": "KqlParameterItem/1.0",
            "name": "HighTempQueries",
            "type": 1,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10\r\n| where Temp_blks_read_d + Temp_blks_written_d > 0\r\n| count \r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "parameters - 66"
    },
    {
      "type": 1,
      "content": {
        "json": "** Query Store is not enabled on the server. **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 71 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "** No High Temporary File Generating Queries Found in Selected TimeRange **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "text - 60"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "/subscriptions/9d3faf91-9fbe-450d-b5dd-37bea9595299/resourcegroups/customerfacingworkbooks"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopTempConsumingQueries",
            "label": "Max Count",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "parameters - 49"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "text - 59"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where Userid_d != 10\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| extend Mean_temp_blks = Temp_blks_written_d / Calls_d\r\n| summarize Max_blks = max(Mean_temp_blks) by Queryid_d\r\n| where Max_blks > 0\r\n| top {TopTempConsumingQueries} by Max_blks desc\r\n| project Queryid_d;\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10\r\n| where Queryid_d in (TopQueryIDs)\r\n| extend Mean_temp_blks = Temp_blks_written_d * 8 / Calls_d\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), 1m)\r\n| make-series Max_blks = max(Mean_temp_blks) default = 0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid_d=strcat('QueryId: ', tolong(Queryid_d))",
        "size": 0,
        "aggregation": 2,
        "title": "Top {TopTempConsumingQueries} Temporary File Consuming Queries. Data is plotted at a granularity of {ChartGrain}",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 37,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "query - 46"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above are the top {TopTempConsumingQueries} queries which generate temporary bytes or temporary files. ** \r\n\r\n\r\nDetails on these QueryIds are shown below. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "text - 48"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsByTemp",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Temp_blks_read_d + Temp_blks_written_d > 0\r\n| where Userid_d != 10\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| extend Mean_blk_rw_time = (Temp_blks_read_d + Temp_blks_written_d) / Calls_d\r\n| summarize max(Mean_blk_rw_time) by Queryid_d\r\n| top {TopTempConsumingQueries} by max_Mean_blk_rw_time desc\r\n| serialize Rank = row_number()\r\n| project label = Queryid_d, value =  Queryid_d, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "TimeRange",
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "parameters - 40"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10\r\n| where Queryid_d == '{QueryIdsByTemp}'\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Temp_blks_written_d,Temp_blks_read_d\r\n| extend Mean_Temp_blks_written = Temp_blks_written_d * 8 / Calls_d\r\n| extend Mean_Temp_blks_read = Temp_blks_read_d * 8 / Calls_d\r\n| summarize MeanTempBlksWritten = avg(Mean_Temp_blks_written), AvgExecutionTime=avg(Mean_time_d), MaxTempBlksWritten = max(Mean_Temp_blks_written), MaxExecutionTime=max(Max_time_d), TotalCalls=sum(Calls_d), MinTempBlksWritten=min(Mean_Temp_blks_written), MinExecutionTime=min(Min_time_d) by Queryid_d,Query_type_s",
        "size": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "MeanTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgReadWriteIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxReadWriteIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinReadWriteIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "End_time",
              "formatter": 6
            },
            {
              "columnMatch": "Blk_read_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Blk_write_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_query_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_blk_rw_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_dataRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_dataWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "greenRed"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_blk_rw_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_dataRead",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_dataWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Min_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Max_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "dataRead",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "dataWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "Queryid_d",
              "label": "Query Id"
            },
            {
              "columnId": "Query_type_s",
              "label": "Query Type"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "query - 34"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10\r\n| where Queryid_d == {QueryIdsByTemp}\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Rows_d,Total_time_d,Start_time_t,End_time_t,Plan_id_d,Dbid_d,Userid_d,Temp_blks_written_d,Temp_blks_read_d\r\n| extend total_Temp_blks_written = Temp_blks_written_d*8\r\n| extend total_Temp_blks_read = Temp_blks_read_d*8\r\n| extend Mean_Temp_blks_written=Temp_blks_written_d*8/Calls_d\r\n| extend Mean_Temp_blks_read=Temp_blks_read_d*8/Calls_d\r\n| summarize WindowStart=min(Start_time_t), WindowEnd=max(End_time_t), MeanTempBlksWritten=avg(Mean_Temp_blks_written),MeanTempBlksRead=avg(Mean_Temp_blks_read),MinTempBlksWritten=min(Mean_Temp_blks_written), MaxTempBlksWritten=max(Mean_Temp_blks_written),MeanRows=sum(Rows_d)/sum(Calls_d),TotalRows=sum(Rows_d),TotalCalls=sum(Calls_d), MeanExecutionTime=avg(Mean_time_d),MinExecutionTime=min(Min_time_d),MaxExecutionTime=max(Max_time_d),TotalExecutionTime=sum(Total_time_d) by bin(todatetime(End_time_t), graphgrain), Queryid_d,Query_type_s,Plan_id_d,Dbid_d,Userid_d\r\n|order by WindowStart asc",
        "size": 0,
        "title": "QueryID {QueryIdsByTemp} runtime statistics split by time buckets of {ChartGrain} each",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "End_time",
              "formatter": 5
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "MeanTempBlksWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanTempBlksRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxTempBlksWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalRows",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "TotalCalls",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TemporaryBlocksWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TemporaryBlocksRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanTemporaryBlockWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanTemporaryBlockRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanIOtime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataWrite",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinIOtime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanReadIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanWriteIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "Blk_read_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Blk_write_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_query_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_blk_rw_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_dataRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_dataWritten",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_blk_rw_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_dataRead",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_dataWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Total_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Min_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Max_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Mean_time",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "dataRead",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "dataWritten",
              "formatter": 0,
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "Queryid_d",
              "label": "Query Id"
            },
            {
              "columnId": "Query_type_s",
              "label": "Query Type"
            },
            {
              "columnId": "Plan_id_d",
              "label": "Plan Id"
            },
            {
              "columnId": "Dbid_d",
              "label": "Db Id"
            },
            {
              "columnId": "Userid_d",
              "label": "User Id"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "query - 34 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "\r\n**Temporary Blocks Columns**\r\n\r\n**TemporaryBlocksWritten**: Total number of temp blocks writes by the statement.\r\n\r\n**TemporaryBlocksRead**: Total number of temp blocks reads by the statement.\r\n\r\n\r\n**Details of columns from above grid**\r\n\r\n**MeanTempBlksWritten**: The mean (average) temporary blocks written by the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MeanTempBlksRead**: The mean (average) temporary blocks read by the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MinTempBlksWritten**:The minimum temporary blocks written by the querid in a single call  across the time bucket defined between WindowStart and WindowEnd\r\n\r\n**MaxTempBlksWritten**:The maximum temporary blocks written by the querid in a single call  across the time bucket defined between WindowStart and WindowEnd\r\n\r\n**MeanRows**: The mean (average) rows retrieved or affected by the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**TotalCalls**: Total calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**TotalRows**: Total rows retrieved or affected by the querid for all the calls in the time bucket defined between WindowStart and WindowEnd\r\n\r\n**MeanExecutionTime**: The mean (average) execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MinExecutionTime**: The minimum execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n**MaxExecutionTime**: The maximum execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n**TotalExecutionTime**: The total execution time of the querid for all the calls in the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n\r\n\r\nQueries that generated too many temorrary files or temporary bytes may be ones which are contributing to storage spikes on the server. They are good candidates to further analyze and tune.\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "text - 35"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific Query ID?**\r\n\r\nTo retrieve the Query Text for a specific Query ID, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the Query ID.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the query text for a given Query ID, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "text - 35 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable} \r\n    | where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n    | where Temp_blks_written_d+Temp_blks_read_d > 0\r\n    | where Userid_d != 10\r\n    | where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n    | extend blk_rw_time=Temp_blks_written_d/Calls_d \r\n    | summarize max(blk_rw_time) by Queryid_d \r\n    | top {TopTempConsumingQueries} by max_blk_rw_time desc\r\n    | extend SQL= strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",tolong(Queryid_d),\";\")\r\n    | project SQL",
        "size": 1,
        "title": "Get query_text from QueryId",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTempQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-temp"
        }
      ],
      "name": "query - 36"
    },
    {
      "type": 1,
      "content": {
        "json": "## Wait Statistics"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 49"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "d75b7012-0b6a-4b73-a739-6c56544a2853",
            "version": "KqlParameterItem/1.0",
            "name": "GetWaitSamplingData",
            "type": 1,
            "query": "let TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreWaitSampling}\r\n| where Category ==\"PostgreSQLFlexQueryStoreWaitStats\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d !in (0, 10) // exclude azure super user  and system calls\r\n| where Queryid_d !=0\r\n| project Userid_d\r\n| count\r\n| extend HaveData = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveData",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "parameters - 68"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "/subscriptions/9d3faf91-9fbe-450d-b5dd-37bea9595299/resourcegroups/customerfacingworkbooks"
        ],
        "parameters": [
          {
            "id": "97b4aa31-d728-4067-b476-2dc80096b1b1",
            "version": "KqlParameterItem/1.0",
            "name": "MaxCount",
            "label": "Number Of Wait Events",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"15\" }\r\n]",
            "value": "10"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "parameters - 3"
    },
    {
      "type": 1,
      "content": {
        "json": "** Query Store wait sampling is not enabled on the server. **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "text - 71 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "** No Wait Statistics Found in Selected TimeRange **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 60"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "\r\nlet graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\n//let graphgrain=15m;\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet Topwaits = \r\n{QueryStoreWaitSampling}\r\n| where Category ==\"PostgreSQLFlexQueryStoreWaitStats\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d !=0 // exclude azure super user  and system calls\r\n| where Userid_d !=10\r\n| where Queryid_d !=0\r\n| extend WaitEvent = strcat(iff(isempty(Event_type_s), 'No Waits', Event_type_s), \":\", Event_s)\r\n| summarize max_calls = max(Calls_d) by WaitEvent\r\n| where max_calls > 0\r\n| top {MaxCount} by max_calls desc\r\n| project WaitEvent;\r\n{QueryStoreWaitSampling}\r\n| where Category ==\"PostgreSQLFlexQueryStoreWaitStats\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d !=10\r\n| where Queryid_d !=0\r\n| where Queryid_d !=0\r\n| extend Events = strcat(iff(isempty(Event_type_s), 'No Waits', Event_type_s), \":\", Event_s)\r\n| where Events in (Topwaits)\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t),1m)\r\n| make-series max(Calls_d) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Events\r\n\r\n",
        "size": 0,
        "aggregation": 2,
        "title": "Top sampled wait events. Data is plotted at a granularity of {ChartGrain}",
        "noDataMessage": "No data in selected Interval",
        "timeBrushParameterName": "TimeRange",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "EVENT_TIME_GRAPHGRAIN",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "EVENT_TIME_GRAPHGRAIN",
            "sortOrder": 1
          }
        ],
        "tileSettings": {
          "showBorder": false
        },
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - 62"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\n//let graphgrain=15m;\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n\r\nlet databasename = \r\nAzureDiagnostics\r\n| where Category ==\"PostgreSQLFlexSessions\"\r\n|distinct Database_name_s,Datid_d;\r\n\r\nlet Topwaits = \r\n{QueryStoreWaitSampling}\r\n| where Category ==\"PostgreSQLFlexQueryStoreWaitStats\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d !in (0, 10) // exclude azure super user  and system calls\r\n| where Queryid_d !=0\r\n| extend WaitEvent = strcat(iff(isempty(Event_type_s), 'No Waits', Event_type_s), \":\", Event_s)\r\n| summarize max_calls = max(Calls_d) by WaitEvent\r\n| where max_calls > 0\r\n| top {MaxCount} by max_calls desc\r\n| project WaitEvent;\r\n{QueryStoreWaitSampling}\r\n| where Category ==\"PostgreSQLFlexQueryStoreWaitStats\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d !in (0, 10) // exclude azure super user  and system calls\r\n| where Queryid_d !=0\r\n| extend WaitEvent = strcat(iff(isempty(Event_type_s), 'No Waits', Event_type_s), \":\", Event_s)\r\n| where WaitEvent in (Topwaits)\r\n|distinct Start_time_t,End_time_t,Calls_d,WaitEvent,Dbid_d,Userid_d\r\n| summarize waiteventsamplecount=sum(Calls_d) by  WaitEvent, Dbid_d,Userid_d\r\n|join kind=leftouter databasename on $left.Dbid_d == $right.Datid_d\r\n| project WaitEvent,waiteventsamplecount,Database_name_s,Userid_d\r\n|order by WaitEvent asc\r\n\r\n\r\n",
        "size": 0,
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "waiteventsamplecount",
              "formatter": 0,
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "EVENTTYPE : EVENTNAME",
              "formatter": 1
            },
            {
              "columnMatch": "End_time_t",
              "formatter": 6
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "sum_Calls_d",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 1000,
          "labelSettings": [
            {
              "columnId": "waiteventsamplecount",
              "label": "Wait Event Sample Count"
            },
            {
              "columnId": "Database_name_s",
              "label": "Database Name"
            },
            {
              "columnId": "Userid_d",
              "label": "Userid"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-wait"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "GetWaitSamplingData",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isWaitsamplingenabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - 4"
    },
    {
      "type": 1,
      "content": {
        "json": "## High IOPS queries"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 50"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "d135ed65-b24a-48aa-85bc-0810a3cb8f38",
            "version": "KqlParameterItem/1.0",
            "name": "HaveHighIOConsumingQueries",
            "label": "HighIOQueries",
            "type": 1,
            "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Blk_read_time_d+Blk_write_time_d > 0\r\n| extend Mean_blk_rw_time=(Blk_read_time_d+Blk_write_time_d)/Calls_d\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by Queryid_d\r\n| count\r\n| extend HaveQueryIds = iff(Count > 0, \"Yes\", \"No\")\r\n| project HaveQueryIds",
            "crossComponentResources": [
              "{Resource}"
            ],
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibility": {
        "parameterName": "x",
        "comparison": "isEqualTo",
        "value": "y"
      },
      "name": "parameters - 67"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopIOConsumingQueries",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            },
            "label": "Max Count"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "parameters - 49"
    },
    {
      "type": 1,
      "content": {
        "json": "** Query Store is not enabled on the server. **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 71 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "** No IO Consuming Queries Found in Selected TimeRange **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "No"
        }
      ],
      "name": "text - 59"
    },
    {
      "type": 1,
      "content": {
        "json": "**NOTE:**  When using query store please make sure to enable server parameter  *`track_io_timing`* . <br>The parameter helps in populating columns *`blk_read_time`*  and *`blk_write_time`* in query store which helps in identifying high IO consuming queries. \r\n\r\n*`blk_read_time`*: Total time the statement spent reading data file blocks, in milliseconds <br>\r\n*`blk_write_time`*: Total time the statement spent writing data file blocks, in milliseconds <br>\r\n\r\nThe metric below identifiy the top IO-Consuming queries, order by sum of *`blk_read_time`* and *`blk_write_time`* . <br>",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 64"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 59"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Blk_read_time_d+Blk_write_time_d > 0\r\n| extend Mean_blk_rw_time=(Blk_read_time_d+Blk_write_time_d)/Calls_d\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by Queryid_d\r\n| top {TopIOConsumingQueries} by max_Mean_blk_rw_time desc\r\n| project Queryid_d;\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10\r\n| where Queryid_d in (TopQueryIDs)\r\n| extend Mean_blk_rw_time=(Blk_read_time_d+Blk_write_time_d)/Calls_d\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), 1m)\r\n| make-series maxiotime=max(Mean_blk_rw_time) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid=strcat('QueryId ',tolong(Queryid_d))",
        "size": 0,
        "aggregation": 2,
        "title": "Top {TopIOConsumingQueries} IOPS Consuming Queries. Data is plotted at a granularity of {ChartGrain}",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.resources/resourcegroups",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "chartSettings": {
          "showLegend": true,
          "ySettings": {
            "numberFormatSettings": {
              "unit": 23,
              "options": {
                "style": "decimal",
                "useGrouping": true
              }
            }
          }
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - 52"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsByIO",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Blk_read_time_d+Blk_write_time_d > 0\r\n| extend Mean_blk_rw_time=(Blk_read_time_d+Blk_write_time_d)/Calls_d\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by Queryid_d\r\n| top {TopIOConsumingQueries} by max_Mean_blk_rw_time desc\r\n| serialize Rank = row_number()\r\n| project label = Queryid_d, value =  Queryid_d, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "parameters - 40"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| where Queryid_d == {QueryIdsByIO}\r\n| distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Blk_read_time_d,Blk_write_time_d\r\n| extend blk_rw_time=Blk_read_time_d+Blk_write_time_d\r\n| extend Mean_blk_rw_time=blk_rw_time/Calls_d\r\n| summarize AvgIOtime=avg(Mean_blk_rw_time),AvgExecutionTime=avg(Mean_time_d),MaxIOtime=max(blk_rw_time),MaxExecutionTime=max(Max_time_d),TotalCalls=sum(Calls_d),MinIOtime=min(blk_rw_time), MinExecutionTime=min(Min_time_d) by Queryid_d,Query_type_s\r\n",
        "size": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "AvgIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "Queryid_d",
              "label": "Query Id"
            },
            {
              "columnId": "Query_type_s",
              "label": "Query Type"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - 69"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n    | where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n    | where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n    | where Userid_d != 10 // exclude azure super user \r\n    | where Queryid_d == {QueryIdsByIO}\r\n    | distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Rows_d,Total_time_d,Start_time_t,End_time_t,Plan_id_d,Dbid_d,Userid_d,Blk_read_time_d,Blk_write_time_d,Shared_blks_read_d,Shared_blks_dirtied_d\r\n    | extend blk_rw_time=Blk_read_time_d+Blk_write_time_d\r\n    | extend mean_Blk_read_time=Blk_read_time_d/Calls_d\r\n    | extend mean_Blk_write_time=Blk_write_time_d/Calls_d\r\n    | extend mean_blk_rw_time=blk_rw_time/Calls_d\r\n    | extend Mean_data_read_kb=Shared_blks_read_d*8/Calls_d, Mean_data_write_kb=Shared_blks_dirtied_d*8/Calls_d\r\n| summarize WindowStart=min(Start_time_t), WindowEnd=max(End_time_t),MeanIOtime=avg(mean_blk_rw_time),MeanExecutionTime=avg(Mean_time_d), MeanReadIOtime=avg(mean_Blk_read_time),MeanDataRead=avg(Mean_data_read_kb),MeanWriteIOtime=avg(mean_Blk_write_time),MeanDataWrite=avg(Mean_data_write_kb),\r\nMeanRows=sum(Rows_d)/sum(Calls_d),MinIOtime=min(mean_blk_rw_time),MinExecutionTime=min(Min_time_d),MaxIOtime=max(mean_blk_rw_time),MaxExecutionTime=max(Max_time_d),TotalCalls=sum(Calls_d),TotalExecutionTime=sum(Total_time_d),TotalRows=sum(Rows_d),TotalIOtime=sum(blk_rw_time) by bin(todatetime(End_time_t), graphgrain), Queryid_d,Plan_id_d,Dbid_d,Userid_d\r\n//excluded MeanReadIOtime and MeanWriteIOtime, because most of the time write io time will be less. Writes are on bgwriter \r\n| project Queryid_d,Plan_id_d,Dbid_d,Userid_d,WindowStart, WindowEnd, MeanIOtime,MeanExecutionTime,MeanDataRead,MeanDataWrite,MeanRows,TotalCalls,MinIOtime,MinExecutionTime,MaxIOtime,MaxExecutionTime,TotalRows,TotalIOtime,TotalExecutionTime\r\n|order by WindowStart asc\r\n\r\n   \r\n",
        "size": 0,
        "queryType": 0,
        "resourceType": "microsoft.resources/resourcegroups",
        "crossComponentResources": [
          "{Resource}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "MeanIOtime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataRead",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MeanDataWrite",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 3,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinIOtime",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalIOtime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "Queryid_d",
              "label": "Query id"
            },
            {
              "columnId": "Plan_id_d",
              "label": "Plan id"
            },
            {
              "columnId": "Dbid_d",
              "label": "Db Id"
            },
            {
              "columnId": "Userid_d",
              "label": "User Id"
            }
          ]
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - 55"
    },
    {
      "type": 1,
      "content": {
        "json": "** Shown above IO time is deducted by the total Blk_read_time plus Blk_write_time for the given Queryid and TimeRange. It is expected that Blk_write_time will always be way less than the Blk_read_time altghough the query could have written more data, because the write operations are mostly performed by the background writter process and not directly by the query. That is the reason we have shown as the IO time the sum of both read and write io **\r\n\r\n**MeanIOtime**: The mean (average) IO time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MeanExecutionTime**: The mean (average) execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MeanDataRead**: The mean (average) size of the blocks the queryid read from disk in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MeanDataRead**: The mean (average) size of the blocks the queryid modified in the shared buffers in a single call across the time bucket defined between WindowStart and WindowEnd. The dirtied blocks will be further written to disk by the background process<br>\r\n**MeanRows**: The mean (average) rows retrieved or affected by the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**TotalCalls**: Total calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n\r\n**MinIOtime**: The minimum IO time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MinExecutionTime**: The minimum execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n**MaxIOtime**: The maximum IO time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd<br>\r\n**MaxExecutionTime**: The maximum execution time of the querid in a single call across the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n**TotalRows**: Total rows retrieved or affected by the querid for all the calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n**TotalIOtime**: Total IO time of the querid for all the calls in the time bucket defined between WindowStart and WindowEnd<br>\r\n**TotalExecutionTime**: The total execution time of the querid for all the calls in the time bucket defined between WindowStart and WindowEnd <br>\r\n\r\n\r\nNon performant queries or queries that spent too much IO time may be ones which are contributing to High IO on the server. They are good candidates to  further analyze and tune.\r\n",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 56"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific Query ID?**\r\n\r\nTo retrieve the Query Text for a specific Query ID, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the Query ID.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the query text for a given Query ID, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "text - 57"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Blk_read_time_d+Blk_write_time_d > 0\r\n| extend Mean_blk_rw_time=(Blk_read_time_d+Blk_write_time_d)/Calls_d\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Mean_blk_rw_time) by Queryid_d\r\n| top {TopIOConsumingQueries} by max_Mean_blk_rw_time desc\r\n| extend SQL= strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",tolong(Queryid_d),\";\")\r\n| project SQL",
        "size": 1,
        "title": "Get query_text from QueryId",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ]
      },
      "conditionalVisibilities": [
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-iops"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HaveHighIOConsumingQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "query - 36"
    },
    {
      "type": 1,
      "content": {
        "json": "## Top Queries by Calls "
      },
      "conditionalVisibilities": [
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "text - 77"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "98d4f3a7-4057-400a-a84f-cbd61df98051",
            "version": "KqlParameterItem/1.0",
            "name": "TopTimeConsumingQueries",
            "label": "Max Count",
            "type": 2,
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n { \"value\":\"5\", \"label\":\"5\",\"selected\":true },\r\n  { \"value\":\"10\", \"label\":\"10\" },\r\n    { \"value\":\"20\", \"label\":\"20\" }\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        }
      ],
      "name": "parameters - 49"
    },
    {
      "type": 1,
      "content": {
        "json": "** Query Store is not enabled on the server. **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "text - 71 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "** No Time Consuming Queries Found in Selected TimeRange **",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "No"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "text - 60"
    },
    {
      "type": 1,
      "content": {
        "json": "**Selected interval is too small. A one hour capture from the selected End Time is being shown.**",
        "style": "warning"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "LessThanOneHourInterval",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "text - 59"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\nlet TopQueryIDs = \r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Calls_d) by Queryid_d\r\n| top {TopTimeConsumingQueries} by max_Calls_d desc\r\n| project Queryid_d;\r\n{QueryStoreTable} \r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where Userid_d != 10 // exclude azure super user \r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd             \r\n | where Queryid_d in (TopQueryIDs)\r\n |distinct End_time_t,Calls_d,Queryid_d\r\n| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), graphgrain)\r\n//| extend  EVENT_TIME_GRAPHGRAIN = bin(todatetime(End_time_t), graphgrain)\r\n| make-series maxiotime=sum(Calls_d) default=0 on EVENT_TIME_GRAPHGRAIN from TimeStart to TimeEnd step graphgrain by Queryid_d=strcat('QueryId ',tolong(Queryid_d))\r\n",
        "size": 0,
        "title": "Top {TopTimeConsumingQueries} Queries by Calls. Data is plotted at a granularity of {ChartGrain}",
        "noDataMessage": "No data found during the window selected",
        "noDataMessageStyle": 4,
        "timeContextFromParameter": "TimeRange",
        "timeBrushParameterName": "TimeRange",
        "timeBrushExportOnlyWhenBrushed": true,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "areachart",
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "Queryid_d",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "Queryid_d",
            "sortOrder": 1
          }
        ],
        "chartSettings": {
          "showLegend": true
        }
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "query - 19"
    },
    {
      "type": 1,
      "content": {
        "json": "**Shown above are the top {TopTimeConsumingQueries} queries by number of calls. ** \r\n\r\n\r\nQueries with high execution counts might be the ones which consume CPU. Details on these QueryIds are shown below. ",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "text - 81"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Resource}"
        ],
        "parameters": [
          {
            "id": "a6fd4d67-8fe0-4d80-a680-a7aadf93d2ed",
            "version": "KqlParameterItem/1.0",
            "name": "QueryIdsbyCalls",
            "label": "QueryId Snapshot",
            "type": 2,
            "isRequired": true,
            "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Calls_d) by Queryid_d \r\n    | top {TopTimeConsumingQueries} by max_Calls_d desc\r\n| project Queryid_d\r\n| serialize Rank = row_number()\r\n| project value = Queryid_d, label = Queryid_d, selected = iff(Rank == 1, true, false)",
            "crossComponentResources": [
              "{Resource}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.dbforpostgresql/flexibleservers",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "parameters - 40 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n| where Userid_d != 10 // exclude azure super user \r\n| where Queryid_d == {QueryIdsbyCalls}\r\n| distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s\r\n| summarize AvgExecutionTime=avg(Mean_time_d),MaxExecutionTime=max(Max_time_d), MinExecutionTime=min(Min_time_d), TotalCalls=sum(Calls_d) by Queryid_d,Query_type_s\r\n",
        "size": 4,
        "title": "QueryID {QueryIdsbyCalls} summary in selected TimeRange",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "AvgExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "green"
              }
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "query - 33 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let graphgrain=iff({TimeRange:grain}<15m,15m, {TimeRange:grain});\r\nlet TimeStart = todatetime('{GlobalStartTime}');\r\nlet TimeEnd = todatetime('{GlobalEndTime}');\r\n{QueryStoreTable}\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n    | where todatetime(End_time_t) >= TimeStart and todatetime(End_time_t) <= TimeEnd\r\n    | where Userid_d != 10 // exclude azure super user \r\n    | where Queryid_d == {QueryIdsbyCalls}\r\n    | distinct Mean_time_d,Max_time_d,Min_time_d,Calls_d,Queryid_d,Query_type_s,Rows_d,Total_time_d,Start_time_t,End_time_t,Plan_id_d,Dbid_d,Userid_d\r\n     | summarize WindowStart=min(Start_time_t), WindowEnd=max(End_time_t),MeanRows=sum(Rows_d)/sum(Calls_d),MeanExecutionTime=avg(Mean_time_d),MinExecutionTime=min(Min_time_d),MaxExecutionTime=max(Max_time_d),TotalCalls=sum(Calls_d),TotalExecutionTime=sum(Total_time_d),TotalRows=sum(Rows_d) by bin(todatetime(End_time_t), graphgrain),Queryid_d,Plan_id_d,Dbid_d,Userid_d    \r\n |order by WindowStart asc\r\n\r\n \r\n\r\n\r\n",
        "size": 0,
        "title": "QueryID {QueryIdsbyCalls} runtime statistics split by time buckets of {ChartGrain} each",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "End_time",
              "formatter": 5
            },
            {
              "columnMatch": "Queryid",
              "formatter": 1
            },
            {
              "columnMatch": "Dbid",
              "formatter": 1
            },
            {
              "columnMatch": "Userid",
              "formatter": 1
            },
            {
              "columnMatch": "WindowStart",
              "formatter": 6
            },
            {
              "columnMatch": "WindowEnd",
              "formatter": 6
            },
            {
              "columnMatch": "Rows",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "MeanExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MinExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Calls",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "TotalExecutionTime",
              "formatter": 0,
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Start_time",
              "formatter": 6
            },
            {
              "columnMatch": "Query_type",
              "formatter": 1
            },
            {
              "columnMatch": "Total_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "Mean_time",
              "formatter": 8,
              "formatOptions": {
                "palette": "blue"
              }
            },
            {
              "columnMatch": "PreciseTimeStamp",
              "formatter": 6
            },
            {
              "columnMatch": "Min_time",
              "formatter": 5
            },
            {
              "columnMatch": "Max_time",
              "formatter": 5
            },
            {
              "columnMatch": "Stddev_time",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Shared_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_hit",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_dirtied",
              "formatter": 5
            },
            {
              "columnMatch": "Local_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_read",
              "formatter": 5
            },
            {
              "columnMatch": "Temp_blks_written",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_read_time",
              "formatter": 5
            },
            {
              "columnMatch": "Blk_write_time",
              "formatter": 5
            }
          ],
          "labelSettings": [
            {
              "columnId": "End_time_t",
              "label": "End Time"
            },
            {
              "columnId": "Queryid_d",
              "label": "Query Id"
            },
            {
              "columnId": "Dbid_d",
              "label": "Db Id"
            },
            {
              "columnId": "Userid_d",
              "label": "User Id"
            }
          ]
        },
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "query - 33 - Copy"
    },
    {
      "type": 1,
      "content": {
        "json": "**How can you retrieve the Query Text for a specific Query ID?**\r\n\r\nTo retrieve the Query Text for a specific Query ID, you need to follow these steps:\r\n\r\n1. Connect to the server using the **`azure_sys`** database where QueryStore is installed. For example, you can use the following command:\r\n```SQL\r\npsql -h ServerName.postgres.database.azure.com -U AdminUsername -d azure_sys\r\n```\r\n\r\n2. Use the generated GetQueryText column to retrieve the Query Text associated with the Query ID.\r\n\r\nIt is important to note that the Query Store retention period applies when querying the database, and older data gets deleted based on the server parameter `pg_qs.retention_period_in_days`. However, our telemetry has a higher retention period.\r\n\r\n**To retrieve the query text for a given Query ID, use the following SQL:**",
        "style": "info"
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "text - 25 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let Start_Time = todatetime('{GlobalStartTime}');\r\nlet End_Time = todatetime('{GlobalEndTime}');\r\nAzureDiagnostics\r\n| where Category ==\"PostgreSQLFlexQueryStoreRuntime\"\r\n| where todatetime(End_time_t) >= Start_Time and todatetime(End_time_t) <= End_Time\r\n| where Userid_d != 10 // exclude azure super user \r\n| summarize max(Calls_d) by Queryid_d\r\n| top {TopTimeConsumingQueries} by max_Calls_d desc\r\n    | extend GetQueryText = strcat(\"SELECT query_sql_text FROM query_store.query_texts_view WHERE query_text_id=\",tolong(Queryid_d),\";\")\r\n    | project GetQueryText",
        "size": 1,
        "title": "Get query_text from QueryId",
        "noDataMessage": "No data available during the period selected",
        "noDataMessageStyle": 4,
        "queryType": 0,
        "resourceType": "microsoft.dbforpostgresql/flexibleservers",
        "crossComponentResources": [
          "{Resource}"
        ],
        "sortBy": []
      },
      "conditionalVisibilities": [
        {
          "parameterName": "isQueryStoreEnabled",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "HighTimeQueries",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "IsServerPrimaryCheck",
          "comparison": "isEqualTo",
          "value": "Yes"
        },
        {
          "parameterName": "querystore-tab",
          "comparison": "isEqualTo",
          "value": "qs-calls"
        }
      ],
      "name": "query - 33 - Copy"
    }
  ],
  "fallbackResourceIds": [],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}