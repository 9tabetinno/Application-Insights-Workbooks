{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time interval",
            "type": 4,
            "description": "Select time interval to get data",
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "042c4aca-7514-4fe0-852a-55bf59b7f0ab",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalFlowLogCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "id": "53f8d464-cc4e-4906-86e7-3c90800ed609",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalTopologyCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))), TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))))"
                }
              }
            ]
          },
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::all"
            ],
            "value": null,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptions",
            "label": "Discovered Subscriptions",
            "type": 2,
            "description": "NSGs in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'\r\n| distinct Subscription_g, SubscriptionName_s\r\n| project Subscription_g, SubscriptionName_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a16ef52-9f5d-459b-987e-0b75297860ad",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionsCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions}))"
                }
              }
            ]
          },
          {
            "id": "d2028f10-9c63-499c-947d-08eb9a41121d",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroups",
            "label": "Resource groups",
            "type": 2,
            "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection')\r\n| where {subscriptionsCheck}\r\n| project rgName = tostring(split(Name_s,'/')[0]), Subscription_g\r\n| distinct rgName, Subscription_g\r\n| project value = rgName, label = rgName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "96e71097-a8c9-4b64-903c-26a51bac174c",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupsCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))"
                }
              }
            ]
          },
          {
            "id": "282d8918-3c0c-43a0-aa36-6c14c3f5be79",
            "version": "KqlParameterItem/1.0",
            "name": "nsgs",
            "label": "NSG",
            "type": 2,
            "description": "Select one or more NSG",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  == 'Topology' and ResourceType == 'NetworkSecurityGroup' and IsFlowEnabled_b and DiscoveryRegion_s == Region_s\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| distinct Name_s\r\n| project value = split(Name_s, '/')[1], label = split(Name_s, '/')[1], selected = 1\r\n// if time interval is less than 1d, then st time = user selected end time - 1\r\n// keep end time as it is (no +7d)",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8bee622a-1e58-404f-aee1-a8c310411e87",
            "version": "KqlParameterItem/1.0",
            "name": "nsgRules",
            "label": "NSG name/Rule name",
            "type": 2,
            "description": "Select one or more NSG rules",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s  == 'Topology' and ResourceType == 'NetworkSecurityGroupRule' and DiscoveryRegion_s == Region_s\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| where \"{nsgs}\" == \"'*'\" or tostring(split(Name_s, '/')[1]) in~ ({nsgs})\r\n| distinct Name_s\r\n| extend fullRuleName = strcat(split(Name_s, '/')[1], '/', split(Name_s, '/')[2])\r\n| project value = split(Name_s, '/')[2], label = fullRuleName, selected = 1\r\n// if time interval is less than 1d, then st time = user selected end time - 1\r\n// keep end time as it is (no +7d)",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 2"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "46fdbc80-975e-40ec-810b-bf7118ff3420",
            "version": "KqlParameterItem/1.0",
            "name": "subscription1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription1_g in~ ({subscriptions}))"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "c5d7e5b2-58c2-441f-9bcd-d82c38c9501c",
            "version": "KqlParameterItem/1.0",
            "name": "subscription2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription2_g in~ ({subscriptions}))"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "a3b54f25-1e18-4e33-9582-0a7d0cb600ce",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroup1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rg1ToCheck in~ ({resourceGroups})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "739e4291-4a53-46b4-8348-ce2bc4cc1ee1",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroup2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rg2ToCheck in~ ({resourceGroups})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "26ae65fd-6405-4a9b-bc10-b3da092ddafc",
            "version": "KqlParameterItem/1.0",
            "name": "nsgCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{nsgs}\" == \"'*'\", true, nsgToCheck in~ ({nsgs})) "
                }
              }
            ]
          },
          {
            "id": "9dac5953-bf90-4160-89ac-11469af8eada",
            "version": "KqlParameterItem/1.0",
            "name": "nsgRuleCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{nsgRules}\" == \"'*'\", true, nsgRuleToCheck in~ ({nsgRules}))"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "Checks"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "c973b119-cf4d-462f-b450-d7e5f78add4d",
            "version": "KqlParameterItem/1.0",
            "name": "thousandUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "K"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "a2ca6b76-958e-4362-8fa9-937954ce8c7d",
            "version": "KqlParameterItem/1.0",
            "name": "millionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "M"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "2187717d-ce29-4f0b-a3cc-b7c559f34092",
            "version": "KqlParameterItem/1.0",
            "name": "billionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "B"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "fd412543-04e8-4545-bbd0-0531b02536c2",
            "version": "KqlParameterItem/1.0",
            "name": "trillionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "t"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "6a6400a0-c770-4f09-b760-d1deaf8a4973",
            "version": "KqlParameterItem/1.0",
            "name": "quadrillionUnit",
            "type": 1,
            "isRequired": true,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "q"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "Constants"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "fd9e1ff9-a35c-4a95-845d-d8c6ed101a73",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "query": "datatable (id:int) [1]\r\n| project value = strcat({timeInterval:seconds}/3000, 'm'), label = strcat({timeInterval:seconds}/3000, 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 8"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureNetworkAnalytics_CL\r\n| where {timeIntervalTopologyCheck}\r\n| where SubType_s == 'Topology' and ResourceType == 'NetworkSecurityGroupRule'\r\n| project nsgRuleId = strcat(Subscription_g, '/', Name_s), Priority_d\r\n| distinct nsgRuleId, Priority_d",
        "size": 1,
        "title": "NSG Rule Prioirty Table",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "NSG Rule Prioirty Table"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "a4684f60-090d-49b2-87ed-6fb2418b2627",
            "cellValue": "tabSelected",
            "linkTarget": "parameter",
            "linkLabel": "NSG",
            "subTarget": "0",
            "style": "link"
          },
          {
            "id": "01204408-fc23-4863-96d5-f20efc14f5c5",
            "cellValue": "tabSelected",
            "linkTarget": "parameter",
            "linkLabel": "NSG rules",
            "subTarget": "1",
            "style": "link"
          }
        ]
      },
      "name": "links - 7"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "665a3061-2f01-48b6-bf5d-446ec203607a",
            "version": "KqlParameterItem/1.0",
            "name": "nsgSortUnit",
            "label": "Sort using",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "parameters - 1"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "eac5273f-d0b5-4f33-93e9-a68e6989dc65",
            "version": "KqlParameterItem/1.0",
            "name": "top5NSGs",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n| where {nsgCheck}\r\n| where {nsgRuleCheck}\r\n// filter ends\r\n| extend traffic = iff('{nsgSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n| summarize TotalTraffic  = sum(traffic) by NSGList_s\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| project value = NSGList_s, label = NSGList_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "parameters - 2"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| where NSGList_s in~ ({top5NSGs})\r\n// filter ends\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| summarize sum(iff('{nsgSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by NSGList_s, todatetime(ceiling(FlowStartTime_t / {binningTime}) * {binningTime})",
        "size": 0,
        "showAnalytics": true,
        "title": "Time trending chart for hits of NSGs",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "showPin": true,
      "name": "Time trending chart for hits of NSGs"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "af7d8004-a964-45f8-9639-6e15d9e7273e",
            "version": "KqlParameterItem/1.0",
            "name": "nsgDisplayUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "label": "Display unit"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "parameters - 11 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' {thousandUnit}'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' {millionUnit}'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' {billionUnit}'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' {trillionUnit}'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' {quadrillionUnit}'))))))\r\n};\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n| where {nsgCheck}\r\n| where {nsgRuleCheck}\r\n// filter ends\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'D')\r\n| extend \r\nAllowedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'A', tolong(AllowedInFlows_d), 0)), \r\nBlockedInbound = tolong(iif(FlowDirection_s == 'I' and FlowStatus_s == 'D', tolong(DeniedInFlows_d), 0)), \r\nAllowedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'A', tolong(AllowedOutFlows_d), 0)), \r\nBlockedOutbound = tolong(iif(FlowDirection_s == 'O' and FlowStatus_s == 'D', tolong(DeniedOutFlows_d), 0))\r\n| extend \r\nMaliciousAllowedInboundFlows = iif(isMaliciousFlow, AllowedInbound, 0), \r\nMaliciousBlockedInboundFlows = iif(isMaliciousFlow, BlockedInbound, 0), \r\nMaliciousAllowedOutboundFlows = iif(isMaliciousFlow, AllowedOutbound, 0), \r\nMaliciousBlockedOutboundFlows = iif(isMaliciousFlow, BlockedOutbound, 0)\r\n| extend \r\nAllowedInboundBytes = iif(not(isBlocked), tolong(InboundBytes_d), 0), \r\nBlockedInboundBytes = iif(isBlocked, tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytes = iif(not(isBlocked), tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytes = iif(isBlocked, tolong(OutboundBytes_d), 0)\r\n| extend \r\nMaliciousAllowedInboundBytes = iif(isMaliciousFlow, AllowedInboundBytes, 0), \r\nMaliciousBlockedInboundBytes = iif(isMaliciousFlow, BlockedInboundBytes, 0), \r\nMaliciousAllowedOutboundBytes = iif(isMaliciousFlow, AllowedOutboundBytes, 0), \r\nMaliciousBlockedOutboundBytes = iif(isMaliciousFlow, BlockedOutboundBytes, 0)\r\n| extend \r\nAllowedInboundPackets = iif(not(isBlocked), tolong(InboundPackets_d), 0), \r\nBlockedInboundPackets = iif(isBlocked, tolong(InboundPackets_d), 0), \r\nAllowedOutboundPackets = iif(not(isBlocked), tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPackets = iif(isBlocked, tolong(OutboundPackets_d), 0)\r\n| extend \r\nMaliciousAllowedInboundPackets = iif(isMaliciousFlow, AllowedInboundPackets, 0), \r\nMaliciousBlockedInboundPackets = iif(isMaliciousFlow, BlockedInboundPackets, 0), \r\nMaliciousAllowedOutboundPackets = iif(isMaliciousFlow, AllowedOutboundPackets, 0), \r\nMaliciousBlockedOutboundPackets = iif(isMaliciousFlow, BlockedOutboundPackets, 0)\r\n| extend traffic = iff('{nsgSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n| summarize \r\ntotalAllowedInboundFlows = sum(AllowedInbound), \r\ntotalBlockedInboundFlows = sum(BlockedInbound), \r\ntotalAllowedOutboundFlows = sum(AllowedOutbound), \r\ntotalBlockedOutboundFlows = sum(BlockedOutbound), \r\ntotalMaliciousAllowedInboundFlows = sum(MaliciousAllowedInboundFlows), \r\ntotalMaliciousBlockedInboundFlows = sum(MaliciousBlockedInboundFlows), \r\ntotalMaliciousAllowedOutboundFlows = sum(MaliciousAllowedOutboundFlows), \r\ntotalMaliciousBlockedOutboundFlows = sum(MaliciousBlockedOutboundFlows),\r\n//\r\ntotalAllowedInboundBytes = sum(AllowedInboundBytes), \r\ntotalBlockedInboundBytes = sum(BlockedInboundBytes), \r\ntotalAllowedOutboundBytes = sum(AllowedOutboundBytes), \r\ntotalBlockedOutboundBytes = sum(BlockedOutboundBytes), \r\ntotalMaliciousAllowedInboundBytes = sum(MaliciousAllowedInboundBytes), \r\ntotalMaliciousBlockedInboundBytes= sum(MaliciousBlockedInboundBytes), \r\ntotalMaliciousAllowedOutboundBytes = sum(MaliciousAllowedOutboundBytes), \r\ntotalMaliciousBlockedOutboundBytes = sum(MaliciousBlockedOutboundBytes),\r\n//\r\ntotalAllowedInboundPackets = sum(AllowedInboundPackets), \r\ntotalBlockedInboundPackets = sum(BlockedInboundPackets), \r\ntotalAllowedOutboundPackets = sum(AllowedOutboundPackets), \r\ntotalBlockedOutboundPackets = sum(BlockedOutboundPackets), \r\ntotalMaliciousAllowedInboundPackets = sum(MaliciousAllowedInboundPackets), \r\ntotalMaliciousBlockedInboundPackets = sum(MaliciousBlockedInboundPackets), \r\ntotalMaliciousAllowedOutboundPackets = sum(MaliciousAllowedOutboundPackets), \r\ntotalMaliciousBlockedOutboundPackets = sum(MaliciousBlockedOutboundPackets),\r\nTotalTraffic  = sum(traffic)\r\nby NSGList_s\r\n| where TotalTraffic > 0\r\n| sort by TotalTraffic desc\r\n| project NSGList_s,\r\nnsgName = split(NSGList_s, '/')[2],\r\ntotalHits = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(TotalTraffic, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(TotalTraffic, 3), ValueWithUnit(TotalTraffic, 3))),\r\ntotalInboundAllowed = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalAllowedInboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalAllowedInboundPackets, totalAllowedInboundFlows)),\r\ntotalInboundBlocked = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalBlockedInboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalBlockedInboundPackets, totalBlockedInboundFlows)),\r\ntotalInbound = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalAllowedInboundBytes+totalBlockedInboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalAllowedInboundPackets+totalBlockedInboundPackets, totalAllowedInboundFlows+totalBlockedInboundFlows)),\r\ntotalInboundAllowedBenign = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalAllowedInboundBytes-totalMaliciousAllowedInboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalAllowedInboundPackets-totalMaliciousAllowedInboundPackets, totalAllowedInboundFlows-totalMaliciousAllowedInboundFlows)),\r\ntotalInboundAllowedMalicious = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalMaliciousAllowedInboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalMaliciousAllowedInboundPackets, totalMaliciousAllowedInboundFlows)),\r\ntotalInboundBlockedBenign = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalBlockedInboundBytes-totalMaliciousBlockedInboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalBlockedInboundPackets-totalMaliciousBlockedInboundPackets, totalBlockedInboundFlows-totalMaliciousBlockedInboundFlows)),\r\ntotalInboundBlockedMalicious = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalMaliciousBlockedInboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalMaliciousBlockedInboundPackets, totalMaliciousBlockedInboundFlows)),\r\ntotalOutboundAllowed = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalAllowedOutboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalAllowedOutboundPackets, totalAllowedOutboundFlows)),\r\ntotalOutboundBlocked = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalBlockedOutboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalBlockedOutboundPackets, totalBlockedOutboundFlows)),\r\ntotalOutbound = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalAllowedOutboundBytes+totalBlockedOutboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalAllowedOutboundPackets+totalBlockedOutboundPackets, totalAllowedOutboundFlows+totalBlockedOutboundFlows)),\r\ntotalOutboundAllowedBenign = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalAllowedOutboundBytes-totalMaliciousAllowedOutboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalAllowedOutboundPackets-totalMaliciousAllowedOutboundPackets, totalAllowedOutboundFlows-totalMaliciousAllowedOutboundFlows)),\r\ntotalOutboundAllowedMalicious = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalMaliciousAllowedOutboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalMaliciousAllowedOutboundPackets, totalMaliciousAllowedOutboundFlows)),\r\ntotalOutboundBlockedBenign = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalBlockedOutboundBytes-totalMaliciousBlockedOutboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalBlockedOutboundPackets-totalMaliciousBlockedOutboundPackets, totalBlockedOutboundFlows-totalMaliciousBlockedOutboundFlows)),\r\ntotalOutboundBlockedMalicious = iff('{nsgDisplayUnit:value}' =~ 'bytes', totalMaliciousBlockedOutboundBytes, iff('{nsgDisplayUnit:value}' =~ 'packets', totalMaliciousBlockedOutboundPackets, totalMaliciousBlockedOutboundFlows))\r\n| extend\r\ntotalInboundAllowedFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundAllowed, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundAllowed, 3), ValueWithUnit(totalInboundAllowed, 3))),\r\ntotalInboundBlockedFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundBlocked, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundBlocked, 3), ValueWithUnit(totalInboundBlocked, 3))),\r\ntotalInboundFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalInbound, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInbound, 3), ValueWithUnit(totalInbound, 3))),\r\ntotalInboundAllowedBenignFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundAllowedBenign, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedBenign, 3), ValueWithUnit(totalInboundAllowedBenign, 3))),\r\ntotalInboundAllowedMaliciousFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundAllowedMalicious, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundAllowedMalicious, 3), ValueWithUnit(totalInboundAllowedMalicious, 3))),\r\ntotalInboundBlockedBenignFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundBlockedBenign, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedBenign, 3), ValueWithUnit(totalInboundBlockedBenign, 3))),\r\ntotalInboundBlockedMaliciousFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalInboundBlockedMalicious, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalInboundBlockedMalicious, 3), ValueWithUnit(totalInboundBlockedMalicious, 3))),\r\ntotalOutboundAllowedFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundAllowed, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowed, 3), ValueWithUnit(totalOutboundAllowed, 3))),\r\ntotalOutboundBlockedFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundBlocked, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundBlocked, 3), ValueWithUnit(totalOutboundBlocked, 3))),\r\ntotalOutboundFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalOutbound, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutbound, 3), ValueWithUnit(totalOutbound, 3))),\r\ntotalOutboundAllowedBenignFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundAllowedBenign, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedBenign, 3), ValueWithUnit(totalOutboundAllowedBenign, 3))),\r\ntotalOutboundAllowedMaliciousFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundAllowedMalicious, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundAllowedMalicious, 3), ValueWithUnit(totalOutboundAllowedMalicious, 3))),\r\ntotalOutboundBlockedBenignFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundBlockedBenign, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedBenign, 3), ValueWithUnit(totalOutboundBlockedBenign, 3))),\r\ntotalOutboundBlockedMaliciousFormatted = iff('{nsgDisplayUnit:value}' =~ 'bytes', format_bytes(totalOutboundBlockedMalicious, 3), iff('{nsgDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalOutboundBlockedMalicious, 3), ValueWithUnit(totalOutboundBlockedMalicious, 3)))",
        "size": 1,
        "title": "Common NSG",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "table"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Common NSG"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let chatTable = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    // filter begins\r\n    | where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where {subscription1Check} or {subscription2Check}\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where {resourceGroup1Check} or {resourceGroup2Check}\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    | extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n    | where {nsgCheck}\r\n    | where {nsgRuleCheck}\r\n    // filter ends\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    | extend flowCount = tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d), byteCount = tolong(InboundBytes_d + OutboundBytes_d), packetCount = tolong(InboundPackets_d + OutboundPackets_d)\r\n    | extend SourceHost = iif(isnotempty(VM1_s), strcat(Subscription1_g, '/', VM1_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | extend DestinationHost = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', VM2_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | mv-expand SrcIP = iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' '))\r\n    | mv-expand DestIP = iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' '))\r\n    | extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0])\r\n    | where isnotempty(strcat(SrcIP, SourceHost)) and isnotempty(strcat(DestIP, DestinationHost))\r\n    | summarize totalFlow = sum(flowCount), totalByte = sum(byteCount), totalPacket = sum(packetCount) by SrcIP, SourceHost, DestIP, DestinationHost, NSGList_s;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(SourceHost, '/', SrcIP, '_', DestinationHost, '/', DestIP)\r\n    | extend rownHash = hash(rowIdentity);\r\nchatTableWithRownumber\r\n| join kind = leftouter (chatTableWithRownumber)\r\non $left.SrcIP == $right.DestIP and $left.DestIP == $right.SrcIP and $left.SourceHost == $right.DestinationHost and $left.DestinationHost == $right.SourceHost and $left.NSGList_s == $right.NSGList_s\r\n| where isnull(rownHash1) or (rownHash < rownHash1)\r\n| extend totalFlowRightTable = iif(isnull(totalFlow1), toint(0), toint(totalFlow1))\r\n| extend totalByteRightTable = iif(isnull(totalByte1), toint(0), toint(totalByte1))\r\n| extend totalPacketRightTable = iif(isnull(totalPacket1), toint(0), toint(totalPacket1))\r\n| project SrcIP, SourceHost, DestIP, DestinationHost, finalTotalTraffic = iff('{nsgSortUnit:value}' =~ 'bytes', tolong(totalByte + totalByteRightTable), iff('{nsgSortUnit:value}' =~ 'packets', tolong(totalPacket + totalPacketRightTable), tolong(totalFlow + totalFlowRightTable))), NSGList_s\r\n| top-nested of NSGList_s by max(1), top-nested 3 of pairInfo = strcat(SrcIP, '#', SourceHost, '#', DestIP, '#', DestinationHost) by max(finalTotalTraffic)\r\n| summarize topTalkingPairs = strcat_array(make_list(strcat(split(pairInfo, '#')[0],' - ', split(pairInfo, '#')[2])), ', ') by NSGList_s\r\n| project NSGList_s, topTalkingPairs",
        "size": 1,
        "title": "Top talking NSG",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Top talking NSG"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let TopNSGRules = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    // filter begins\r\n    | where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where {subscription1Check} or {subscription2Check}\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where {resourceGroup1Check} or {resourceGroup2Check}\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    | extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n    | where {nsgCheck}\r\n    | where {nsgRuleCheck}\r\n    // filter ends\r\n    | summarize totalHits = sum(iff('{nsgSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by NSGRule_s, NSGList_s\r\n    | top-nested of NSGList_s by max(1), top-nested 3 of NSGRule_s by max(totalHits)\r\n    | extend nsgRuleId = strcat(NSGList_s, '/', NSGRule_s);\r\nlet PriorityTable = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'Topology' and ResourceType == 'NetworkSecurityGroupRule'\r\n    | project nsgRuleId = strcat(Subscription_g, '/', Name_s), Priority_d\r\n    | distinct nsgRuleId, Priority_d;\r\nTopNSGRules\r\n| join kind=leftouter PriorityTable on ($left.nsgRuleId == $right.nsgRuleId)\r\n| summarize topRules = strcat_array(make_list(strcat(NSGRule_s, '(', tolong(Priority_d), ')')), ', ') by NSGList_s\r\n| project NSGList_s, topRules",
        "size": 1,
        "title": "Top rules NSG",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Top rules NSG"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s == 'MaliciousFlow'\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n| where {nsgCheck}\r\n| where {nsgRuleCheck}\r\n// filter ends\r\n| extend IpTalkingToMaliciousIP = iif(isnotempty(VM2_s), DestIP_s, SrcIP_s)\r\n| extend VmTalkingToMaliciousIP = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', VM2_s), strcat(Subscription1_g, '/', VM1_s))\r\n| summarize totalMalicious = sum(iff('{nsgSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, NSGList_s\r\n| top-nested of NSGList_s by max(1), top-nested 3 of ipInfo = strcat(IpTalkingToMaliciousIP, '(', split(VmTalkingToMaliciousIP, '/')[2], ')') by max(totalMalicious)\r\n| summarize topIpInfo = strcat_array(make_list(ipInfo), ', ') by NSGList_s\r\n| project NSGList_s, topIpInfo",
        "size": 1,
        "title": "Top malicious NSG",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "gridSettings": {
          "sortBy": [
            {
              "itemKey": "NSGList_s",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "NSGList_s",
            "sortOrder": 1
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Top malicious NSG"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"6e366483-5b48-4b21-8678-ec62e4f0a316\",\"mergeType\":\"outer\",\"leftTable\":\"Top talking NSG\",\"rightTable\":\"Top rules NSG\",\"leftColumn\":\"NSGList_s\",\"rightColumn\":\"NSGList_s\"},{\"id\":\"6e366483-5b48-4b21-8678-ec62e4f0a317\",\"mergeType\":\"outer\",\"leftTable\":\"Top talking NSG\",\"rightTable\":\"Top malicious NSG\",\"leftColumn\":\"NSGList_s\",\"rightColumn\":\"NSGList_s\"}],\"projectRename\":[{\"originalName\":\"[Top talking NSG].NSGList_s\",\"mergedName\":\"NSGList_s\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a316\"},{\"originalName\":\"[Top talking NSG].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a316\"},{\"originalName\":\"[Top rules NSG].NSGList_s\",\"mergedName\":\"NSGList_s1\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a316\"},{\"originalName\":\"[Top rules NSG].topRules\",\"mergedName\":\"topRules\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a316\"},{\"originalName\":\"[Top malicious NSG].NSGList_s\",\"mergedName\":\"NSGList_s2\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a317\"},{\"originalName\":\"[Top malicious NSG].topIpInfo\",\"mergedName\":\"topIpInfo\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a317\"}]}",
        "size": 0,
        "title": "Merge 3 top queries NSG",
        "queryType": 7
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Merge 3 top queries NSG"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\",\"mergeType\":\"leftouter\",\"leftTable\":\"Common NSG\",\"rightTable\":\"Merge 3 top queries NSG\",\"leftColumn\":\"NSGList_s\",\"rightColumn\":\"NSGList_s\"}],\"projectRename\":[{\"originalName\":\"[Common NSG].nsgName\",\"mergedName\":\"NSG name\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Merge 3 top queries NSG].topRules\",\"mergedName\":\"Top rules (priority)\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Merge 3 top queries NSG].topTalkingPairs\",\"mergedName\":\"Top talking pair\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Merge 3 top queries NSG].topIpInfo\",\"mergedName\":\"Top IPs talking to malicious IPs\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalHits\",\"mergedName\":\"Total hits\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalInbound\",\"mergedName\":\"Total inbound (allowed/blocked)\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundAllowedBenign\",\"mergedName\":\"Inbound allowed (benign/malicious)\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundBlockedBenign\",\"mergedName\":\"Inbound blocked (benign/malicious)\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutbound\",\"mergedName\":\"Total outbound (allowed/blocked)\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundAllowedBenign\",\"mergedName\":\"Outbound allowed (benign/malicious)\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundBlockedBenign\",\"mergedName\":\"Outbound blocked (benign/malicious)\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalAllowedInboundFlows\",\"mergedName\":\"totalAllowedInboundFlows\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalBlockedInboundFlows\",\"mergedName\":\"totalBlockedInboundFlows\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].NSGList_s\",\"mergedName\":\"NSGList_s\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalAllowedOutboundFlows\",\"mergedName\":\"totalAllowedOutboundFlows\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalBlockedOutboundFlows\",\"mergedName\":\"totalBlockedOutboundFlows\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousAllowedInboundFlows\",\"mergedName\":\"totalMaliciousAllowedInboundFlows\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousBlockedInboundFlows\",\"mergedName\":\"totalMaliciousBlockedInboundFlows\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousAllowedOutboundFlows\",\"mergedName\":\"totalMaliciousAllowedOutboundFlows\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousBlockedOutboundFlows\",\"mergedName\":\"totalMaliciousBlockedOutboundFlows\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalAllowedInboundBytes\",\"mergedName\":\"totalAllowedInboundBytes\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalBlockedInboundBytes\",\"mergedName\":\"totalBlockedInboundBytes\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalAllowedOutboundBytes\",\"mergedName\":\"totalAllowedOutboundBytes\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalBlockedOutboundBytes\",\"mergedName\":\"totalBlockedOutboundBytes\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousAllowedInboundBytes\",\"mergedName\":\"totalMaliciousAllowedInboundBytes\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousBlockedInboundBytes\",\"mergedName\":\"totalMaliciousBlockedInboundBytes\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousAllowedOutboundBytes\",\"mergedName\":\"totalMaliciousAllowedOutboundBytes\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousBlockedOutboundBytes\",\"mergedName\":\"totalMaliciousBlockedOutboundBytes\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalAllowedInboundPackets\",\"mergedName\":\"totalAllowedInboundPackets\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalBlockedInboundPackets\",\"mergedName\":\"totalBlockedInboundPackets\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalAllowedOutboundPackets\",\"mergedName\":\"totalAllowedOutboundPackets\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalBlockedOutboundPackets\",\"mergedName\":\"totalBlockedOutboundPackets\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousAllowedInboundPackets\",\"mergedName\":\"totalMaliciousAllowedInboundPackets\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousBlockedInboundPackets\",\"mergedName\":\"totalMaliciousBlockedInboundPackets\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousAllowedOutboundPackets\",\"mergedName\":\"totalMaliciousAllowedOutboundPackets\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalMaliciousBlockedOutboundPackets\",\"mergedName\":\"totalMaliciousBlockedOutboundPackets\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].TotalTraffic\",\"mergedName\":\"TotalTraffic\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Merge 3 top queries NSG].NSGList_s\",\"mergedName\":\"NSGList_s1\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Merge 3 top queries NSG].NSGList_s1\",\"mergedName\":\"NSGList_s11\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Merge 3 top queries NSG].NSGList_s2\",\"mergedName\":\"NSGList_s2\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a31c\"},{\"originalName\":\"[Common NSG].totalInboundAllowed\",\"mergedName\":\"totalInboundAllowed\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundBlocked\",\"mergedName\":\"totalInboundBlocked\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundAllowedMalicious\",\"mergedName\":\"totalInboundAllowedMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundBlockedMalicious\",\"mergedName\":\"totalInboundBlockedMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundAllowed\",\"mergedName\":\"totalOutboundAllowed\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundBlocked\",\"mergedName\":\"totalOutboundBlocked\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundAllowedMalicious\",\"mergedName\":\"totalOutboundAllowedMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundBlockedMalicious\",\"mergedName\":\"totalOutboundBlockedMalicious\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundAllowedFormatted\",\"mergedName\":\"totalInboundAllowedFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundBlockedFormatted\",\"mergedName\":\"totalInboundBlockedFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundFormatted\",\"mergedName\":\"totalInboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundAllowedBenignFormatted\",\"mergedName\":\"totalInboundAllowedBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundAllowedMaliciousFormatted\",\"mergedName\":\"totalInboundAllowedMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundBlockedBenignFormatted\",\"mergedName\":\"totalInboundBlockedBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalInboundBlockedMaliciousFormatted\",\"mergedName\":\"totalInboundBlockedMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundAllowedFormatted\",\"mergedName\":\"totalOutboundAllowedFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundBlockedFormatted\",\"mergedName\":\"totalOutboundBlockedFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundFormatted\",\"mergedName\":\"totalOutboundFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundAllowedBenignFormatted\",\"mergedName\":\"totalOutboundAllowedBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundAllowedMaliciousFormatted\",\"mergedName\":\"totalOutboundAllowedMaliciousFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundBlockedBenignFormatted\",\"mergedName\":\"totalOutboundBlockedBenignFormatted\",\"fromId\":\"unknown\"},{\"originalName\":\"[Common NSG].totalOutboundBlockedMaliciousFormatted\",\"mergedName\":\"totalOutboundBlockedMaliciousFormatted\",\"fromId\":\"unknown\"}]}",
        "size": 0,
        "title": "Details of top NSGs",
        "showExportToExcel": true,
        "queryType": 7,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "NSG name",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "Top rules (priority)",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "9%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "Top talking pair",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "9%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "Top IPs talking to malicious IPs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "9%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "Total inbound (allowed/blocked)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalInboundFormatted\"] ([\"totalInboundAllowedFormatted\"]/[\"totalInboundBlockedFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "totalInboundAllowed",
                      "color": "blue"
                    },
                    {
                      "columnName": "totalInboundBlocked",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "Inbound allowed (benign/malicious)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalInboundAllowedBenignFormatted\"]/[\"totalInboundAllowedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "Inbound allowed (benign/malicious)",
                      "color": "green"
                    },
                    {
                      "columnName": "totalInboundAllowedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "Inbound blocked (benign/malicious)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalInboundBlockedBenignFormatted\"]/[\"totalInboundBlockedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "Inbound blocked (benign/malicious)",
                      "color": "green"
                    },
                    {
                      "columnName": "totalInboundBlockedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "Total outbound (allowed/blocked)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalOutboundFormatted\"] ([\"totalOutboundAllowedFormatted\"]/[\"totalOutboundBlockedFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "totalOutboundAllowed",
                      "color": "blue"
                    },
                    {
                      "columnName": "totalOutboundBlocked",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "Outbound allowed (benign/malicious)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalOutboundAllowedBenignFormatted\"]/[\"totalOutboundAllowedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "Outbound allowed (benign/malicious)",
                      "color": "green"
                    },
                    {
                      "columnName": "totalOutboundAllowedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "Outbound blocked (benign/malicious)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"totalOutboundBlockedBenignFormatted\"]/[\"totalOutboundBlockedMaliciousFormatted\"]",
                  "columnSettings": [
                    {
                      "columnName": "Outbound blocked (benign/malicious)",
                      "color": "green"
                    },
                    {
                      "columnName": "totalOutboundBlockedMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "NSGList_s",
              "formatter": 5
            },
            {
              "columnMatch": "NSGList_s1",
              "formatter": 5
            },
            {
              "columnMatch": "NSGList_s11",
              "formatter": 5
            },
            {
              "columnMatch": "NSGList_s2",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowed",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlocked",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowed",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlocked",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundAllowedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalInboundBlockedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundAllowedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "totalOutboundBlockedMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "nsgName",
              "formatter": 5,
              "formatOptions": {
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "topRules",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "topTalkingPairs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "topIpInfo",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "9%"
              }
            },
            {
              "columnMatch": "totalHits",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "9%"
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true
        }
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "0"
      },
      "name": "Details of top NSGs"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "849868f8-8dc0-4327-a1bb-c560fa9ad376",
            "version": "KqlParameterItem/1.0",
            "name": "nsgRulesSortUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "label": "Sort using"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "parameters - 6"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f788d551-c65d-4ad2-85ad-740c91e73c39",
            "version": "KqlParameterItem/1.0",
            "name": "top5NSGRules",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n| where {nsgCheck}\r\n| where {nsgRuleCheck}\r\n// filter ends\r\n| extend traffic = iff('{nsgRulesSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgRulesSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))\r\n| summarize TotalTraffic = sum(traffic) by NSGList_s, NSGRule_s, FlowDirection_s\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| project value = completeNsgRule, label = completeNsgRule, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "parameters - 4"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| where completeNsgRule in~ ({top5NSGRules})\r\n// filter end\r\n| summarize sum(iff('{nsgRulesSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgRulesSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by completeNsgRule, todatetime(ceiling(FlowStartTime_t / {binningTime}) * {binningTime})",
        "size": 0,
        "showAnalytics": true,
        "title": "Time trending chart for hits of NSG rules",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "showPin": true,
      "name": "Time trending chart for hits of NSG rules"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "c2f3ed12-7885-4ab0-806a-3863bc763e7c",
            "version": "KqlParameterItem/1.0",
            "name": "nsgRulesDisplayUnit",
            "type": 2,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "label": "Display Unit"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "parameters - 11"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' {thousandUnit}'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' {millionUnit}'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' {billionUnit}'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' {trillionUnit}'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' {quadrillionUnit}'))))))\r\n};\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n| where {nsgCheck}\r\n| where {nsgRuleCheck}\r\n// filter ends\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow'), isBlocked  = (FlowStatus_s == 'D')\r\n| extend Flows = tolong(AllowedInFlows_d + DeniedInFlows_d + AllowedOutFlows_d + DeniedOutFlows_d)\r\n| extend MaliciousAllowedFlows = iif(isMaliciousFlow and not(isBlocked), Flows, 0), MaliciousBlockedFlows = iif(isMaliciousFlow and isBlocked, Flows, 0)\r\n| extend Bytes = tolong(InboundBytes_d + OutboundBytes_d)\r\n| extend MaliciousAllowedBytes = iif(isMaliciousFlow and not(isBlocked), Bytes, 0), MaliciousBlockedBytes = iif(isMaliciousFlow and isBlocked, Bytes, 0)\r\n| extend Packets = tolong(InboundPackets_d + OutboundPackets_d)\r\n| extend MaliciousAllowedPackets = iif(isMaliciousFlow and not(isBlocked), Packets, 0), MaliciousBlockedPackets = iif(isMaliciousFlow and isBlocked, Packets, 0)\r\n| summarize \r\ntotalMaliciousAllowedFlows = sum(MaliciousAllowedFlows), totalMaliciousBlockedFlows = sum(MaliciousBlockedFlows), TotalFlows = sum(Flows),\r\ntotalMaliciousAllowedBytes = sum(MaliciousAllowedBytes), totalMaliciousBlockedBytes = sum(MaliciousBlockedBytes), TotalBytes = sum(Bytes),\r\ntotalMaliciousAllowedPackets = sum(MaliciousAllowedPackets), totalMaliciousBlockedPackets = sum(MaliciousBlockedPackets), TotalPackets = sum(Packets),\r\nTotalTrafficSorting = sum(iff('{nsgRulesSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgRulesSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))),\r\nTotalTrafficDisplay = sum(iff('{nsgRulesDisplayUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgRulesDisplayUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d))))\r\nby completeNsgRule, FlowDirection_s, FlowStatus_s\r\n| where TotalTrafficSorting > 0\r\n| sort by TotalTrafficSorting desc\r\n| project \r\nruleName = split(completeNsgRule, '/')[3],\r\naccessPriority = iff(FlowStatus_s == 'A', 'Allow', iff(FlowStatus_s == 'D', 'Deny', '')),\r\nruleType = iff(FlowDirection_s == 'I', 'Inbound', iff(FlowDirection_s == 'O', 'Outbound', '')),\r\nnsg = split(completeNsgRule, '/')[2],\r\nhits = iff('{nsgRulesDisplayUnit:value}' =~ 'bytes', format_bytes(TotalTrafficDisplay, 3), ValueWithUnit(TotalTrafficDisplay, 3)),\r\nMaliciousAllowedDenied = strcat(iff('{nsgRulesDisplayUnit:value}' =~ 'bytes', format_bytes(totalMaliciousAllowedBytes, 3), iff('{nsgRulesDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalMaliciousAllowedPackets, 3), ValueWithUnit(totalMaliciousAllowedFlows, 3))), '/', iff('{nsgRulesDisplayUnit:value}' =~ 'bytes', format_bytes(totalMaliciousBlockedBytes, 3), iff('{nsgRulesDisplayUnit:value}' =~ 'packets', ValueWithUnit(totalMaliciousBlockedPackets, 3), ValueWithUnit(totalMaliciousBlockedFlows, 3)))),\r\ncompleteNsgRule",
        "size": 0,
        "title": "Common NSG Rule",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Common NSG Rule"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s == 'MaliciousFlow'\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n| where {nsgCheck}\r\n| where {nsgRuleCheck}\r\n// filter ends\r\n| extend IpTalkingToMaliciousIP = iif(isnotempty(VM2_s), DestIP_s, SrcIP_s)\r\n| extend VmTalkingToMaliciousIP = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', VM2_s), strcat(Subscription1_g, '/', VM1_s))\r\n| summarize totalMalicious = sum(iff('{nsgRulesSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgRulesSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by IpTalkingToMaliciousIP, VmTalkingToMaliciousIP, completeNsgRule\r\n| top-nested of completeNsgRule by max(1), top-nested 3 of ipInfo = strcat(IpTalkingToMaliciousIP, '(', split(VmTalkingToMaliciousIP, '/')[2], ')') by max(totalMalicious)\r\n| summarize topIpInfo = strcat_array(make_list(ipInfo), ', ') by completeNsgRule\r\n| project completeNsgRule, topIpInfo",
        "size": 1,
        "title": "Top malicious NSG Rules",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Top malicious NSG Rules"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n| where {nsgCheck}\r\n| where {nsgRuleCheck}\r\n// filter ends\r\n| where not(IsFlowCapturedAtUDRHop_b)\r\n| extend NIC = iif(FlowDirection_s == 'O', NIC1_s, NIC2_s)\r\n| summarize totalTraffic = sum(iff('{nsgRulesSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgRulesSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by NIC, completeNsgRule\r\n| top-nested of completeNsgRule by max(1), top-nested 3 of nsgInfo = tostring(split(NIC, '/')[1]) by max(totalTraffic)\r\n| summarize topNsgInfo = strcat_array(make_list(nsgInfo), ', ') by completeNsgRule\r\n| project completeNsgRule, topNsgInfo",
        "size": 1,
        "title": "Top talking nsgs NSG Rules",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Top talking nsgs NSG Rules"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n| extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n| where {nsgCheck}\r\n| where {nsgRuleCheck}\r\n// filter ends\r\n| where not(IsFlowCapturedAtUDRHop_b)\r\n| extend Subnet = iif(FlowDirection_s == 'O', Subnet1_s, Subnet2_s)\r\n| summarize totalTraffic = sum(iff('{nsgRulesSortUnit:value}' =~ 'bytes', tolong(InboundBytes_d + OutboundBytes_d), iff('{nsgRulesSortUnit:value}' =~ 'packets', tolong(InboundPackets_d + OutboundPackets_d), tolong(AllowedInFlows_d + AllowedOutFlows_d + DeniedInFlows_d + DeniedOutFlows_d)))) by Subnet, completeNsgRule\r\n| top-nested of completeNsgRule by max(1), top-nested 3 of subnetInfo = tostring(split(Subnet, '/')[2]) by max(totalTraffic)\r\n| summarize topSubnetInfo = strcat_array(make_list(subnetInfo), ', ') by completeNsgRule\r\n| project completeNsgRule, topSubnetInfo\r\n",
        "size": 1,
        "title": "Top subnets NSG Rules",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Top subnets NSG Rules"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let chatTable = AzureNetworkAnalytics_CL\r\n    | where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n    // filter begins\r\n    | where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n    | where {subscription1Check} or {subscription2Check}\r\n    | extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n    | extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n    | where {resourceGroup1Check} or {resourceGroup2Check}\r\n    | extend completeNsgRule = strcat(NSGList_s, '/', NSGRule_s)\r\n    | extend nsgToCheck = split(completeNsgRule, '/')[2], nsgRuleToCheck = split(completeNsgRule, '/')[3]\r\n    | where {nsgCheck}\r\n    | where {nsgRuleCheck}\r\n    // filter ends\r\n    | extend flowCount = tolong(AllowedInFlows_d + DeniedInFlows_d + AllowedOutFlows_d + DeniedOutFlows_d), byteCount = tolong(InboundBytes_d + OutboundBytes_d), packetCount = tolong(InboundPackets_d + OutboundPackets_d)\r\n    | extend SourceHost = iif(isnotempty(VM1_s), strcat(Subscription1_g, '/', VM1_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | extend DestinationHost = iif(isnotempty(VM2_s), strcat(Subscription2_g, '/', VM2_s), iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s))\r\n    | mv-expand SrcIP = iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' '))\r\n    | mv-expand DestIP = iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' '))\r\n    | extend SrcIP = tostring(split(SrcIP, '|')[0]), DestIP = tostring(split(DestIP, '|')[0])\r\n    | where isnotempty(strcat(SrcIP, SourceHost)) and isnotempty(strcat(DestIP, DestinationHost))\r\n    | summarize totalFlow = sum(flowCount), totalByte = sum(byteCount), totalPacket = sum(packetCount) by SrcIP, SourceHost, DestIP, DestinationHost, completeNsgRule;\r\nlet chatTableWithRownumber = chatTable\r\n    | extend rowIdentity = strcat(SourceHost, '/', SrcIP, '_', DestinationHost, '/', DestIP)\r\n    | extend rownHash = hash(rowIdentity);\r\nchatTableWithRownumber\r\n| join kind = leftouter (chatTableWithRownumber)                      on $left.SrcIP == $right.DestIP and $left.DestIP == $right.SrcIP and $left.SourceHost == $right.DestinationHost and $left.DestinationHost == $right.SourceHost and $left.completeNsgRule == $right.completeNsgRule\r\n| where isnull(rownHash1) or (rownHash < rownHash1)\r\n| extend totalFlowRightTable = iif(isnull(totalFlow1), toint(0), toint(totalFlow1))\r\n| extend totalByteRightTable = iif(isnull(totalByte1), toint(0), toint(totalByte1))\r\n| extend totalPacketRightTable = iif(isnull(totalPacket1), toint(0), toint(totalPacket1))\r\n| project SrcIP, SourceHost, DestIP, DestinationHost, finalTotalTraffic = iff('{nsgRulesSortUnit:value}' =~ 'bytes', tolong(totalByte + totalByteRightTable), iff('{nsgRulesSortUnit:value}' =~ 'packets', tolong(totalPacket + totalPacketRightTable), tolong(totalFlow + totalFlowRightTable))), completeNsgRule\r\n| top-nested of completeNsgRule by max(1), top-nested 3 of pairInfo = strcat(SrcIP, '#', SourceHost, '#', DestIP, '#', DestinationHost) by max(finalTotalTraffic)\r\n| summarize topTalkingPairs = strcat_array(make_list(strcat(split(pairInfo, '#')[0],' - ', split(pairInfo, '#')[2])), ', ') by completeNsgRule\r\n| project completeNsgRule, topTalkingPairs",
        "size": 1,
        "title": "Top talking pairs NSG Rules",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Top talking pairs NSG Rules"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"6e366483-5b48-4b21-8678-ec62e4f0a349\",\"mergeType\":\"outer\",\"leftTable\":\"Top talking pairs NSG Rules\",\"rightTable\":\"Top subnets NSG Rules\",\"leftColumn\":\"completeNsgRule\",\"rightColumn\":\"completeNsgRule\"},{\"id\":\"6e366483-5b48-4b21-8678-ec62e4f0a34a\",\"mergeType\":\"outer\",\"leftTable\":\"Top talking pairs NSG Rules\",\"rightTable\":\"Top talking nsgs NSG Rules\",\"leftColumn\":\"completeNsgRule\",\"rightColumn\":\"completeNsgRule\"},{\"id\":\"6e366483-5b48-4b21-8678-ec62e4f0a34b\",\"mergeType\":\"outer\",\"leftTable\":\"Top talking pairs NSG Rules\",\"rightTable\":\"Top malicious NSG Rules\",\"leftColumn\":\"completeNsgRule\",\"rightColumn\":\"completeNsgRule\"}],\"projectRename\":[{\"originalName\":\"[Top talking pairs NSG Rules].completeNsgRule\",\"mergedName\":\"completeNsgRule\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a349\"},{\"originalName\":\"[Top talking pairs NSG Rules].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a349\"},{\"originalName\":\"[Top subnets NSG Rules].completeNsgRule\",\"mergedName\":\"completeNsgRule1\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a349\"},{\"originalName\":\"[Top subnets NSG Rules].topSubnetInfo\",\"mergedName\":\"topSubnetInfo\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a349\"},{\"originalName\":\"[Top talking nsgs NSG Rules].completeNsgRule\",\"mergedName\":\"completeNsgRule\",\"fromId\":\"unknown\"},{\"originalName\":\"[Top talking nsgs NSG Rules].topNsgInfo\",\"mergedName\":\"topNsgInfo\",\"fromId\":\"unknown\"},{\"originalName\":\"[Top malicious NSG Rules].completeNsgRule\",\"mergedName\":\"completeNsgRule\",\"fromId\":\"unknown\"},{\"originalName\":\"[Top malicious NSG Rules].topIpInfo\",\"mergedName\":\"topIpInfo\",\"fromId\":\"unknown\"}]}",
        "size": 0,
        "title": "Merge 4 Top queries NSG Rules",
        "queryType": 7
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Merge 4 Top queries NSG Rules"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\",\"mergeType\":\"leftouter\",\"leftTable\":\"Common NSG Rule\",\"rightTable\":\"Merge 4 Top queries NSG Rules\",\"leftColumn\":\"completeNsgRule\",\"rightColumn\":\"completeNsgRule\"}],\"projectRename\":[{\"originalName\":\"[Common NSG Rule].ruleName\",\"mergedName\":\"Rule name\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Common NSG Rule].accessPriority\",\"mergedName\":\"Access/Priority\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Common NSG Rule].ruleType\",\"mergedName\":\"Rule type\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Common NSG Rule].nsg\",\"mergedName\":\"NSG\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Merge 4 Top queries NSG Rules].topTalkingPairs\",\"mergedName\":\"Top talking pair\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Merge 4 Top queries NSG Rules].topSubnetInfo\",\"mergedName\":\"Top Associated subnets\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Merge 4 Top queries NSG Rules].topNsgInfo\",\"mergedName\":\"Top Associated network interfaces\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Common NSG Rule].hits\",\"mergedName\":\"Hits\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Merge 4 Top queries NSG Rules].topIpInfo\",\"mergedName\":\"Top IPs talking to malicious IPs\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Common NSG Rule].MaliciousAllowedDenied\",\"mergedName\":\"Malicious (Allowed/Denied)\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Common NSG Rule].completeNsgRule\",\"mergedName\":\"completeNsgRule\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Merge 4 Top queries NSG Rules].completeNsgRule\",\"mergedName\":\"completeNsgRule1\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Merge 4 Top queries NSG Rules].completeNsgRule1\",\"mergedName\":\"completeNsgRule11\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Merge 4 Top queries NSG Rules].completeNsgRule2\",\"mergedName\":\"completeNsgRule2\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"},{\"originalName\":\"[Merge 4 Top queries NSG Rules].completeNsgRule3\",\"mergedName\":\"completeNsgRule3\",\"fromId\":\"6e366483-5b48-4b21-8678-ec62e4f0a351\"}]}",
        "size": 0,
        "title": "Details of top NSG rules without Priority",
        "showExportToExcel": true,
        "queryType": 7,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "completeNsgRule",
              "formatter": 1
            },
            {
              "columnMatch": "completeNsgRule1",
              "formatter": 5
            },
            {
              "columnMatch": "completeNsgRule11",
              "formatter": 5
            },
            {
              "columnMatch": "completeNsgRule2",
              "formatter": 5
            },
            {
              "columnMatch": "completeNsgRule3",
              "formatter": 5
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Details of top NSG rules without Priority"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\",\"mergeType\":\"leftouter\",\"leftTable\":\"Details of top NSG rules without Priority\",\"rightTable\":\"NSG Rule Prioirty Table\",\"leftColumn\":\"completeNsgRule\",\"rightColumn\":\"nsgRuleId\"}],\"projectRename\":[{\"originalName\":\"[Details of top NSG rules without Priority].Rule name\",\"mergedName\":\"Rule name\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].Access/Priority\",\"mergedName\":\"Access/Priority\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].Rule type\",\"mergedName\":\"Rule type\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].NSG\",\"mergedName\":\"NSG\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].Top talking pair\",\"mergedName\":\"Top talking pair\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].Top Associated subnets\",\"mergedName\":\"Top Associated subnets\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].Top Associated network interfaces\",\"mergedName\":\"Top Associated network interfaces\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].Hits\",\"mergedName\":\"Hits\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].Top IPs talking to malicious IPs\",\"mergedName\":\"Top IPs talking to malicious IPs\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].Malicious (Allowed/Denied)\",\"mergedName\":\"Malicious (Allowed/Denied)\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].completeNsgRule\",\"mergedName\":\"completeNsgRule\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].completeNsgRule1\",\"mergedName\":\"completeNsgRule1\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[Details of top NSG rules without Priority].completeNsgRule11\",\"mergedName\":\"completeNsgRule11\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[NSG Rule Prioirty Table].nsgRuleId\",\"mergedName\":\"nsgRuleId\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"},{\"originalName\":\"[NSG Rule Prioirty Table].Priority_d\",\"mergedName\":\"Priority_d\",\"fromId\":\"cb653064-a6cd-4a3e-86c8-38129cf30526\"}]}",
        "size": 0,
        "title": "Details of top 5 NSG rules",
        "showExportToExcel": true,
        "queryType": 7,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Rule name",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "Access/Priority",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"Access/Priority\"]/[\"Priority_d\"]",
                  "columnSettings": []
                },
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "Rule type",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "NSG",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "Top talking pair",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "Top Associated subnets",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "Top Associated network interfaces",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "Hits",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "Top IPs talking to malicious IPs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                },
                "emptyValCustomText": "-"
              }
            },
            {
              "columnMatch": "Malicious (Allowed/Denied)",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "10%"
              }
            },
            {
              "columnMatch": "completeNsgRule",
              "formatter": 5
            },
            {
              "columnMatch": "completeNsgRule1",
              "formatter": 5
            },
            {
              "columnMatch": "completeNsgRule11",
              "formatter": 5
            },
            {
              "columnMatch": "nsgRuleId",
              "formatter": 5
            },
            {
              "columnMatch": "Priority_d",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true
        }
      },
      "conditionalVisibility": {
        "parameterName": "tabSelected",
        "comparison": "isEqualTo",
        "value": "1"
      },
      "name": "Details of top 5 NSG rules"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}