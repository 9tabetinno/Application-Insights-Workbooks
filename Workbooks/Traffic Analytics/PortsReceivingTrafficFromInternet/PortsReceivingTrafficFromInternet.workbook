{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time interval",
            "type": 4,
            "description": "Select time interval to get data",
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "042c4aca-7514-4fe0-852a-55bf59b7f0ab",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalFlowLogCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "id": "53f8d464-cc4e-4906-86e7-3c90800ed609",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalTopologyCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))), TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))))"
                }
              }
            ]
          },
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::all"
            ],
            "value": "/subscriptions/af15e575-f948-49ac-bce0-252d028e9379/resourcegroups/canaryomsresourcegroup/providers/microsoft.operationalinsights/workspaces/canaryws1",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptions",
            "label": "Discovered Subscriptions",
            "type": 2,
            "description": "NSGs in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n//| where {timeIntervalTopologyCheck}\r\n| where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'\r\n| distinct Subscription_g, SubscriptionName_s\r\n| project Subscription_g, SubscriptionName_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a16ef52-9f5d-459b-987e-0b75297860ad",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionsCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions}))"
                }
              }
            ]
          },
          {
            "id": "d2028f10-9c63-499c-947d-08eb9a41121d",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroups",
            "label": "Resource groups",
            "type": 2,
            "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n//| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection')\r\n| where {subscriptionsCheck}\r\n| project rgName = tostring(split(Name_s,'/')[0]), Subscription_g\r\n| distinct rgName, Subscription_g\r\n| project value = rgName, label = rgName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "96e71097-a8c9-4b64-903c-26a51bac174c",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupsCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))"
                }
              }
            ]
          },
          {
            "id": "282d8918-3c0c-43a0-aa36-6c14c3f5be79",
            "version": "KqlParameterItem/1.0",
            "name": "vnets",
            "label": "VNet",
            "type": 2,
            "description": "Select one or more virtual networks",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n//| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualNetwork'\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck} \r\n| project vnetId = strcat(Subscription_g, '/', Name_s )\r\n| distinct vnetId\r\n| project vnetName = tostring(split(vnetId, '/')[2])\r\n| project value = vnetName, label = vnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8bee622a-1e58-404f-aee1-a8c310411e87",
            "version": "KqlParameterItem/1.0",
            "name": "subnets",
            "label": "Subnet",
            "type": 2,
            "description": "Select one or more subnets",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n//| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualSubnetwork'\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| project subnetId = strcat(Subscription_g, '/', Name_s)\r\n| distinct subnetId\r\n| project subnetName = tostring(split(subnetId, '/')[3])\r\n| project value = subnetName, label = subnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 2"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "46fdbc80-975e-40ec-810b-bf7118ff3420",
            "version": "KqlParameterItem/1.0",
            "name": "subscription1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription1_g in~ ({subscriptions}))"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "c5d7e5b2-58c2-441f-9bcd-d82c38c9501c",
            "version": "KqlParameterItem/1.0",
            "name": "subscription2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription2_g in~ ({subscriptions}))"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "a3b54f25-1e18-4e33-9582-0a7d0cb600ce",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroup1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rg1ToCheck in~ ({resourceGroups})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "739e4291-4a53-46b4-8348-ce2bc4cc1ee1",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroup2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rg2ToCheck in~ ({resourceGroups})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "f31c23e9-d4e4-4c08-909c-5131d3f987a4",
            "version": "KqlParameterItem/1.0",
            "name": "vnet1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{vnets}\" == \"'*'\", true, vnet1ToCheck in~ ({vnets})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "d6fd78ee-4d6b-4cd3-9d99-896a5e080db1",
            "version": "KqlParameterItem/1.0",
            "name": "vnet2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{vnets}\" == \"'*'\", true, vnet2ToCheck in~ ({vnets})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "99e9b8b2-4cb9-4a1f-bc3a-e79d4a517f63",
            "version": "KqlParameterItem/1.0",
            "name": "subnet1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subnets}\" == \"'*'\", true, subnet1ToCheck in~ ({subnets})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "9be8b051-3218-42ce-a696-a07bab5a1a34",
            "version": "KqlParameterItem/1.0",
            "name": "subnet2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subnets}\" == \"'*'\", true, subnet2ToCheck in~ ({subnets})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "Checks"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "dabc4246-36f7-48e8-9a80-639ae1042289",
            "version": "KqlParameterItem/1.0",
            "name": "tcpTopDestIP",
            "type": 2,
            "multiSelect": true,
            "quote": "",
            "delimiter": ", ",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n// filter ends\r\n| where isnotempty(VM2_s) and L4Protocol_s == 'T' and AllowedInFlows_d > 0\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| summarize sum(AllowedInFlows_d) by DestIP_s, L7Protocol_s, DestPort_d\r\n| top 3 by sum_AllowedInFlows_d\r\n| project value = DestIP_s, label = DestIP_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "80bef17c-86d7-47d6-9c97-c348263e9c16",
            "version": "KqlParameterItem/1.0",
            "name": "tcpTopProtocols",
            "type": 2,
            "multiSelect": true,
            "quote": "",
            "delimiter": ", ",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n// filter ends\r\n| where isnotempty(VM2_s) and L4Protocol_s == 'T' and AllowedInFlows_d > 0\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| summarize sum(AllowedInFlows_d) by DestIP_s, L7Protocol_s, DestPort_d\r\n| top 3 by sum_AllowedInFlows_d\r\n| project value = L7Protocol_s, label = L7Protocol_s, selected = 1\r\n| distinct value, label, selected",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "212db6b2-580d-4642-8203-0324c2297fbd",
            "version": "KqlParameterItem/1.0",
            "name": "tcpTopPorts",
            "type": 2,
            "multiSelect": true,
            "quote": "",
            "delimiter": ", ",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n// filter ends\r\n| where isnotempty(VM2_s) and L4Protocol_s == 'T' and AllowedInFlows_d > 0\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| summarize sum(AllowedInFlows_d) by DestIP_s, L7Protocol_s, DestPort_d\r\n| top 3 by sum_AllowedInFlows_d\r\n| project value = DestPort_d, label = DestPort_d, selected = 1\r\n| distinct value, label, selected",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "5bdd57ca-75a3-4d96-bb17-3568b18cd674",
            "version": "KqlParameterItem/1.0",
            "name": "udpTopDestIP",
            "type": 2,
            "multiSelect": true,
            "quote": "",
            "delimiter": ", ",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n// filter ends\r\n| where isnotempty(VM2_s) and L4Protocol_s == 'U' and AllowedInFlows_d > 0\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| summarize sum(AllowedInFlows_d) by DestIP_s, L7Protocol_s, DestPort_d\r\n| top 3 by sum_AllowedInFlows_d\r\n| project value = DestIP_s, label = DestIP_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": null
          },
          {
            "id": "f5bfafc3-2d09-4842-896a-e73014a5a26b",
            "version": "KqlParameterItem/1.0",
            "name": "udpTopProtocols",
            "type": 2,
            "multiSelect": true,
            "quote": "",
            "delimiter": ", ",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n// filter ends\r\n| where isnotempty(VM2_s) and L4Protocol_s == 'U' and AllowedInFlows_d > 0\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| summarize sum(AllowedInFlows_d) by DestIP_s, L7Protocol_s, DestPort_d\r\n| top 3 by sum_AllowedInFlows_d\r\n| project value = L7Protocol_s, label = L7Protocol_s, selected = 1\r\n| distinct value, label, selected",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": null
          },
          {
            "id": "0415403d-2446-4cee-a2c6-ef5d10f8c4fe",
            "version": "KqlParameterItem/1.0",
            "name": "udpTopPorts",
            "type": 2,
            "multiSelect": true,
            "quote": "",
            "delimiter": ", ",
            "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n// filter ends\r\n| where isnotempty(VM2_s) and L4Protocol_s == 'U' and AllowedInFlows_d > 0\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| summarize sum(AllowedInFlows_d) by DestIP_s, L7Protocol_s, DestPort_d\r\n| top 3 by sum_AllowedInFlows_d\r\n| project value = DestPort_d, label = DestPort_d, selected = 1\r\n| distinct value, label, selected",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces",
            "value": null
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 7"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "datatable (id:int)[0, 1]\r\n| extend\r\nL4Protocol = iff(id == 0, 'TCP', 'UDP'),\r\nTopPorts = iff(id == 0, '{tcpTopPorts}', '{udpTopPorts}'),\r\nTopL7Protocols = iff(id == 0, '{tcpTopProtocols}', '{udpTopProtocols}'),\r\nTopDestIP = iff(id == 0, '{tcpTopDestIP}', '{udpTopDestIP}')",
        "size": 4,
        "title": "table1",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "table1"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' T'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' Q'))))))\r\n};\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s in ('ExternalPublic', 'AzurePublic', 'MaliciousFlow')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n// filter ends\r\n| where isnotempty(VM2_s) and L4Protocol_s in~ ('T', 'U') and AllowedInFlows_d > 0\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| summarize \r\nallowedInboundFlow = ValueWithUnit(sum(AllowedInFlows_d), 3), \r\nallowedInboundBytes = format_bytes(sum(AllowedInboundBytesAtDest), 3), \r\nallowedOutboundBytes = format_bytes(sum(AllowedOutboundBytesAtDest), 3), \r\nallowedInboundPackets = ValueWithUnit(sum(AllowedInboundPacketsAtDest), 3), \r\nallowedOutboundPackets = ValueWithUnit(sum(AllowedOutboundPacketsAtDest), 3)\r\nby L4Protocol_s\r\n| extend id = iff(L4Protocol_s == 'T', 0, 1)",
        "size": 4,
        "title": "getSumOfAllowedInflowsForTCP",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "timeInterval",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "getSumOfAllowedInflowsForCombined"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\",\"mergeType\":\"leftouter\",\"leftTable\":\"table1\",\"rightTable\":\"getSumOfAllowedInflowsForCombined\",\"leftColumn\":\"id\",\"rightColumn\":\"id\"}],\"projectRename\":[{\"originalName\":\"[table1].id\",\"mergedName\":\"id\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[table1].L4Protocol\",\"mergedName\":\"L4 Protocols\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[table1].TopPorts\",\"mergedName\":\"Ports\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[table1].TopL7Protocols\",\"mergedName\":\"Top L7 Protocols\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[table1].TopDestIP\",\"mergedName\":\"Top Azure destination IPs\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[getSumOfAllowedInflowsForCombined].L4Protocol_s\",\"mergedName\":\"L4Protocol_s\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[getSumOfAllowedInflowsForCombined].allowedInboundFlow\",\"mergedName\":\"Allowed flows\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[getSumOfAllowedInflowsForCombined].allowedInboundBytes\",\"mergedName\":\"Allowed Inbound Bytes\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[getSumOfAllowedInflowsForCombined].allowedOutboundBytes\",\"mergedName\":\"Allowed Outbound Bytes\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[getSumOfAllowedInflowsForCombined].allowedInboundPackets\",\"mergedName\":\"Allowed Inbound Packets\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[getSumOfAllowedInflowsForCombined].allowedOutboundPackets\",\"mergedName\":\"Allowed Outbound Packets\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"},{\"originalName\":\"[getSumOfAllowedInflowsForCombined].id\",\"mergedName\":\"id1\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef78d22\"}]}",
        "size": 4,
        "title": "Details for Azure destination ports",
        "showExportToExcel": true,
        "queryType": 7,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "id",
              "formatter": 5
            },
            {
              "columnMatch": "L4Protocol",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "TopPorts",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "TopL7Protocols",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "TopDestIP",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "2fr"
              }
            },
            {
              "columnMatch": "L4Protocol_s",
              "formatter": 5,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedInboundFlow",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedInboundBytes",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedOutboundBytes",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedInboundPackets",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedOutboundPackets",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "id1",
              "formatter": 5
            }
          ],
          "rowLimit": 10000,
          "filter": true
        }
      },
      "name": "Details for Azure destination ports"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' T'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' Q'))))))\r\n};\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n// filter ends\r\n| where isnotempty(VM2_s) and L4Protocol_s == 'T' and AllowedInFlows_d > 0\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| summarize \r\nallowedInboundFlow = ValueWithUnit(sum(AllowedInFlows_d), 3), \r\nallowedInboundBytes = format_bytes(sum(AllowedInboundBytesAtDest), 3), \r\nallowedOutboundBytes = format_bytes(sum(AllowedOutboundBytesAtDest), 3), \r\nallowedInboundPackets = ValueWithUnit(sum(AllowedInboundPacketsAtDest), 3), \r\nallowedOutboundPackets = ValueWithUnit(sum(AllowedOutboundPacketsAtDest), 3)\r\nby DestIP_s, Subnet2_s, L7Protocol_s, DestPort_d, VM2_s, Subscription2_g\r\n| top 3 by allowedInboundFlow\r\n| project DestIP_s, VM = split(VM2_s, '/')[1], Subnet = split(Subnet2_s, '/')[2], VNet = split(Subnet2_s, '/')[1], DestPort_d, L7Protocol_s, allowedInboundFlow, allowedInboundBytes, allowedOutboundBytes, allowedInboundPackets, allowedOutboundPackets, Subscription2_g, resourceGroup = split(Subnet2_s, '/')[0]",
        "size": 1,
        "title": "Details for Azure destination IPs opened for TCP traffic",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "DestIP_s",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "VM",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "Subnet",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "VNet",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "DestPort_d",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "L7Protocol_s",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedInboundFlow",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedInboundBytes",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedOutboundBytes",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedInboundPackets",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedOutboundPackets",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "Subscription2_g",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": null,
                "showIcon": true,
                "customColumnWidthSetting": "2fr"
              }
            },
            {
              "columnMatch": "resourceGroup",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "labelSettings": [
            {
              "columnId": "DestIP_s",
              "label": "Azure destination host IP"
            },
            {
              "columnId": "VM",
              "label": "Azure destination host VM"
            },
            {
              "columnId": "DestPort_d",
              "label": "Port"
            },
            {
              "columnId": "L7Protocol_s",
              "label": "L7 Protocol"
            },
            {
              "columnId": "allowedInboundFlow",
              "label": "Allowed flows"
            },
            {
              "columnId": "allowedInboundBytes",
              "label": "Allowed Inbound Bytes"
            },
            {
              "columnId": "allowedOutboundBytes",
              "label": "Allowed Outbound Bytes"
            },
            {
              "columnId": "allowedInboundPackets",
              "label": "Allowed Inbound Packets"
            },
            {
              "columnId": "allowedOutboundPackets",
              "label": "Allowed Outbound Packets"
            },
            {
              "columnId": "Subscription2_g",
              "label": "Subscription"
            },
            {
              "columnId": "resourceGroup",
              "label": "Resource group"
            }
          ]
        }
      },
      "showPin": true,
      "name": "Details for Azure destination IPs opened for TCP traffic"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' T'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' Q'))))))\r\n};\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where FlowType_s in ('ExternalPublic', 'MaliciousFlow', 'AzurePublic')\r\n// filter begins\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n// filter ends\r\n| where isnotempty(VM2_s) and L4Protocol_s == 'U' and AllowedInFlows_d > 0\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| summarize \r\nallowedInboundFlow = ValueWithUnit(sum(AllowedInFlows_d), 3), \r\nallowedInboundBytes = format_bytes(sum(AllowedInboundBytesAtDest), 3), \r\nallowedOutboundBytes = format_bytes(sum(AllowedOutboundBytesAtDest), 3), \r\nallowedInboundPackets = ValueWithUnit(sum(AllowedInboundPacketsAtDest), 3), \r\nallowedOutboundPackets = ValueWithUnit(sum(AllowedOutboundPacketsAtDest), 3)\r\nby DestIP_s, Subnet2_s, L7Protocol_s, DestPort_d, VM2_s, Subscription2_g\r\n| top 3 by allowedInboundFlow\r\n| project DestIP_s, VM = split(VM2_s, '/')[1], Subnet = split(Subnet2_s, '/')[2], VNet = split(Subnet2_s, '/')[1], DestPort_d, L7Protocol_s, allowedInboundFlow, allowedInboundBytes, allowedOutboundBytes, allowedInboundPackets, allowedOutboundPackets, Subscription2_g, resourceGroup = split(Subnet2_s, '/')[0]",
        "size": 1,
        "showAnalytics": true,
        "title": "Details for Azure destination IPs opened for UDP traffic",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "DestIP_s",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "VM",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "Subnet",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "VNet",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "DestPort_d",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "L7Protocol_s",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedInboundFlow",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedInboundBytes",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedOutboundBytes",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedInboundPackets",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "allowedOutboundPackets",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "Subscription2_g",
              "formatter": 15,
              "formatOptions": {
                "linkTarget": null,
                "showIcon": true,
                "customColumnWidthSetting": "2fr"
              }
            },
            {
              "columnMatch": "resourceGroup",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            }
          ],
          "labelSettings": [
            {
              "columnId": "DestIP_s",
              "label": "Azure destination host IP"
            },
            {
              "columnId": "VM",
              "label": "Azure destination host VM"
            },
            {
              "columnId": "Subnet"
            },
            {
              "columnId": "VNet"
            },
            {
              "columnId": "DestPort_d",
              "label": "Ports"
            },
            {
              "columnId": "L7Protocol_s",
              "label": "L7 Protocol"
            },
            {
              "columnId": "allowedInboundFlow",
              "label": "Allowed flows"
            },
            {
              "columnId": "allowedInboundBytes",
              "label": "Allowed Inbound Bytes"
            },
            {
              "columnId": "allowedOutboundBytes",
              "label": "Allowed Outbound Bytes"
            },
            {
              "columnId": "allowedInboundPackets",
              "label": "Allowed Inbound Packets"
            },
            {
              "columnId": "allowedOutboundPackets",
              "label": "Allowed Outbound Packets"
            },
            {
              "columnId": "Subscription2_g",
              "label": "Subscription"
            },
            {
              "columnId": "resourceGroup",
              "label": "Resource group"
            }
          ]
        }
      },
      "showPin": true,
      "name": "Details for Azure destination IPs opened for UDP traffic"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}