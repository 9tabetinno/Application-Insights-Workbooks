{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "f79d5185-6941-488e-a728-3beaec49f9d4",
            "version": "KqlParameterItem/1.0",
            "name": "timeInterval",
            "label": "Time interval",
            "type": 4,
            "description": "Select time interval to get data",
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2592000000
                }
              ],
              "allowCustom": true
            }
          },
          {
            "id": "042c4aca-7514-4fe0-852a-55bf59b7f0ab",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalFlowLogCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}')))"
                }
              }
            ]
          },
          {
            "id": "53f8d464-cc4e-4906-86e7-3c90800ed609",
            "version": "KqlParameterItem/1.0",
            "name": "timeIntervalTopologyCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff({timeInterval:seconds} < 86400, TimeGenerated between (datetime_add('day', -1, todatetime('{timeInterval:endISO}')) .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))), TimeGenerated between (todatetime('{timeInterval:startISO}') .. datetime_add('day', 7, todatetime('{timeInterval:endISO}'))))"
                }
              }
            ]
          },
          {
            "id": "5f59846f-1e06-4f6f-b52f-d06bb63b97fb",
            "version": "KqlParameterItem/1.0",
            "name": "workspace",
            "label": "Log Analytics workspace",
            "type": 5,
            "description": "Select a workspace where Traffic Analytics is configured",
            "isRequired": true,
            "isGlobal": true,
            "query": "Resources\r\n| where type=~ \"microsoft.network/networkwatchers/flowlogs\"\r\n| where properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled == true\r\n| project wsResourceId = tolower(properties.flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId)\r\n| distinct wsResourceId\r\n| project wsResourceId, wsName = tolower(split(wsResourceId, '/')[8])\r\n",
            "crossComponentResources": [
              "value::all"
            ],
            "value": "/subscriptions/af15e575-f948-49ac-bce0-252d028e9379/resourcegroups/canaryomsresourcegroup/providers/microsoft.operationalinsights/workspaces/canaryws1",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "8ba132ac-8838-476c-8eb2-ed42aa2aa983",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptions",
            "label": "Discovered Subscriptions",
            "type": 2,
            "description": "NSGs in these subscriptions are configured to send their flow logs to the selected Log Analytics workspace. Select subscriptions, to analyze traffic from those subscriptions.",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n//| where {timeIntervalTopologyCheck}\r\n| where SubType_s == 'StatusMessage' and ComponentType_s == 'Topology'\r\n| distinct Subscription_g, SubscriptionName_s\r\n| project Subscription_g, SubscriptionName_s, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2a16ef52-9f5d-459b-987e-0b75297860ad",
            "version": "KqlParameterItem/1.0",
            "name": "subscriptionsCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription_g in~ ({subscriptions}))"
                }
              }
            ]
          },
          {
            "id": "d2028f10-9c63-499c-947d-08eb9a41121d",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroups",
            "label": "Resource groups",
            "type": 2,
            "description": "Traffic from the VNets in the selected resource groups, shall be analyzed. Select one or more resource groups.",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n//| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType !in ('VirtualSubnetwork','VirtualNetworkGatewayConnection','RemoteGatewayConnection', 'Route','NetworkAnalytics','VirtualNetworkPeering','NetworkSecurityGroupRule','SubnetworkConnection')\r\n| where {subscriptionsCheck}\r\n| project rgName = tostring(split(Name_s,'/')[0]), Subscription_g\r\n| distinct rgName, Subscription_g\r\n| project value = rgName, label = rgName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "96e71097-a8c9-4b64-903c-26a51bac174c",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroupsCheck",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rgToCheck in~ ({resourceGroups}))"
                }
              }
            ]
          },
          {
            "id": "282d8918-3c0c-43a0-aa36-6c14c3f5be79",
            "version": "KqlParameterItem/1.0",
            "name": "vnets",
            "label": "VNet",
            "type": 2,
            "description": "Select one or more virtual networks",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n//| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualNetwork'\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck} \r\n| project vnetId = strcat(Subscription_g, '/', Name_s )\r\n| distinct vnetId\r\n| project vnetName = tostring(split(vnetId, '/')[2])\r\n| project value = vnetName, label = vnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "8bee622a-1e58-404f-aee1-a8c310411e87",
            "version": "KqlParameterItem/1.0",
            "name": "subnets",
            "label": "Subnet",
            "type": 2,
            "description": "Select one or more subnets",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n//| where {timeIntervalTopologyCheck}\r\n| where SubType_s  =='Topology' and ResourceType == 'VirtualSubnetwork'\r\n| where {subscriptionsCheck}\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| project subnetId = strcat(Subscription_g, '/', Name_s)\r\n| distinct subnetId\r\n| project subnetName = tostring(split(subnetId, '/')[3])\r\n| project value = subnetName, label = subnetName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "632f19d9-96f0-40a7-99dc-84046caf1341",
            "version": "KqlParameterItem/1.0",
            "name": "vms",
            "label": "VM",
            "type": 2,
            "description": "Select one or more VMs",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL \r\n//| where {timeIntervalTopologyCheck}\r\n| where SubType_s  == 'Topology' and ResourceType == 'NetworkInterface'\r\n| where {subscriptionsCheck}\r\n| extend VirtualMachineNameSplit  = split(VirtualMachine_s, '/')\r\n| extend rgToCheck = tostring(VirtualMachineNameSplit[0])\r\n| where {resourceGroupsCheck}\r\n| extend subnetworkSplit = split(Subnetwork_s, '/')            \r\n| where iff(\"{vnets}\" == \"'*'\", true, tostring(subnetworkSplit[1]) in~ ({vnets}))\r\n| where iff(\"{subnets}\" == \"'*'\", true, tostring(subnetworkSplit[2]) in~ ({subnets}))\r\n| where isnotempty(tostring(VirtualMachineNameSplit[1]))\r\n| project vmId = strcat(Subscription_g, '/',VirtualMachineNameSplit[0], '/', subnetworkSplit [1], '/', subnetworkSplit[2], '/', VirtualMachineNameSplit[1])\r\n| distinct vmId\r\n| project vmName = tostring(split(vmId, '/')[4])\r\n| project value = vmName, label = vmName, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "2897635e-45da-4414-aa92-780491a3517d",
            "version": "KqlParameterItem/1.0",
            "name": "ips",
            "label": "IP",
            "type": 2,
            "description": "Select one or more IPs",
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "AzureNetworkAnalytics_CL\r\n//| where {timeIntervalTopologyCheck}\r\n| where SubType_s  == 'Topology' and ResourceType == 'NetworkInterface'\r\n| where {subscriptionsCheck}\r\n| extend VirtualMachineNameSplit = split(VirtualMachine_s, '/')\r\n| extend vmName = tostring(VirtualMachineNameSplit[1])\r\n| extend rgToCheck = tostring(split(Name_s, '/')[0])\r\n| where {resourceGroupsCheck}\r\n| extend subnetworkSplit = split(Subnetwork_s, '/')\r\n| where iff(\"{vnets}\" == \"'*'\", true, tostring(subnetworkSplit[1]) in~ ({vnets}))\r\n| where iff(\"{subnets}\" == \"'*'\", true, tostring(subnetworkSplit[2]) in~ ({subnets}))\r\n| where iff(\"{vms}\" == \"'*'\", true, vmName in~ ({vms}))\r\n| where isnotempty(vmName)\r\n| mv-expand privateIP = split(PrivateIPAddresses_s, ' '), publicIP = split(PublicIPAddresses_s, ' ') to typeof(string)\r\n| extend privateIPId = iif(isempty(privateIP), '', strcat(Subscription_g, '/', VirtualMachineNameSplit[0], '/',  subnetworkSplit[1], '/', subnetworkSplit[2], '/', vmName, '/', privateIP))\r\n| extend publicIPId = iif(isempty(publicIP), '', strcat(Subscription_g, '/',VirtualMachineNameSplit[0], '/' , subnetworkSplit[1], '/', subnetworkSplit[2], '/', vmName, '/', publicIP))\r\n| distinct privateIPId, publicIPId\r\n| mv-expand IPId = pack_array(privateIPId, publicIPId) to typeof(string)\r\n| where isnotempty(IPId)\r\n| project IP = tostring(split(IPId, '/')[5])\r\n| project value = IP, label = IP, selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*",
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 2"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "46fdbc80-975e-40ec-810b-bf7118ff3420",
            "version": "KqlParameterItem/1.0",
            "name": "subscription1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription1_g in~ ({subscriptions}))"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "c5d7e5b2-58c2-441f-9bcd-d82c38c9501c",
            "version": "KqlParameterItem/1.0",
            "name": "subscription2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subscriptions}\" == \"'*'\", true, Subscription2_g in~ ({subscriptions}))"
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "a3b54f25-1e18-4e33-9582-0a7d0cb600ce",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroup1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rg1ToCheck in~ ({resourceGroups})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "739e4291-4a53-46b4-8348-ce2bc4cc1ee1",
            "version": "KqlParameterItem/1.0",
            "name": "resourceGroup2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{resourceGroups}\" == \"'*'\", true, rg2ToCheck in~ ({resourceGroups})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "f31c23e9-d4e4-4c08-909c-5131d3f987a4",
            "version": "KqlParameterItem/1.0",
            "name": "vnet1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{vnets}\" == \"'*'\", true, vnet1ToCheck in~ ({vnets})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "d6fd78ee-4d6b-4cd3-9d99-896a5e080db1",
            "version": "KqlParameterItem/1.0",
            "name": "vnet2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{vnets}\" == \"'*'\", true, vnet2ToCheck in~ ({vnets})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "99e9b8b2-4cb9-4a1f-bc3a-e79d4a517f63",
            "version": "KqlParameterItem/1.0",
            "name": "subnet1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subnets}\" == \"'*'\", true, subnet1ToCheck in~ ({subnets})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "9be8b051-3218-42ce-a696-a07bab5a1a34",
            "version": "KqlParameterItem/1.0",
            "name": "subnet2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{subnets}\" == \"'*'\", true, subnet2ToCheck in~ ({subnets})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "87c12d72-687a-4d10-a99b-cffe4a185b3e",
            "version": "KqlParameterItem/1.0",
            "name": "vm1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{vms}\" == \"'*'\", true, vm1ToCheck in~ ({vms})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "d60fe892-c954-436d-b311-5491c0701b99",
            "version": "KqlParameterItem/1.0",
            "name": "vm2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{vms}\" == \"'*'\", true, vm2ToCheck in~ ({vms})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "33b266c2-37c2-49bc-8416-0716c80c1bd3",
            "version": "KqlParameterItem/1.0",
            "name": "ip1Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{ips}\" == \"'*'\", true, ip1ToCheck in~ ({ips})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "80b5f77a-54ff-432b-8c03-0ed9f7413f12",
            "version": "KqlParameterItem/1.0",
            "name": "ip2Check",
            "type": 1,
            "isHiddenWhenLocked": true,
            "criteriaData": [
              {
                "criteriaContext": {
                  "operator": "Default",
                  "rightValType": "param",
                  "resultValType": "static",
                  "resultVal": "iff(\"{ips}\" == \"'*'\", true, ip2ToCheck in~ ({ips})) "
                }
              }
            ],
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 10"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "8a4902b7-b0a6-4949-92b4-910cef05f453",
            "version": "KqlParameterItem/1.0",
            "name": "sortUnit",
            "label": "Top traffic by units in",
            "type": 2,
            "description": "This unit will be used to get the top 5 IPs.",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 3"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{workspace}"
        ],
        "parameters": [
          {
            "id": "8340f941-9688-4c62-9074-543636f115cb",
            "version": "KqlParameterItem/1.0",
            "name": "top5Hosts",
            "type": 2,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "// dropdown parameter\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n//\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n//\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), \r\nAllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\nAllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\nAllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\nAllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\nAllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\nAllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\nAllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)   \r\nby SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,VM1_s,VM2_s\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| extend hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n| mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n| extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n| extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n| where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n//\r\n| extend vm1ToCheck = split(VM, '/')[1], ip1ToCheck = IP\r\n| where {vm1Check}\r\n| where {ip1Check}\r\n//\r\n| summarize TotalTraffic = sum(iff('{sortUnit:value}' =~ 'bytes', BytesCount, iff('{sortUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by hostEndPoint\r\n| where TotalTraffic > 0\r\n| top 5 by TotalTraffic\r\n| project hostEndPoint, TotalTraffic, select = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeInterval",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a050abd6-c366-4fc9-b1aa-f309acafa79c",
            "version": "KqlParameterItem/1.0",
            "name": "binningTime",
            "type": 2,
            "query": "datatable (id:int) [1]\r\n| project value = strcat({timeInterval:seconds}/3000, 'm'), label = strcat({timeInterval:seconds}/3000, 'm'), selected = 1",
            "crossComponentResources": [
              "{workspace}"
            ],
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "timeContextFromParameter": "timeInterval",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 18"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// line chart\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| extend hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s) \r\n| mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n| where hostEndPoint in ({top5Hosts:value})\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows_d), BlockedInbound = sum(DeniedInFlows_d), \r\nAllowedOutbound = sum(AllowedOutFlows_d), BlockedOutbound = sum(DeniedOutFlows_d),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\nAllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\nAllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\nAllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\nAllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\nAllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\nAllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion, FlowStartTime_t, VM1_s, VM2_s\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| extend hostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), hostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s) \r\n| mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n| where hostEndPoint in ({top5Hosts:value})\r\n| summarize TotalTrafficHourly = sum(iff('{sortUnit:value}' =~ 'bytes', BytesCount, iff('{sortUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by hostEndPoint, bin(FlowStartTime_t, {binningTime})\r\n| project hostEndPoint, FlowStartTime_t, TotalTrafficHourly\r\n| sort by hostEndPoint, FlowStartTime_t",
        "size": 1,
        "aggregation": 2,
        "showAnnotations": true,
        "showAnalytics": true,
        "title": "Time trending chart for top 5 talking IPs",
        "noDataMessage": "No results",
        "showExportToExcel": true,
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ],
        "visualization": "linechart",
        "gridSettings": {
          "rowLimit": 10000,
          "filter": true,
          "sortBy": [
            {
              "itemKey": "FlowStartTime_t",
              "sortOrder": 1
            }
          ]
        },
        "sortBy": [
          {
            "itemKey": "FlowStartTime_t",
            "sortOrder": 1
          }
        ],
        "chartSettings": {
          "seriesLabelSettings": [
            {
              "seriesName": "9cece3e3-0f7d-47ca-af0e-9772773f90b7#er-lab/npm-windowssvr#10.10.40.5",
              "color": "redBright"
            },
            {
              "seriesName": "9cece3e3-0f7d-47ca-af0e-9772773f90b7#er-lab/er-labvm01#10.10.40.4",
              "color": "yellow"
            },
            {
              "seriesName": "af15e575-f948-49ac-bce0-252d028e9379#canaryresourcegroup3/canaryvnet3-appgw-VM#10.4.2.5",
              "color": "green"
            },
            {
              "seriesName": "af15e575-f948-49ac-bce0-252d028e9379#canaryresourcegroup3/canaryvnet3-appgw-VM#10.4.2.4",
              "color": "blueDark"
            },
            {
              "seriesName": "558f48f5-8789-4a28-b05b-956596d499af#runnersrgac/runnersvm#10.0.0.4",
              "color": "pink"
            }
          ]
        }
      },
      "showPin": true,
      "name": "Time trending chart for top 5 talking IPs"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "3df6c05c-9526-4072-842e-519cf239bf35",
            "version": "KqlParameterItem/1.0",
            "name": "displayUnit",
            "label": "Display traffic in",
            "type": 2,
            "description": "The traffic will be shown in this unit.",
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[\r\n    { \"value\":\"flows\", \"label\":\"Flows\", \"selected\":true },\r\n    { \"value\":\"bytes\", \"label\":\"Bytes\" },\r\n    { \"value\":\"packets\", \"label\":\"Packets\"}\r\n]",
            "timeContext": {
              "durationMs": 86400000
            }
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 3 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let ValueWithUnit = (x:real, precision:int) {\r\n    iff(x < 1000, strcat(tostring(round(x, precision)), ''), \r\n    iff(x < 1000000, strcat(tostring(round(x/1000, precision)), ' K'), \r\n    iff(x < 1000000000, strcat(tostring(round(x/1000000, precision)), ' M'), \r\n    iff(x < 1000000000000, strcat(tostring(round(x/1000000000, precision)), ' B'), \r\n    iff(x < 1000000000000000, strcat(tostring(round(x/1000000000000, precision)), ' T'), \r\n    strcat(tostring(round(x/1000000000000000, precision)), ' Q'))))))\r\n};\r\nAzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n//\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n//\r\n| extend isMaliciousFlow = (FlowType_s == 'MaliciousFlow') \r\n//\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n// BytesFieldsExtension\r\n| extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0),\r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), \r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), \r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n// PacketsFieldsExtension\r\n| extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), \r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), \r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), \r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)                                                    \r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\n// FlowSummarizationStatements\r\nAllowedInbound = sum(AllowedInFlows_d),\r\nBlockedInbound = sum(DeniedInFlows_d),\r\nAllowedOutbound = sum(AllowedOutFlows_d),\r\nBlockedOutbound = sum(DeniedOutFlows_d),\r\n// BytesSummarizationStatements\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc), \r\nAllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc), \r\nAllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest), \r\nAllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\n// PacketsSummarizationStatements\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc), \r\nAllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc), \r\nAllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest), \r\nAllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\n// \r\nby SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,VM1_s,VM2_s, isMaliciousFlow, Subnet1_s, Subnet2_s\r\n// FlowsInferredFields\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n// BytesInferredFields\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest) \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc) \r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred \r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n// PacketsInferredFields\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest) \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc) \r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred \r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n// where did the following come from?\r\n| extend \r\nhostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\nhostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n| mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n| extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n| extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n| where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n//\r\n| extend vm1ToCheck = split(VM, '/')[1], ip1ToCheck = IP\r\n| where {vm1Check}\r\n| where {ip1Check}\r\n//\r\n| extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n| extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n// fork part 1 Flows:\r\n| extend \r\nAllowedInboundFlow = iff(direction == 'Destination', tolong(AllowedInbound), 0), \r\nBlockedInboundFlow = iff(direction == 'Destination', tolong(BlockedInbound), 0),\r\nAllowedOutboundFlow = iff(direction == 'Source', tolong(AllowedOutbound), 0),\r\nBlockedOutboundFlow = iff(direction == 'Source', tolong(BlockedOutbound), 0) \r\n// fork part 2 Bytes:\r\n| extend \r\nAllowedInboundBytes = iff(direction == 'Destination', tolong(AllowedInboundBytesAtDest), tolong(AllowedInboundBytesAtSrc)), \r\nBlockedInboundBytes = iff(direction == 'Destination', tolong(BlockedInboundBytesAtDest), tolong(BlockedInboundBytesAtSrc)),\r\nAllowedOutboundBytes = iff(direction == 'Source', tolong(AllowedOutboundBytesAtSrc), tolong(AllowedOutboundBytesAtDest)),\r\nBlockedOutboundBytes = iff(direction == 'Source', tolong(BlockedOutboundBytesAtSrc), tolong(BlockedOutboundBytesAtDest)) \r\n// fork part 3 Packets:\r\n| extend \r\nAllowedInboundPackets = iff(direction == 'Destination', tolong(AllowedInboundPacketsAtDest), tolong(AllowedInboundPacketsAtSrc)),\r\nBlockedInboundPackets = iff(direction == 'Destination', tolong(BlockedInboundPacketsAtDest), tolong(BlockedInboundPacketsAtSrc)),\r\nAllowedOutboundPackets = iff(direction == 'Source', tolong(AllowedOutboundPacketsAtSrc), tolong(AllowedOutboundPacketsAtDest)),\r\nBlockedOutboundPackets = iff(direction == 'Source', tolong(BlockedOutboundPacketsAtSrc), tolong(BlockedOutboundPacketsAtDest))\r\n| summarize \r\n// summarize for flows\r\nAllowedInboundFlow = sum(AllowedInboundFlow), \r\nBlockedInboundFlow = sum(BlockedInboundFlow),\r\nAllowedOutboundFlow = sum(AllowedOutboundFlow),\r\nBlockedOutboundFlow = sum(BlockedOutboundFlow),\r\nAllowedInboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedInboundFlow, 0)),\r\nBlockedInboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedInboundFlow, 0)),\r\nAllowedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, AllowedOutboundFlow, 0)),\r\nBlockedOutboundMaliciousFlow = sum(iff(isMaliciousFlow, BlockedOutboundFlow, 0)),\r\nTotalFlow = sum(FlowCount),\r\n// summarize for bytes\r\nAllowedInboundBytes = sum(AllowedInboundBytes), \r\nBlockedInboundBytes = sum(BlockedInboundBytes), \r\nAllowedOutboundBytes = sum(AllowedOutboundBytes),\r\nBlockedOutboundBytes = sum(BlockedOutboundBytes), \r\nAllowedInboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedInboundBytes, 0)),\r\nBlockedInboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedInboundBytes, 0)), \r\nAllowedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, AllowedOutboundBytes, 0)),\r\nBlockedOutboundMaliciousBytes = sum(iff(isMaliciousFlow, BlockedOutboundBytes, 0)), \r\nTotalBytes = sum(BytesCount),\r\n// summarize for packets\r\nAllowedInboundPackets = sum(AllowedInboundPackets),\r\nBlockedInboundPackets = sum(BlockedInboundPackets),\r\nAllowedOutboundPackets = sum(AllowedOutboundPackets),\r\nBlockedOutboundPackets = sum(BlockedOutboundPackets),\r\nAllowedInboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedInboundPackets, 0)),\r\nBlockedInboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedInboundPackets, 0)),\r\nAllowedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, AllowedOutboundPackets, 0)), BlockedOutboundMaliciousPackets = sum(iff(isMaliciousFlow, BlockedOutboundPackets, 0)),\r\nTotalPackets = sum(PacketsCount)\r\n//\r\nby IP, VM, Subnet, Subscription\r\n// where did the \"by ....\" come from?\r\n| extend TrafficInSelectedUnit = iff('{sortUnit:value}' =~ 'bytes', TotalBytes, iff('{sortUnit:value}' =~ 'packets', TotalPackets, tolong(TotalFlow)))\r\n| where TrafficInSelectedUnit > 0\r\n| sort by TrafficInSelectedUnit desc\r\n| project IP, VM, Subnet, Subscription, \r\nTotalTraffic = iff('{displayUnit:value}' =~ 'bytes', format_bytes(TotalBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(TotalPackets, 3), ValueWithUnit(TotalFlow, 3))), \r\n// Inbound Traffic\r\nTotalInbound = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedInboundBytes + BlockedInboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets + BlockedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow + BlockedInboundFlow, 3))), \r\nAllowedInbound = iff('{displayUnit:value}' =~ 'bytes', AllowedInboundBytes, iff('{displayUnit:value}' =~ 'packets', AllowedInboundPackets, tolong(AllowedInboundFlow))), \r\nAllowedInboundFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedInboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets, 3), ValueWithUnit(AllowedInboundFlow, 3))), \r\nBlockedInbound = iff('{displayUnit:value}' =~ 'bytes', BlockedInboundBytes, iff('{displayUnit:value}' =~ 'packets', BlockedInboundPackets, tolong(BlockedInboundFlow))), \r\nBlockedInboundFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedInboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets, 3), ValueWithUnit(BlockedInboundFlow, 3))),\r\nAllowedInboundBenign = iff('{displayUnit:value}' =~ 'bytes', AllowedInboundBytes-AllowedInboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', AllowedInboundPackets-AllowedInboundMaliciousPackets, tolong(AllowedInboundFlow-AllowedInboundMaliciousFlow))), \r\nAllowedInboundBenignFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedInboundBytes-AllowedInboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedInboundPackets-AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundFlow-AllowedInboundMaliciousFlow, 3))), \r\nAllowedInboundMalicious = iff('{displayUnit:value}' =~ 'bytes', AllowedInboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', AllowedInboundMaliciousPackets, tolong(AllowedInboundMaliciousFlow))), \r\nAllowedInboundMaliciousFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedInboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedInboundMaliciousPackets, 3), ValueWithUnit(AllowedInboundMaliciousFlow, 3))),\r\nBlockedInboundBenign = iff('{displayUnit:value}' =~ 'bytes', BlockedInboundBytes-BlockedInboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', BlockedInboundPackets-BlockedInboundMaliciousPackets, tolong(BlockedInboundFlow-BlockedInboundMaliciousFlow))), \r\nBlockedInboundBenignFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedInboundBytes-BlockedInboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedInboundPackets-BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundFlow-BlockedInboundMaliciousFlow, 3))), \r\nBlockedInboundMalicious = iff('{displayUnit:value}' =~ 'bytes', BlockedInboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', BlockedInboundMaliciousPackets, tolong(BlockedInboundMaliciousFlow))), \r\nBlockedInboundMaliciousFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedInboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedInboundMaliciousPackets, 3), ValueWithUnit(BlockedInboundMaliciousFlow, 3))),\r\n// Outbound Traffic\r\nTotalOutbound = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes + BlockedOutboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets + BlockedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow + BlockedOutboundFlow, 3))), \r\nAllowedOutbound = iff('{displayUnit:value}' =~ 'bytes', AllowedOutboundBytes, iff('{displayUnit:value}' =~ 'packets', AllowedOutboundPackets, tolong(AllowedOutboundFlow))), \r\nAllowedOutboundFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets, 3), ValueWithUnit(AllowedOutboundFlow, 3))), \r\nBlockedOutbound = iff('{displayUnit:value}' =~ 'bytes', BlockedOutboundBytes, iff('{displayUnit:value}' =~ 'packets', BlockedOutboundPackets, tolong(BlockedOutboundFlow))), \r\nBlockedOutboundFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets, 3), ValueWithUnit(BlockedOutboundFlow, 3))),\r\nAllowedOutboundBenign = iff('{displayUnit:value}' =~ 'bytes', AllowedOutboundBytes-AllowedOutboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', AllowedOutboundPackets-AllowedOutboundMaliciousPackets, tolong(AllowedOutboundFlow-AllowedOutboundMaliciousFlow))), \r\nAllowedOutboundBenignFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedOutboundBytes-AllowedOutboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedOutboundPackets-AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundFlow-AllowedOutboundMaliciousFlow, 3))), \r\nAllowedOutboundMalicious = iff('{displayUnit:value}' =~ 'bytes', AllowedOutboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', AllowedOutboundMaliciousPackets, tolong(AllowedOutboundMaliciousFlow))), \r\nAllowedOutboundMaliciousFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(AllowedOutboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(AllowedOutboundMaliciousPackets, 3), ValueWithUnit(AllowedOutboundMaliciousFlow, 3))),\r\nBlockedOutboundBenign = iff('{displayUnit:value}' =~ 'bytes', BlockedOutboundBytes-BlockedOutboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', BlockedOutboundPackets-BlockedOutboundMaliciousPackets, tolong(BlockedOutboundFlow-BlockedOutboundMaliciousFlow))), \r\nBlockedOutboundBenignFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedOutboundBytes-BlockedOutboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedOutboundPackets-BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundFlow-BlockedOutboundMaliciousFlow, 3))), \r\nBlockedOutboundMalicious = iff('{displayUnit:value}' =~ 'bytes', BlockedOutboundMaliciousBytes, iff('{displayUnit:value}' =~ 'packets', BlockedOutboundMaliciousPackets, tolong(BlockedOutboundMaliciousFlow))), \r\nBlockedOutboundMaliciousFormatted = iff('{displayUnit:value}' =~ 'bytes', format_bytes(BlockedOutboundMaliciousBytes, 3), iff('{displayUnit:value}' =~ 'packets', ValueWithUnit(BlockedOutboundMaliciousPackets, 3), ValueWithUnit(BlockedOutboundMaliciousFlow, 3))),\r\nhostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription)",
        "size": 0,
        "title": "Common",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "displayUnit",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Common"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureNetworkAnalytics_CL\r\n| where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n//\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n//\r\n| extend \r\nhostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\nhostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n| mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n| extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n| extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n| where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n//\r\n| extend vm1ToCheck = split(VM, '/')[1], ip1ToCheck = IP\r\n| where {vm1Check}\r\n| where {ip1Check}\r\n//\r\n| extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n| extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n// modified ends here\r\n| extend isAzurePublicFlow = (FlowType_s == 'AzurePublic')\r\n// removed old direction part here\r\n| mv-expand partnerIP = iif(direction == 'Source', iff(isnotempty(DestIP_s), pack_array(DestIP_s), split(DestPublicIPs_s, ' ')), iff(isnotempty(SrcIP_s), pack_array(SrcIP_s), split(SrcPublicIPs_s, ' ')))\r\n| extend \r\npartnerIP = tostring(split(partnerIP, '|')[0]),\r\npartnerHost = iff(direction == 'Source' and isnotempty(VM2_s), VM2_s, iff(direction == 'Destination' and isnotempty(VM1_s), VM1_s, iff(isAzurePublicFlow, AzureRegion_s, Country_s)))\r\n| where isnotempty(partnerIP) or isnotempty(partnerHost)\r\n// fork 1\r\n| extend CountryOrRegion = iif(FlowType_s == 'AzurePublic', AzureRegion_s, Country_s)\r\n| extend \r\nAllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0),\r\nBlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0),\r\nAllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0),\r\nBlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0),\r\nAllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0),\r\nBlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0),\r\nAllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0),\r\nBlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0)\r\n| extend \r\nAllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0),\r\nBlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0),\r\nAllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0),\r\nBlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0),\r\nAllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0),\r\nBlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0),\r\nAllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0),\r\nBlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)\r\n| extend FlowDirection_s = iif(FlowType_s in ('InterVNet','IntraVNet'), '', FlowDirection_s)\r\n| summarize \r\nAllowedInbound = sum(AllowedInFlows_d),\r\nBlockedInbound = sum(DeniedInFlows_d),\r\nAllowedOutbound = sum(AllowedOutFlows_d),\r\nBlockedOutbound = sum(DeniedOutFlows_d),\r\nAllowedInboundBytesAtSrc = sum(AllowedInboundBytesAtSrc), BlockedInboundBytesAtSrc = sum(BlockedInboundBytesAtSrc),\r\nAllowedOutboundBytesAtSrc = sum(AllowedOutboundBytesAtSrc), BlockedOutboundBytesAtSrc = sum(BlockedOutboundBytesAtSrc),\r\nAllowedInboundBytesAtDest = sum(AllowedInboundBytesAtDest), BlockedInboundBytesAtDest = sum(BlockedInboundBytesAtDest),\r\nAllowedOutboundBytesAtDest = sum(AllowedOutboundBytesAtDest), BlockedOutboundBytesAtDest = sum(BlockedOutboundBytesAtDest),\r\nAllowedInboundPacketsAtSrc = sum(AllowedInboundPacketsAtSrc), BlockedInboundPacketsAtSrc = sum(BlockedInboundPacketsAtSrc),\r\nAllowedOutboundPacketsAtSrc = sum(AllowedOutboundPacketsAtSrc), BlockedOutboundPacketsAtSrc = sum(BlockedOutboundPacketsAtSrc),\r\nAllowedInboundPacketsAtDest = sum(AllowedInboundPacketsAtDest), BlockedInboundPacketsAtDest = sum(BlockedInboundPacketsAtDest),\r\nAllowedOutboundPacketsAtDest = sum(AllowedOutboundPacketsAtDest), BlockedOutboundPacketsAtDest = sum(BlockedOutboundPacketsAtDest)\r\nby SrcIP_s, Subscription1_g, NIC1_s, DestIP_s, Subscription2_g, NIC2_s, FlowDirection_s, L4Protocol_s, DestPort_d, CountryOrRegion ,partnerIP,partnerHost, VM1_s,VM2_s, Subnet1_s, Subnet2_s\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutbound, AllowedInbound + BlockedInbound)\r\n| extend Outbound = AllowedOutbound_inferred + BlockedOutbound, Inbound = AllowedOutbound_inferred\r\n| extend FlowCount = max_of(Inbound, Outbound)\r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)\r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)\r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred\r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred\r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc)\r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)\r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)\r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred\r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred\r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc)\r\n| extend \r\nhostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\nhostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n| mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n| extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n| extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n| where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n| extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n| summarize totalTraffic = sum(iff('{sortUnit:value}' =~ 'bytes', BytesCount, iff('{sortUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, partnerHost, IP, VM, Subnet, Subscription\r\n| top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', partnerHost) by max(totalTraffic)\r\n| summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ', ') by hostInfo\r\n| project hostInfo, topTalkingPairs",
        "size": 1,
        "title": "Top Talking (string)",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "sortUnit",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Top Talking (string)"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "AzureNetworkAnalytics_CL \r\n| where SubType_s == 'FlowLog' and  (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')\r\n//\r\n| where {timeIntervalFlowLogCheck} and FlowStartTime_t between (datetime('{timeInterval:startISO}') .. datetime('{timeInterval:endISO}'))\r\n| where {subscription1Check} or {subscription2Check}\r\n| extend Subnet1Split = split(Subnet1_s, '/'), Subnet2Split = split(Subnet2_s, '/')\r\n| extend rg1ToCheck = Subnet1Split[0], rg2ToCheck = Subnet2Split[0]\r\n| where {resourceGroup1Check} or {resourceGroup2Check}\r\n| extend vnet1ToCheck = Subnet1Split[1], vnet2ToCheck = Subnet2Split[1]\r\n| where {vnet1Check} or {vnet2Check}\r\n| extend subnet1ToCheck = Subnet1Split[2], subnet2ToCheck = Subnet2Split[2]\r\n| where {subnet1Check} or {subnet2Check}\r\n//\r\n| extend \r\nhostEndPoint1 = strcat(Subscription1_g, '#', VM1_s, '#', SrcIP_s), \r\nhostEndPoint2 = strcat(Subscription2_g, '#', VM2_s, '#', DestIP_s)\r\n| mv-expand hostEndPoint = pack_array(hostEndPoint1, hostEndPoint2) to typeof(string)\r\n| extend splittedHostEndPoint = split(hostEndPoint, '#')\r\n| extend Subscription = tostring(splittedHostEndPoint[0]), VM = tostring(splittedHostEndPoint[1]), IP = tostring(splittedHostEndPoint[2])\r\n| where isnotempty(Subscription) and isnotempty(VM) and isnotempty(IP)\r\n//\r\n| extend vm1ToCheck = split(VM, '/')[1], ip1ToCheck = IP\r\n| where {vm1Check}\r\n| where {ip1Check}\r\n//\r\n| extend Subnet = iff(hostEndPoint == hostEndPoint1, Subnet1_s, Subnet2_s)\r\n| extend direction = iff (hostEndPoint == hostEndPoint1, \"Source\", \"Destination\")\r\n// modified ends here\r\n| where FlowType_s == 'MaliciousFlow'\r\n| extend partnerIP = iff(direction == 'Source', DestIP_s, SrcIP_s)   \r\n// fork begins\r\n| extend AllowedOutbound_inferred = max_of(AllowedOutFlows_d, AllowedInFlows_d + DeniedInFlows_d) \r\n| extend Outbound = AllowedOutbound_inferred + DeniedOutFlows_d, Inbound = AllowedOutbound_inferred \r\n| extend FlowCount = max_of(Inbound, Outbound) \r\n| extend AllowedInboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), BlockedInboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundBytes_d), 0), AllowedInboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), BlockedInboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundBytes_d), 0), AllowedOutboundBytesAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0), BlockedOutboundBytesAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundBytes_d), 0) \r\n| extend AllowedOutboundBytesAtSrc_inferred = max_of(AllowedOutboundBytesAtSrc, AllowedInboundBytesAtDest + BlockedInboundBytesAtDest)   \r\n| extend AllowedOutboundBytesAtDest_inferred = max_of(AllowedOutboundBytesAtDest, AllowedInboundBytesAtSrc + BlockedInboundBytesAtSrc)   \r\n| extend OutboundBytesAtSrc = AllowedOutboundBytesAtSrc_inferred + BlockedOutboundBytesAtSrc, InboundBytesAtSrc = AllowedOutboundBytesAtDest_inferred   \r\n| extend OutboundBytesAtDest = AllowedOutboundBytesAtDest_inferred + BlockedOutboundBytesAtDest, InboundBytesAtDest = AllowedOutboundBytesAtSrc_inferred   \r\n| extend BytesCount = max_of(OutboundBytesAtSrc, InboundBytesAtDest) + max_of(OutboundBytesAtDest, InboundBytesAtSrc) \r\n| extend AllowedInboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtSrc = iff(FlowStatus_s == 'A' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtSrc = iff(FlowStatus_s == 'D' and FlowDirection_s == 'O', tolong(OutboundPackets_d), 0), AllowedInboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), BlockedInboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(InboundPackets_d), 0), AllowedOutboundPacketsAtDest = iff(FlowStatus_s == 'A' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0), BlockedOutboundPacketsAtDest = iff(FlowStatus_s == 'D' and FlowDirection_s == 'I', tolong(OutboundPackets_d), 0)   \r\n| extend AllowedOutboundPacketsAtSrc_inferred = max_of(AllowedOutboundPacketsAtSrc, AllowedInboundPacketsAtDest + BlockedInboundPacketsAtDest)     \r\n| extend AllowedOutboundPacketsAtDest_inferred = max_of(AllowedOutboundPacketsAtDest, AllowedInboundPacketsAtSrc + BlockedInboundPacketsAtSrc)     \r\n| extend OutboundPacketsAtSrc = AllowedOutboundPacketsAtSrc_inferred + BlockedOutboundPacketsAtSrc, InboundPacketsAtSrc = AllowedOutboundPacketsAtDest_inferred     \r\n| extend OutboundPacketsAtDest = AllowedOutboundPacketsAtDest_inferred + BlockedOutboundPacketsAtDest, InboundPacketsAtDest = AllowedOutboundPacketsAtSrc_inferred     \r\n| extend PacketsCount = max_of(OutboundPacketsAtSrc, InboundPacketsAtDest) + max_of(OutboundPacketsAtDest, InboundPacketsAtSrc) \r\n| summarize totalTraffic = sum(iff('{sortUnit:value}' =~ 'bytes', BytesCount, iff('{sortUnit:value}' =~ 'packets', PacketsCount, tolong(FlowCount)))) by partnerIP, Country_s, IP, VM, Subnet, Subscription\r\n| top-nested of hostInfo = strcat(IP, '#', VM, '#', Subnet, '#', Subscription) by max(1), top-nested 3 of partnerInfo = strcat(partnerIP, '#', Country_s) by max(totalTraffic)\r\n| project hostInfo, partnerInfo\r\n| summarize topTalkingPairs = strcat_array(make_list(strcat(split(partnerInfo, '#')[0],' (',split(partnerInfo, '#')[1],')')), ',') by hostInfo\r\n| project hostInfo, topTalkingPairs",
        "size": 1,
        "title": "Top Malacious (string)",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{workspace}"
        ]
      },
      "conditionalVisibility": {
        "parameterName": "sortUnit",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Top Malacious (string)"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"a1af183a-b05e-4bec-8115-df4c9ef786e9\",\"mergeType\":\"outer\",\"leftTable\":\"Top Talking (string)\",\"rightTable\":\"Top Malacious (string)\",\"leftColumn\":\"hostInfo\",\"rightColumn\":\"hostInfo\"}],\"projectRename\":[{\"originalName\":\"[Top Talking (string)].hostInfo\",\"mergedName\":\"hostInfo\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef786e9\"},{\"originalName\":\"[Top Talking (string)].topTalkingPairs\",\"mergedName\":\"topTalkingPairs\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef786e9\"},{\"originalName\":\"[Top Malacious (string)].hostInfo\",\"mergedName\":\"hostInfo1\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef786e9\"},{\"originalName\":\"[Top Malacious (string)].topTalkingPairs\",\"mergedName\":\"topTalkingPairs1\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef786e9\"}]}",
        "size": 0,
        "title": "Merge Top Talking and Top Malicious (string)",
        "queryType": 7,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "hostInfo1",
              "formatter": 5
            }
          ]
        }
      },
      "conditionalVisibility": {
        "parameterName": "displayUnit",
        "comparison": "isEqualTo",
        "value": "never"
      },
      "name": "Merge Top Talking and Top Malicious (string)"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\",\"mergeType\":\"leftouter\",\"leftTable\":\"Common\",\"rightTable\":\"Merge Top Talking and Top Malicious (string)\",\"leftColumn\":\"hostInfo\",\"rightColumn\":\"hostInfo\"}],\"projectRename\":[{\"originalName\":\"[Common].IP\",\"mergedName\":\"VM IP\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].VM\",\"mergedName\":\"VM name\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].Subnet\",\"mergedName\":\"Subnet\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].Subscription\",\"mergedName\":\"Subscription\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Merge Top Talking and Top Malicious (string)].topTalkingPairs\",\"mergedName\":\"Top talking pair\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Merge Top Talking and Top Malicious (string)].topTalkingPairs1\",\"mergedName\":\"Top malicious IP\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Merge Top Talking and Top Malicious (string)].hostInfo\",\"mergedName\":\"hostInfo1\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].TotalTraffic\",\"mergedName\":\"Total traffic\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].TotalInbound\",\"mergedName\":\"Total inbound (allowed/blocked)\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedInbound\",\"mergedName\":\"Inbound allowed (benign/malicious)\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedInboundFormatted\",\"mergedName\":\"AllowedInboundFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedInbound\",\"mergedName\":\"Inbound blocked (benign/malicious)\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedInboundFormatted\",\"mergedName\":\"BlockedInboundFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedInboundBenign\",\"mergedName\":\"AllowedInboundBenign\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedInboundBenignFormatted\",\"mergedName\":\"AllowedInboundBenignFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedInboundMalicious\",\"mergedName\":\"AllowedInboundMalicious\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedInboundMaliciousFormatted\",\"mergedName\":\"AllowedInboundMaliciousFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedInboundBenign\",\"mergedName\":\"BlockedInboundBenign\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedInboundBenignFormatted\",\"mergedName\":\"BlockedInboundBenignFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedInboundMalicious\",\"mergedName\":\"BlockedInboundMalicious\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedInboundMaliciousFormatted\",\"mergedName\":\"BlockedInboundMaliciousFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].TotalOutbound\",\"mergedName\":\"Total outbound (allowed/blocked)\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedOutbound\",\"mergedName\":\"Outbound allowed (benign/malicious)\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedOutboundFormatted\",\"mergedName\":\"AllowedOutboundFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedOutbound\",\"mergedName\":\"Outbound blocked (benign/malicious)\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedOutboundFormatted\",\"mergedName\":\"BlockedOutboundFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedOutboundBenign\",\"mergedName\":\"AllowedOutboundBenign\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedOutboundBenignFormatted\",\"mergedName\":\"AllowedOutboundBenignFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedOutboundMalicious\",\"mergedName\":\"AllowedOutboundMalicious\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].AllowedOutboundMaliciousFormatted\",\"mergedName\":\"AllowedOutboundMaliciousFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedOutboundBenign\",\"mergedName\":\"BlockedOutboundBenign\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedOutboundBenignFormatted\",\"mergedName\":\"BlockedOutboundBenignFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedOutboundMalicious\",\"mergedName\":\"BlockedOutboundMalicious\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].BlockedOutboundMaliciousFormatted\",\"mergedName\":\"BlockedOutboundMaliciousFormatted\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Common].hostInfo\",\"mergedName\":\"hostInfo\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"},{\"originalName\":\"[Merge Top Talking and Top Malicious (string)].hostInfo1\",\"mergedName\":\"hostInfo11\",\"fromId\":\"a1af183a-b05e-4bec-8115-df4c9ef787d6\"}]}",
        "size": 0,
        "title": "Details of top 5 talking IPs",
        "showExportToExcel": true,
        "queryType": 7,
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "VM IP",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "VM name",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "Subnet",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "Subscription",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "Top talking pair",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "Top malicious IP",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "hostInfo1",
              "formatter": 5
            },
            {
              "columnMatch": "Total inbound (allowed/blocked)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"TotalInbound\"] ([\"AllowedInboundFormatted\"] / [\"BlockedInboundFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "Inbound allowed (benign/malicious)",
                      "color": "blue"
                    },
                    {
                      "columnName": "Inbound blocked (benign/malicious)",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                }
              }
            },
            {
              "columnMatch": "Inbound allowed (benign/malicious)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"AllowedInbound\"] ([\"AllowedInboundBenignFormatted\"] / [\"AllowedInboundMaliciousFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "AllowedInboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "AllowedInboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "AllowedInboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "Inbound blocked (benign/malicious)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"BlockedInbound\"] ([\"BlockedInboundBenignFormatted\"] / [\"BlockedInboundMaliciousFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "BlockedInboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "BlockedInboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "BlockedInboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedInboundBenign",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedInboundBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedInboundMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedInboundMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedInboundBenign",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedInboundBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedInboundMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedInboundMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "Total outbound (allowed/blocked)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"TotalOutbound\"] ([\"AllowedOutboundFormatted\"] / [\"BlockedOutboundFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "Outbound allowed (benign/malicious)",
                      "color": "blue"
                    },
                    {
                      "columnName": "Outbound blocked (benign/malicious)",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "Outbound allowed (benign/malicious)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"AllowedOutbound\"] ([\"AllowedOutboundBenignFormatted\"] / [\"AllowedOutboundMaliciousFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "AllowedOutboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "AllowedOutboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "AllowedOutboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "Outbound blocked (benign/malicious)",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"BlockedOutbound\"] ([\"BlockedOutboundBenignFormatted\"] / [\"BlockedOutboundMaliciousFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "BlockedOutboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "BlockedOutboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "BlockedOutboundFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedOutboundBenign",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedOutboundBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedOutboundMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "AllowedOutboundMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedOutboundBenign",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedOutboundBenignFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedOutboundMalicious",
              "formatter": 5
            },
            {
              "columnMatch": "BlockedOutboundMaliciousFormatted",
              "formatter": 5
            },
            {
              "columnMatch": "hostInfo",
              "formatter": 5
            },
            {
              "columnMatch": "hostInfo11",
              "formatter": 5
            },
            {
              "columnMatch": "IP",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "VM",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "TotalTraffic",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "TotalInbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"TotalInbound\"] ([\"AllowedInboundFormatted\"] / [\"BlockedInboundFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "AllowedInbound",
                      "color": "blue"
                    },
                    {
                      "columnName": "BlockedInbound",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "AllowedInbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"AllowedInbound\"] ([\"AllowedInboundBenignFormatted\"] / [\"AllowedInboundMaliciousFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "AllowedInboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "AllowedInboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "BlockedInbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"BlockedInbound\"] ([\"BlockedInboundBenignFormatted\"] / [\"BlockedInboundMaliciousFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "BlockedInboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "BlockedInboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "TotalOutbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"TotalOutbound\"] ([\"AllowedOutboundFormatted\"] / [\"BlockedOutboundFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "AllowedOutbound",
                      "color": "blue"
                    },
                    {
                      "columnName": "BlockedOutbound",
                      "color": "gray"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "AllowedOutbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"AllowedOutbound\"] ([\"AllowedOutboundBenignFormatted\"] / [\"AllowedOutboundMaliciousFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "AllowedOutboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "AllowedOutboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "BlockedOutbound",
              "formatter": 22,
              "formatOptions": {
                "compositeBarSettings": {
                  "labelText": "[\"BlockedOutbound\"] ([\"BlockedOutboundBenignFormatted\"] / [\"BlockedOutboundMaliciousFormatted\"])",
                  "columnSettings": [
                    {
                      "columnName": "BlockedOutboundBenign",
                      "color": "green"
                    },
                    {
                      "columnName": "BlockedOutboundMalicious",
                      "color": "redBright"
                    }
                  ],
                  "noRowsScaling": true
                },
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "topTalkingPairs",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            },
            {
              "columnMatch": "topTalkingPairs1",
              "formatter": 0,
              "formatOptions": {
                "customColumnWidthSetting": "1fr"
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true
        }
      },
      "name": "Details of top 5 talking IPs"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}